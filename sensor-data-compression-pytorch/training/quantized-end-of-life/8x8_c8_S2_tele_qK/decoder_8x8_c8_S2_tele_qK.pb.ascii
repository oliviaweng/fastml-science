node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "-\t\241=\342\204Q<\266{\023>\270\256\037\276\2011\220\276\020\020\344\276n\311\256>\201\344\016\300\324\311\010\2770\320\367>\331\010\217\275\321\210\241\276\226\372\007\276\230\354\326<\212\t\225<\265,\006\277\244\370\223<S\261t=X\342s>\355}\002\300\364\254\260>\210H\364\276<\247\301\274\222\207\260\276\334\366M\277\205\316\242>\360d\200\276j\335\206?K\252\362\277\337*\330=\n\327T>\277\353y>\377&*\276$\217l>\334\014\207\275o\212\000\276\204\205\006\277\230\034\206<#\nR=\365_S>\002\262\245>\343E\023\275\005\272\343\276\316l=\275\317\2311\276\371\351\215>\252\225\241\276\323=\010=H\371\356;#\t\202>yX\206\276\325\013\201\277\213\256\301\275\361\343\327\276\324\352\372\276 \335\321\277\250\217\\>\344\377D?a\270\253>N\013\230\276\302|\305\277CK\341\275s\202\025\276\374\207\243\276\036\2540\276i\274\202\275\327U\323\275\333\007\276>-\261\324\276\030\311\267=N\303\">\256\022\356\275\315|\261\272^3\201\275\247\224\247=\355a\204>2\343\035\275\3656\325>\337\3505=L\3656>\340lp\276\n\203\236\276g\311&\277\035_\230>\3115\024=\253\362\307\276V\205;\276\350\211\261\276\006\344\037\276\3135\324\276\364\036\251\275\340\361\373\276\363\356n\277\013SC\276\375\275H?p\026\016>\267]u\276\210!\036\2763g\034=BL\356>\302\3554@,\340\004\276K )>\277\304\215>\277_X\274\331\226\324<\347d\204>\262\371k?\226\032L\275\0040\224>\362\265\n\276O\203\034>.\257\200\275\372\005\312\277j5\210\275F\341\227\277\246C\307\277\022\264\327\275?\"\251\275l\350\270\276\314\203\035>\360\304;\275\202\353\232\275\274yk\275\374>\250=p\322\t<T\314\335=\014\255\235=\254\354\370>G!\340<R\230\351\273\221\360Z>\264\214|>_Y\261>\317\016\216<`-\216\277#\212\224\276\232\007b<\325\362\233\276%\322A\276,\241\013\275\270Z\372\275\237/f>\\\t_=\016\214N\275x\253\374=\003\235\177\275\201$m\277\027\227\302<\363|c\2745U0\274\352\\\260\275a\302\340>;#z<)\301\027\276O\230)?\230\377\335\276+\022t\276\311\035\266>\0273Q>\2002\230=\026$\303=\376\2202\275q\020)=[I\232\275T\033\245>\360\206e>O\306\034>\206\242B>\315\211\202>bUQ\276\017\306\272\275\225!\253\274Pc\271\275(`=>q<\230>\264Z(\276\204\300\210\274<\0362\275\021\365\375=o\025\323\274\206\353{\275\221_^>\241\3312>:Y\317;\034b\326\275B\335\342\275\214B\235=?\345I\276\035g\370>\322\341\252=\253\2161\276W\322,;t8V>\367wG>\217\243\217\276/\276\315\276\241Z\211\276\324=\310\276\300?\220\276t\303\322=\024\204\336\276\026\256\211\276;\366\007\274\023]\210=}e\255\276\n\023\240\276X\222a>\215z\036\2766D\003>!\300%\277\357(\032\272\274\376\211=\323\274\347>\215mY>:\364\014<,\263\311>\021\270\375\276\301\327\310\276\330\265\t\277\242\236\256>\307m\220>\265\035\314\274\300E\223\276\272\324\270=\202\264\024>\311\257\004\276\220\363\022\276\004\260\347\277\244\345\312\275\0063\372\276Nv\206>\327\010\337\275\331\200\013=\330\330[;\343\265\374>\244\363\222\275x?\214\276\335y\376=4\311\357\276\217\312\356\275\267\324\347\276~T\272\276\032o\327\275\371\363\227?|(\265<\347\005\021=\316F\235>\234\246\035>T^\224=\354\313\266=\334\266?>\340\300\305;\020\325\226=J/O>|\010\226=\274\270i\277*\217\">\304m\024>\253\275\034\273I\034\343>g\310n?<_,\276\023\342\201?\315\353\261\276\262\247G\276\024\201?>e\324\206\275vjB=\3454?\276r\330\024\276\220Y%>\323\272\312\276\")\275>b\243\243>\360k\213\277\350t\342>#o\250>\236\200\343>\016l\321=\022\367\373<\370\032\r\276\263g_?\330\216\031\277 \303n\277\341\303\216\275kT\346\276\325\257\320\274\024\345\230\276\371l\371\275\217\203\211\276{\276\204=\032\203\021?\024M\202\277\234\022\211\276M\373\304\276-\022\345\275\216\263Q>VX\225\276gDH\276\251d\263=\266\3548>\252\277\255>R\2142>\377dC>\237\225\002>\260s\244=\321\225\322\2769\327R\276\014\243 ?\365\010\313=l\276\212\277\3136S\273\207\212\026\275\370\243f\276\3474\263\276\346k\241\276\034\244\351=\224\224\006>\212\254}\272\222\310\214>\347\264\007\276W\356\207>\234\332 \276\334w\005>\306o\204=t?\363>u\254T>\271(\314\276\244\027\264>\203:\371=\010\315_\275\346\220\335=\223K\215>\001\177=>R\n\212\276\210\013z>rn}\276`\336\323\275N\276p\276t\343A>\254s5\277\334{x\277:;q>9\376\364>\210\331\t\277FU\016?\216\367\245\276a\315\271>\264,\025>a\374\033\276\036~\202=\211\372\235>\212\277\223\275\030^9?\355*\"?\332\244\002\276mgk>\001\331\233>\240\343\n?b\240\220\275\025\271\247>\334\354\343\277[\021\347\276\244\025n\276\004PA\277D;\242\276\263\356`>\241\327_=\352\027%\300a\366\304>\212\333F\277\243\347`?\rL5\276\267\343)\277\316\222\206=\344\220\235=\317n\346\275\220T\031\276d\001\020=LZ\223=cz\026\276X\354D\275\304\204\006\276\221Qi<\272\004\226>g\347\330>-8\240>\'\371\016\277\322vV\277e\346,?q\020\273>S\314\222?]\210\267>\306W\277>$\312\346>\033h\373>G\014\352>\266\0041>\354\025\201>\367nR\276R<\371>\333\304\214?\343\233\032?\304y\331<\347\322\273=\216\001\336>>\026\216>!\344\215\277w\202\204=\334\320\352>\346\022>>\241\201 \277uvL>0\317\213>\010{\262<\220\220:\276\r\261\336>\033\223\336\276\024d\260\275=\304\002>\376J\326>\243\230\337\276g\026\024\277\0307\346>\322\377\241>b\351\363\276\303\301\352>1\033k\274\255y\306=\005\353\317\276\024T\232>\"A\246\275\320\352\273\276]\233\013\276\337\363\373\276.\346\347\275]\333\177>\360\2570\276d\035[\277\344\241d>\t\233\301>\305B\317\275Q\254\324\275(\301\337\276\234\"\225=\253\343\037\276\305\276\002>\372l\031>\264K\273>v\036\036>\005\370\371=\275=\222\277y\031\377\275\317\217_\277\201\241\021\277\343\307\237\276\337O\\>\261<\266>UAi<\357\210H\276\374m\335>Y\037}\276_f\022\276\355\315(\276\307\032Q\275\3773\302>\371\216\225\277\232s\335=M\201@=8\233l\277\233\252\007\276\327\000\351\276\306}%?\\\335\276\274\352w\253>\273\225\005>2\250<?\210\360#?L\336\350=\010\273\250>\343\177\377>w\273,>\364sr>|\253\234\2763\315\277\275\r\275;>}\203r;\323\251\366\275n>E\274\305\231\264>jz ?\353%\021=\014~\334>A\313&>x\203d>Y\334\270=\377\375\360?f\n\232\277\025\364\322\2763\275,\300F<Y\277[\247\010?\342\246\333\2762\275\t>a6\365\275 \026\316\274\2202\201=Z\240$>\314e\240=0l\310=\023\361\254\275\333\302W\276y\235t\274\3637\212\276\033\030\036?$\254\250\276y~i?\322.\211\276\033I\212>\240\374\374>V\255\372\275\301I\363\276\310\304\243>\003\'\265\275\003\027\312\275\261\017\273=\214P\235\2765\037D?\004\353\304>\301\020=>\226f\303\276\nd:\277\376\366\017\277&\214F\277b\020I\273Y\263{\277]TW\276M\322\013\300\274\001\362<\230\016\223>\272G\377\276t\231\020\276\262\246~>c\347\037>d\346;\276X\224o>X\006\353\275\r\005\001>V\257\256>\365\3510\276\262\366\213\276G\006\263\276\0130$\276\252\366\232<\001M\320>\327\314Z>\005c\367<\215\204\026>\361F\031\276\250R:\277\245A3=\302\242\032\276%\314\203>\032<\250=\241\030\006\277\3465*?\303\225\210?RG\177=\351#\252<\201\324\204>\304A\357>\324y\223>*V\241\276\373\323\264>\232M\242\274\0271,\2777]\027\277\004%\232\276\330i!?\264\261\026>J\322%\276\270X\033?\010\3218=\010\033\026>.\234\020>\303\260\003\276\225e.\275d\354W\276x^X\277\204\347R\275\236;[\276\350\244\256\276\337Y\026?8Q\032\276\373\363\375\277\'@\352<\225\224\353\276\014\361\370\276\365&\207\276\031^\262>\262\376\224?\335\346\361\276\200\325\343>E\327\221\277\324\231u\276\360\226\271\276\255\n\261\2762/\312\276@\364\234??q\354>\341u\241<\373~\201\276\372,W\275\364\372\270>_\320\231\275\354\311\220\275\376.\211>\317;[\277\266&*>b\030\t\275YJ\202\276|\311\246\276\372\265:>y\322\257\275\302\340\212\275l\301\275\277\247\354\t?\244\331\355\277d\312\203>\313$\021>\006]\313>@\207\254<\350\344\030>P#\367=@\223\276\273D\220?\276\004b/>\014\016\351\275,L:\275\246\3063\276\227\321\014>\213\232)>\227\244\023\274\342\225\322>\263\341\275\277HGE\276\002\264\013\277\267\274\030>\013\327\221\276o0\305>\007\031\254>\330S\276\2750\201{?e\000\230>\004\202\221=\247S->M\322d\276\302\354\177\276\325\037\303\276~R\352=\360\237\215>\243\320F>\033^\000\277\313\211\264>O\005O>\346\356S\275Vm\352\277q\257\214>\337\250X\275\225\3217\276\373\226\353\276\205\004??.{\243>\354{\225\275\033~\271\274\\\007\234>;\302\307>2\241{\275k\0205\277\203\226\366=%M\010?\217\206Z\275\243\346\364\276\350]3\274\336L\n\275\016\025\327\276\n\210\223\276\322\"\322>`x\303\276\034g\033>V\277\346>C\257\241\276\330\322\260=\300n\270=T)\010?\311|\346=\343Ag\276.\t\240\275\320(\277=#L\"?`\026\201>\376\243\001>\346\377\231>bN\007\276\310k\250\275\247\323\201?\001\312B\2756\252\033?\3370\221=\007\000\340>Tb\330>\207\030\207=$:\322\275{@\350=Z\257\213\275h\220\353\275r\256\243\277\221\304\213\276K\373\222>.lx>b\016\375=0\324><\210o\036\276\204N`\274H\277\261>k\210>?\002\340\377\276\302\203\272\276\r+\326>N7\236\275\356|\377>{\333t>\272a\213?\240\315\026\276n\024\330\274\331\034\025\277\341Nb>\245\006a>E2\001\277\023\252%>\274\336\370\276\241c\311<Kh<>\323\2530\274\023\002Q?\220\255~>\016.\003>\306\2007?5S\206\276\202\'%\276,\237\352<\352\360O=\273\325G@ u\223\276\026\333P?o\216\377\276\242hX?\210{\224?\333\315N?P\024\025>@\3367\276\n+\n>>&,>2\235\017>\350\021\345<\310\024s=\344\272\261=l8\224\276\006\315I>=\321^>A\034\235>\363\333\241\275+\332#\277\010\375\204>*\210\021@C\346*>=\356\322><\r(?p\346\271\271\256\375\304>,\221\251\275\343\016\250>\207\\,=\034\255\002>h\013\324=6\250(\275L=\237\277\030\253H>O\366\203=)_\"\275g\226\010\276\340\220\210\276]\277\272>\013\222\231\276\363\224\010\276\242%L\277l\213e\275F\360\324\2746o\220\274\272?\240\276\304\237P>&\023\"\276\345\277\033\274\306\311p\276+\022\231>Z>{>\374(\347>z\257}>\263\361|\2769\311T>\210|\036>\233C\025\276\005R\225>\325z\214\274\304\347\003>\036\2456=|\321\243>\364\370\213\274T\323\222\276\226\3519\276\222b\266\276\243\254\257\275\272.,\277\234\'\335=\226\037\217>\371\247h>\200\014\037=\2722\264\276u\236!\276\356G\335\275\3729\263\272\"jR>\371\000?>\251\274_\275\013\345\234>Q\"\251>g\001A>\223Q\224=5Q\220=\021\021i>\362\202\226=\202\006\356>P\262\003>\245\307N>\350X\251?h\260\251>I!\016>OmD?\263\032.\275A_\002?\270\251\365>]!\241\273\320k\':\004\017\266=\374\375Y\276M\230%\276\001\345\335>\325]\003\276\214\203\357>\r\310\347\276*^\210>Uj\304>d\236y>m\205\243>\367\346l\276\267\324\265>\0249\240>\373\354i@\232\213F\275>B\030?\"\005I>\017r\"\275\020\3647=\253\225&?\014b\022?@\2379>|K%?&\272\344=\257Y\373>n2\021=\240\022W\300\217\346\260>\235v\n\277?\316#\277I\202B>P\025\030\276\374A\275>h\262\010>Z\3155\276\320t^\274\374dJ\275h\006\266\275,\247F>s\t\374\275d\223B\275|\205F\277\022\326\234\275\270\006\235=\336\355=>\233?\007\276\n\177\031\276\306\244f\274W\327\311>\275\240f\276\327\232)\276kX\031?p\241\014\277\322aL\276O\275N=\213X\370>\3776\376\276\217\334\007?\272\363\363>P\353\210\276\273/\310>z\362s?\320C\227\277\224\310\353\275\004\205\323\275\214\355\036=L\025\032>l3\177\275\331\244\312?\252f\210\276h\376\236\275\271\316\213\276\032fh>\333\010.?\000\301l>\022\013\260<\320\362n\276k\013j>?s\r=~,\241>\337\324\244<m\002\205\276\354\357\231\275\006\203\025<\037\364\310\275\301\036\005>+\350`?\0107)\276\266\306\301\276SN5>\207g\203?\362\377\221>\242T\027\276\032\317\261>d\351\304\276\021\264\"?\005\361C\276w\024\032\276 \343\026\276\207\256\263=(\242m;\026\235\270\276]\374j>\205\201\016\2767p\353\274X\311\222?\332\2403\277\244O\007>&\370]\275\375\307|\275l\3371?>\244\215\276\334No;\232\306\226\276\343\023E>Ns\214<U\324\221\274\234\201\243=\333\307\375>\031\267c\277b/.\276\304zC?\344\\N\276jt\020?\217\035$?\241\203\016>]>\020\277\302P\302?\356r\263\276.7F>\364\026\243?\240\335B?\016\310\216?\232\024\334\277-\216\310\276\320\225\300\276D\025R?j\324\372\276\312\202\260\276D\027R>\332\226*\276\037\207\026\276\217\361\252\276w\236\254>\320\230\236\276{#\203<\361\360\352=M\363|\276B\362\257\275\365\346\256>\346d4\275\253\320A=\207=\247=W\331\033\276\322\210D\276g\005)?\263\037t?\341\377\"\277\235\314\342\275\230>\201?Y\304#?\024\224\005\276\340\025\337=4\024A\2766\255$\276\300&d=\300Vg\274@S\224=0\253}\275r\260\275\275\352\325\035>\363\366\036>0\307@\276\324\001b=\275\274T>\260\340\t=\267\206\017\277\326\022\211\276\2468\217>\210\304@\275k\177\332<~Y\004\276\273\025g=C1\202\276\255\030\230\276\233\251\261\275\"\276??l\243K?3G\353?\353=\210>\364\252\331\275\303:\274>1p\264\275p\036\222\277\027\213\204?F! ?\275M\016?\305\332Q?\002e\200>\230\267\225\276\300w!\275H\315\332\275O\242\265=\372\267\250\275\326Y\371\275.6\027\2767\246\272\2768x\023<\021\007\000\276\255\003\214=\273`\337=\357\330\307\276\375Y\217\276G\013\342\275\243\212\036>\253\243\026\275\217\3230\275\240P\314=\277\213\031? \300c\276\257\026r>\\\313t>H]U=\256\335\t?\026Tq\276\232\216\204>;_\327\275\230\265B=h\216\273>\231\301<?)H\221<\221nP?\020E$\275\334\374|<\357\357\236\274\034\360\274<3w\304>\211\204\324\276\342j\204=\222\243\362>*Q$>F*4=}*\321>\351\213\030>\231\"\303=\324\"\222<\337\274\277=\210\251\020>\017~\241\275\014\313\003?7\331\272\272\210\360\023\276\244\205\306\276\276#\363<1\006\005\277\027\215\341\276\246\233\"\276v\316\202>7\273\027@1P\257?\233\347\n\277\372\262e\277\223\330\307\277\007\346%\277\330\036\314\276&\312\n\276C\035\330>\214\324P?T\236\365>\316\027\376?\324\223\221>\312H3?\344l\000?\230\373\260=\005\251\335>%\360\227\277h\362\t?+\351j\276\301\310\254\2765\n\244\276\243\366\262>\340\362\270=\225t\221\300\262\372u\276\225\370\036\277BBb\277\033\022\336>j\215\013\276\0327W\276\030L\017\2768\273\177=\200\247\014;]\314\274\275\310>H=\013\356<\276,\223\335=\210qM>h\223\353>B\225;\276\375\212\005?p,\004=\005\260\210\276Y\310\022?\224\212\374>\276\332U=AN\">\372\264T\2763\016\025\275\271\221(>\336\335#>?\336f\276yvu\2768j9\276\024\277\317>\'Q\332>\223\332\311=\003:@\275\301\301\331\2756\241\231\277\337\005\216>\226\243\006>\372H\236>\326\253\257\275\000\342\200\276t\347\277\276\210J\000\277>\376\222>\006\024g:o\206z>DK\215>\215@\246\276\332\352\333\276\363\023\000\277\346E\314\276\217\340\363>\360\323t>o\340\320>W\036D\276\006\340\032?\232\212\366=\2237\242>\305z\300>\313G$\277R\025\252\276U\264\271\276y\213\262=\321\221\220\276\246ZN>\215K\357\272\364-r\276\3252H?\036\3706?\353k\004?H^\275>\267\310\217>\365j3\277\376\263v;:\304\207\276\004\030\277\276\357\241\375>fT\337\275\257B>>\246\022\216>\005\343U>\374.\355\276\005\217m>\004\270\017?\255l\320>\204m\263>\0312\371\274\261\232\347>\337\314.\276`T\201;\256<\020?\3267\305\276\305e\240\275\302\344\327=ZC\025=$\001\247\276P\272\307>\344\226\313??9\000?\027{\206>P\030}?\343\207\001>\006\350\221=\344l\226?\035\007\345>\0309\034\277\255\256K>P\201\316\275&\246\317\275\241\360\221\277\352]`\277\312\235*\277$w\203\276\327\025\037\276\362|\021>\016\233\324>e\022*=\317\344N>\271\344!\276\254\302\253>\020\251\240\276)\274\027\276N\316@\276\'%\254\274\347\307\003<\261\324\r=\343WL\276L\202\254\277\234\337\371>\320a\243?\232\227\026\277\231\361\343>\255\311}?w\213\211>@\243\216<\254\213\323=\241p5\276\022\253\315\275\330\324u=5\277\002\276\010P\216\275cOA\276\305\'\316<\304\303c<\273\027\255\275\325\0165>J\222\022>\207T\"\277\264)%\276\233\266\361?x\341\256\275\313\370\033\276e\260\254>\221g\030\276\323\021\242\276\331\274\301>\020\033\323>O\013\325=\310\326\020>\355\000&=\036\263\247=\363\342\223\277\201e\210\275\355h\311\276\347a\251\275\354lu\276rD\262>\0139\206>\022\005\255\276AA#\277=\300\330\276\276\251\205\276\324;\t=Q\254\241\276tv\240>\365\202\t\275\274\340\227><\202\201=\330\335\245>O@\304>\037Q\037>K\215^\275h\310\360\275+C\245=C\006\221>L\303\231\274?\266\327\274\034`\003=\204\235m=N\300)\276v\206\">#\341^=h;T>\327#A=\362\223C\276\330g\014\2755:\203\276\345~\215=s\236C>)F\341\272\233\314q=X\3265\275<ON\276\026D\211;q\337\241>(\206X\275}A`>%\313\010>I\036}=\201\214\206\276\210\274\222<hN\037=UC\324\276\306\266\247\275\333-\030>\242\213\200\276\201\211\211\276\2440\337=5\021\376\275\350/\013\276X>\351<w\".>\033\307?\273\260/\215\275_ \027>\2764a?\330\300G>U\243\007?J]\242>PJU>E,\360\275\353\333\220\276\033\336L\276\0071\003\277\2574~\275!-\026\277\005\'\227\276W\345\326\275\367\004\321\274\311\270\020\276;_\023\277wZ\375\276[\253\235\277\225\370\203\275\327.6\277\374\272\315\276n\2618\276\tL\227\276?\264&?@vO\276%/\032>3\212\221=\331|\034>hB\n\2779\313\353\2738\003@?\232+{>q\316\237>O{\247?\234\020\330\276c\243\201>?\320\207;@\3760\274X\324\265\2754\214\023\276@6P>\364**=\220i,\275\340t\324=\264\277\354\275G\027n?\003\001\243>I\024v\277|,\315=\253\264\"\275\016\rg\277F\204\316\276\016\301}\275\272fo?=B*?@\0267\277x[D<\235\334\271=`m%\275\340SW>\275\330\377\275\376\000\305\276\222:R\276#\217\023>e\034\210>]\034\304>#2\351=\267z\225>e\340\256>\017\240\004\277\025\022\001>\235\316\200?\314\342/\277Y\232\256\275\235^A=k\303\316\276\331\271\230\276l\024\032=U\022\325\276%\252(?\241\266\207>\233+\030\277\250\362\005?v\251E?M\342\377>:\007\344\276\335e\230=x\003\202?\273T\016\276\244\314\001\277\317I;?\026\002\255=\307\275t=R\266\243>\'\266\346>\307DI\276ID\263\274Vh\001\276\245\210\201>)\360\222>\270PY\277Z\2755\276\250\275\210=8\344\234\274p\032\265=\017%\206=\323*\237=s\345\025\276s\267P=j\022\025?L\201\007>\302\004\366\276c2\252\276\302$\206>o\002\312\276\307\332\213>H;\314>\243\371\027?\361\251_>\344\321d\277\307P\007\276@\'\035\275\266\232\245>=\364_>N\303.=n\036@?\265\326\335\276J\235L\276\026\n\334\276\325\220\202=;L\256\277\325\265\370\275\302\236\"\277\336\330S\276\241\237\177?A3\025?\316Kc?\300$L\277\215\327\250\275\272\241h>\031G@?\374\212\232=\231\327g\276B\032u\275\250*A\276w\020\017\277y%\312<\t\000\316\275Fk\343\274)\356\000>\366\274\326=@\362\217\276\212\244\216\276\344\203\252\275L\305\006\277\260n\037\276#%\235\276\304\237B\275\277\205R\276L\340\206>\326\343K?\301\026B?\253\377\342>UM\277\276\361\0324>4\013*\275\234\321\370=P\230!>\022\021H>\002\323+\276K\260\342\275\344\233\234=\"\275\034>\273\227i\276\014\024\017?BQ ?*\314\201>\222\220\344>\352\025\033\277?\303\271>\233\262\220?\227\300g\277{\221<?M\354??u\266\204\276\325\004\037?^t8=\357A$>\352\365\356\273B\300\223\274\036m0?\247;\235\276q\'\342>\030\366\304>\024\2779?W5U\276\266\376O\277\240\322\340\275\242\213\227?\265\344\014\277\363d\n\277@.\032?q3r=\377\376\207>\002~\255\274$n\"\277\366\221\246> \351\266\276\272\302\003\276\233!\336\276\0164\206\276?r\370>\211\242\356>\336CD?Z\t\226\276\313FQ\276f\312\021\277\224r[\276\227\322\303\276]\001\200\276\023\2711\275#\231\254<\210\365\357>\334Xj<m\326\316>y\372\324\275\320S\'\2778\344->\235\031\212\276\313-\201>\211VY\276\306\221\177>4\014\221<\230\346g?\033k\226>\017\307g\275\244\335y>.\200\000\276\000\214j?\201=\224>\366:\311\276g\227\025\276\211\311\325\275\377{\371\275\255\034:>j>W\276@\346\216>(_,<\353S\375\275\357\342\322=[\274R\277\0378\201\274c\301;\276\004\244h>\2133\322>\034\321V\276\005W\013\276\207\362\026>go\224\276\351\230\332>gK\266>\030\264G=\340\220(?\247\361\231\276\276\375E?s\356\253\275\213-y?\263\212\005=\342s\254\274\324\250\371\276\"\\\023\277V\333\023?U\267\344=\344B(\277u \030?\364\027 ?%\310=>\373\235\323=\240\341\372<\205\225`\277\211X+\276\242\305\373\276\334o\017\276,\375\031>\246D\332>\202\210\205\275\344=\264\276\357\362\232\276\253_\263>\221\3472>\352\335\004?\014\256\231>\223\206`\276\270;\355\274\023\006\344\275T,E>@\347&<\210\0270\276)Q!\276\000\277\361:H\235\004>\374\377Z\277S\233E?\206e\264\273:\2561?\035\367\370<\247`\236>X\221;\274\242R\232=\267\210\027>\337T\013?\303t\206\276\255n\274<[\362\"? \022\257>(\366\305<\245\300+?\271\2421>L\037\261>k\337I>\025/\340>\346\243\351<\177_f>\241\261\337=\013\253\311\276\\\271Z\277\034)\235=\\\025\035\277\275?\277?]\251\262\276\212\236->\323\352A?\034;\314>\24164?\270\340\355\2751R\237>)\232|>TSs>s8y>\t\364\260\276/\274\352\276^d\024?\177$\030?\223%\277\274\201\313\034>T$\n\276y\002\350=d\2163\276\347k\210=\253\347\003=\342\247\351<\243NF\275y9\240\276\372J\333=\212i\r\276\367\377\365\276\213\220/\277O\320W>t\325`>\267\267l\272\320{\245\275\020\036\342\2763\t@\277\212\'5\277d9\002>g9\203\276\207q\245>@^\333>Iq\357\275\"\276v?\326\332\227>\361[L>Hs\360>\253Zv\276\211\324\023>!\311\207\277(\352\037?\347\346&?\257\010\344\276\367\201\257>N\210\357>V\326v:\007\246\014=\273D\024?\230j\333>\252\213\217?\251\354\001>\014\205\034\277\375>\270>(\371\006\277\311.\240?\026\243\014\277NQ\335>\013\302\207\275\301\026\254?\004L\033?uj\233?\010p\002\277Q\337\255>\371\331\216>c\234K\276\367/c\276\204\347\277>\003\317d\277\'\372\245\276\366\013\025\276\356p\026>\300\t\345\274\035\277\270=\037\035x<\215\376\310\276\356\307\275\276\000~\203\277\332\313\005=\212Q\340=N_\360?K\264\032\277\350\315~?\331c\010\276;\257\341>\031\303m\277\367{\352\275\363\335M\276\002\354\315\275\003\372\252\275\2403\207=\250px=4\222\034>\270*\221=}\007\'?\033\326\307=\244.\266=v\341\267>\013N\364>\270\225\234>{t$>\260\3101\277\337\"\247\276I\267\"\277\026\340\215\274\000\321/>\020K\255>>\342\017\276\027\010\243>eV\351\275?\001]\275\027Y\210\276YKc>\220\374\214?\264\276Q=\035\227\026?\203/E\275\217\016\263>\026\223\357>jE\265\276\277\013\351>\022\267i?\250x\214?|G\262>&\246\332>\233\373;?\005\320\201>\030\377\306\2754\034T\274fh\022>~O\005\275\206\325\205>\205<\310>\274\266\r>\314\316\010\276a\n\037>\204\304\321\275\257\244\224<\300\025X>dT~\276.\311~>\215[\257>/\007\230\276F\223\206\275\325V\245>!\013l>\266\222\252>:\335T>\021\032\335>{y\035?\242mp\276\333#$> \026g>\023\320\326>\261V\221>(\200%?r\312\203>\344\242)\276\332\312\'\276\300k\217\275\t1\340<\250Vg=\250\264\225\276\033\276\276\275\327\344\220>\2333\255\275\236\277\242>x/\312\276\314:(\273\274\235I>\212\261\200=\3427A\277\227\215\205>\325y\341>\376G\206\276W\021\007=\216~3\277\245\352\237>\364>\014>\226\367\023?;\231s\275\002\232}>\367\243\374>x\325\352\276\247s\204\275d\345r\276\222\3664?6\250\305>\311\352\336\275\223\024\303\276\0135n\273\240\227\223<\336\000e\2769Wl\273\001 \277\277\001\\\001\276Q)\273\276\310\006\275>\372rA\276/n\360\273kt&?R\300\034?`a<;Iw\376=t;\017><g$\276\016m\201\276G\020\347\276)Q\327\275\001\372:\276\002\3520?\311\346z>\236DN>\230\367\302>\372+6>T\327@\2750DP<\374y\273=\302\020\"\276\nbB>xNF\2760\355\022=\026,\327=\324\025 >T\215\355\276\312\377\327\276\001\271X\276\230\216L?\230\250\307=\022\207X\277v\242\275>\227\227\211>6\2443\277r\223\024\276\237\240h\275=\2441\276\nn\253\276\007A\353>\t|#<\177\234\356>x\202\223<\364\346p\276\351\356P\276|V\324>\214\242&\276\326\2049\276\254\323\345>\2257\247=\303\327\264\276\264\372\341\277\212\340\n?\264\316\037\277\206)\035\276\312\227\310\276Q\310\370>\020.\220=\020Up>_\204\346=>\274(>ci:\275s\000\000>H53\276\032W;>\036\342F\275\263e\320>(\356\330>\215\005\250=\272`\t?\341\336J>kfV>:\237}<\2479\242>\204\026\360>2\323 ?G}\270\276\363\367\261=D\265\243>\2178\255>\"\245\343=\033\374\366\276\216\214\240\276\037=^\276\262\210h?*\274h\276#\250}=\001\365\375>\005JT?\244u-?\373\231U\276\0376\244\276\3263\031>\032\226\334>R\222\203\277\021\\m\276,C\233>\331\244>?\0229\\>D>\222>J\2375?^f\372?X\362\002\276\363D\215<n\242~?^T\266>c:\023@\023\331y?\211\312\216>\272))\277@j\224\276w\213\030?L\364B\277\337\213\364?\335p\217>d\255\247?\034\253h=\214\3212?/e\023\277&\367\340>o\322t?\204\340\030\277\335\177#?03\021\275q\306\013?u\377\355>\211\306\327>\3546\355\275x\331\031\276\024\261f\276G\305\311;\330\323,\277\370\231\030\276\262\260\203?\344\262\014?\373\200\030>&\003\370=58:\301\315Ak?\241@\010?s\322\005?\356\233f\277\016\275\251\276\023\350\002?P\007q\275\303\3325\276\340\321\232<@\241\036;\246%\001>\260\376u=\036<\'>\260\314|="
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\362\352(?\332cI=\374\030\341;\342\260\265>\366\031\026?\235[\251>,\344\205=Kx_\276\210h\225\275L1\340\276t\302\260<M\256\275=\005ig>f\341\346\275K\351\273>p\314h\275\256\262\014\276\005IV\276\235\243\335=\017\020\243?\030_5\274\025\235\n?\237S3>\365\205\347>\013\263\343>\205\225\033\277\336f\331>S\r\350>\3249q?\310{Q>\263\030\331>\0179\366>\2570(>\216\026\335=\006<\002>\253\2362>\351\261\240>\356IW>|7\243>\033\207C>%\003{=\272\362?\275\367\2239>\252+\006=\0078\032>+\016t\276\317\rT>\237\252\312>0!\213\275\221l\223\276\271\260\004?\206:\237>\243\253\303>\335UC>\342\274\303>\316\235Y?\323\254\270\275\020\311\304<(\233\201=\224u\271>a\323\205>Z\271G?\316\341\030>\371\217\247\275\314\032\203\275\002\367\335\275T6\024>\257\031j>\262\273\245\275\003\330\337\275\371\344V>\016\353*\276\001m\341>\037}F\276\222\362O=\\\002\260=q&P>\306\232\031\2776\270b>\340;\200>\035\3001\276Q\357\214>>\350\013\277B\237\274>\257:\205>\260>\000?\362\271\213=\316:\343>`{\264>D\022a\277C\334\204\275\275_\314\276\276\344*?\020:\325>\327+\256=I\307A\276\351\312\027>\'\366\207>X\351\332\275\202\266\261<\327\347\245\277A{a=\'\275\247\275HX\266>l\245j\274\037\332\320\275l[\007?\004\231\r?sCr=\364\211\236=\027\366\226=\263X\206=\324\321\026\275\362B\361\276wBZ\276\232N.=/\327F?\233\304\212>\036\031N>ra\335>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "]\265\224\276\226\273\226\276K\020S>\000$\214>:\362\327\276\215\267\302=\347\177\375>\214\004<>\341\274\270<\36765\277\356{\024\272^/\243=t\347\t\275\030\'\313>|d\021?u\205\316\276\227u\271>\000!\032\276\006\200\022?\014\210U=\311\034{?2Pe>#~\357>\037t\371>\235D<\277\245\256~\274\"\003\237>s\310\204>Q\352\201>\304\370$?\r\351V>H?\002>=\377\246=D\244\305\273\302\220,?\217\324\310>\n\247X\276\377TV?\0364\276>\320CU>\034\211=>&f\212>UZ\221?;\267\313>zD\277=\355$\203\275\036\301\372>G\341\337<\243\244-?\000\234\335\276k\250\n?V+\273\275\233\361\275\275D\226d\276y\262\333=\376z\371>\265>\356>\303\022y>\210\307\202\276\205-6>_{\243\276G\373q>\337}G\276\301X\343\276\000w\002>{\204\005\276$\312\242=\246|\021>\177\217\234>\024\240\306=\nI\022\274.\224\372=e\227\361=Sc\226\276}p\267>\234\332\262>\004v\356=\337\030\346\274\323A_>\250\217_\276R:\010\277Y^\373>Gd\303<\355x\316=\377\302<?\333\213\257>(}K>~\272\205\275%~\034\276\334U\347=\342\263\262>\211\246\272=\"\206\242=\006\323\230>\342Rb\276k\324\203\271w\253\031>\'g\221>~\177\014\276\215\017\013>pj\313>\244\243\262\275\017\351\224>Q\233\353=\326\337e=2\261\330=\314?/>\323\331\207>\270$\345>R[,\276_:D\275iZ\010?uI^\276\222v\021=\354V#\277#\372u\275\350\375\034?tx&>6\242\215>\206\274m>\023\320G\276\3748\253\276\305~\005>Izu\276@\251c>\271\263A\277k\202o>J;\035\276 \273\034>\t\263\227>Q\277\313<U\024\311\276uA\273>\007\306\034\275\nw\225=\237\271\271>==\345<\315\312m>\277>n>Q\264\023=\220dB>\270\377\243>\020\366a\275\327T\374=\342I\003?\002n\252=\274}B\276\304}\217\276\016T\320\276\265j1\277\243v\273\276\005\265\"\276\341\324 ?b\363\n>\013\017R>\347\341\006\277\243\206\037\277\300P$\276A\026d>\032D&\276#\004!\276\035j\333<E\212\215<\265\005h\276\2634\214>\246z\211>\367\261\273\275\240\003\210>\006\177\023>\026C8\275Y\267\351\276\373\306\337<\313\n\266\275\212\374\221=\244\263\030\275A*c=\027M\005>N\351\267>\312b%>\243\254U>\253\374\024>\334\265\216\275\217\300d\2744\354S\275\031\202\266\275\363\376N\276,\031\324=B\364\222>\263\2608\277Z\003\224>\252J1\276\370\010\331>[t~>X\270\345=fuE>\020\024\'?\210\2137\276\214\370\350>\254\031;\276[\352\266>e/I\276\214q0?ZA=>.\251\224>H\375\312\275\350\241\001?\227I\275=\001T\t\274|\320<=\345\351|=\004\326\321\276\312\216\234>2\345\304\274\343\343]?\026H\272=\007\231\254=m\310\343=\277\240\303>No\017?\3165\251\276D%\r\277`iT>\370\200\226>>\315\014?\333\263\275>gH\322\276\243\236>>\235\352\021?[\274\027\277\237\026\271>\203-\020\277{\343\242=U\237\273>o\010:>\317\302\317>\322\213\014\274S\245\\>k\3117>\372/\224>eW\032\273/(\326\276\343o\317=P]\022?\023Yn\277p\325b\277\226\342\306=`pW\276\241\311\260\275\366\244V?\220\331\365>\335}\201\276\317\n\233=\271T\333>\302t)?\200R\006\277\177g^\277\252\007\254<\314r\355=\"p\366;p#s>\257\002\223\276\"h\005?\017\221\273>\201jw>s\035u>\2323\222<\\lK>\203d\235\276!\337&\276e\300\203>$N\344>\301\312\300>\210\3519>\252\312R>O\273\323>\243O\375>\037\332m>\352\005\026\276\2713\306>jx\013?\227\236\204>\001\014\037\275(\257\245>3\343(\275\316! >\355\335\005\276.\304&\276\332c\243>\316\326\356\273_\311+=e\354\005>l\325*>\234\254\344\273\202\223\245<\345\3634>_\236\006>\026\260\337\276f^\377\2766\321\323>\224\2028>\253\314\232>\310\216\007\276J\376\351>\224\270\203?\201\210D>\347\330\266\275\n\r\000?\317\360\013>Nl\232\276{\335\265>y\014v>Sh\r>\375\010\340<\217\234v?\243\266\345>q\222\277\274y\001A\277\031)>>\325t\243\274\016\336\010\275}\375\250>\361\263->\205\313C\2770\255\314>\343\234\\\276\000\022\201\2772\030\242\276\313\254?\275\221\276Y\276&KZ=e\263`>\266\354\020?dS\300\273\266\200f>\302\014\234\275\265gc>\350\235\330\276\314\345\243>\365`#\276C\222\370<\302\245\255\275_\245\003?\216\301\227=\306=\336>p\303\211>\347J\260\274\337s\226\276h\017\r?*\347\020\277b\262\022\275c\022\026\276\246\261\364>\236\014\017>%\217\240\273\256a\000?\342\362\314>\037\306\255\276\022\004\334=s\247\035?\251\362\331>\311\366\235>\0177\t\276\'\241g>`\271}>Cs\207=\242\017+\276)1\203>\247NS>\341\262\230>\311\210\217=_Z\226>\221+\365>\376\311\213>\250\337\'>\rZk>9j\204\276TL\232\275\207v\233\2762^\274>[\201>\277/\036\366\276\004\264\000>\371\251Q>\034\325\374\275\332\256\321>\263\nX=\307x\363\276-W\211\276\332]\364<%\217\324>`\241\362=HXI>\372\303\334>\340\034\217>\375K\304>\003\336\226=\237\266\217>\265&\353\275\300\365^=\205\002\025\275\034M\021>\027\351 \277@e\241>R\361\214>\001\327\237>\307\325\301>\266\001U>\275\251[<\367\347\n\277]\200\216>\001\327\256\276\332\250%\275P\210{\276\2175\272\272\316\006x>ucV\275\'\014\233\275Y\024|>\320\220\205<\220\006\220\276\024\033\274\275\201G0\276\\\347\354< x\220\274\206G\215=\246\242\r\275\357\243W\276\306\247\211>\372\211+>\207gv\276F\346\277\275&o\001\275\207\025\205>6uC>\340\033\362>\261\\\206=\320}H\276\236\013\275\276^\262\270\276\215q\265>XC\006=\340\2234>\221\236}\276=g\n>IZ\365>\330\n\336=q\004\035=\304\005\214\276r%]>\207\266\322>\365\2634=\225\005\251>F\255\202<\355w\301>T\224\220=\2312\036>\214\312L>6\327\005>q\256\177>O.\000>\023\007\006?b\214\272<\016K\375\275\234J)\276\024\201\342\275k\273\014\276\213\205\331=h\3536\275y\027\205>\255T\206>R\367\350\276\272\177\224\275\324\335J>\237\351\256< \300\343\276\327/\311>\352\233\213>\237X\372>\277\366y\275%`\333\276D\n\346<~I\210=\213O*\276i\351\270\276miP\276\317Y\014\277\252\335\331>\374\246|\276\025\306+?\320\\\213\276_\025\030\276Z\267\201\277o\361\202\276\2449\222>\267\244\246>\364\221@\276.\305\321>&\230o>\004\231\212\276\345\341|=1\244J\276\345L\030?\322-\373>\211\372@>\213\217\345>X_\026?\336\\\263>\341\215\210\277\310\001-\276\\\366\303>\023g\327= A`=\331\267\357<\273\204\222\276\016:<>7z\360\276\230\014\232>\351O\227>%\024\210=\310\017\277\276K/\026>B\255\254\276I\244\342=be\027>z\231\271=\303\232R>\3406\304\275\347&\260>2\370\232=L\035\221>\346d\000>\253\006\231=mX_\276\024!\361\275B\346\204\277D\273\247>\223\0247=\360\315\360=Z\024\237>\017\305\004?t\005n>\'\004#<\342\352\035\277\322\256\227>\323\370>>u\216\002>\253\327\206\274\375\231\033>\203\032L\276\014<d\276}W\237>\334\016\242\276\364\005\214\276\000<^>\327\031\n>J0\312=\335\333\300\276\027\304\327=]\316\331\2759h\362>/\237\275>\3245\253\275A\336\272\275}Y\236=\251k\350=rF\343;X\236\016\276v\014W\277\310y&=\226\014t=\004\244\010\276\353\352f\274{dl>`\361\213>\220\016\340>\177\n\220>"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\347\300\032>\345nx\276}\250\206\275\010+\000=S\376\251\275\370Y\321<\247\223P\276gA\013\273"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: ";\255\343\276\346\201\371=P\331\375\276\2225n>\365\033\222\276\334\260[=\330j\275\275\024\243^>\224\314\334\276\270e\341\276l%\345\276\213\245\320\276\220n\214=\240\317\027>\342\256\014>\305\332-?\243Vb\274u\213\243>\240<\240\274\361\302w\276\357\323\216\275E\000\024\277&\224\343>5L/?\244\317\210\273.Q\205>\023\336\035\276=\025\367\275\305\276\240\276\357\250\236>\n@\010\277\000\020:?\232\325\025>\020u\347\274,\360\336\275\370\217M=\264\274\r\277V\357Z\276\274\220\374\275\225f%?\214\343A\276R\315\254=\306\256+\276\233\246\341\276\312N\001>\301>\275\276\256q\330\276\227n\300>|\273\203\276\014\217\027\277\240\213A>\030\030)\274\373#\003\275\364P\001\276\311\363\257\276\331\033\347\275\204\032\317\274PC\263\274\321\272\037\277>5\235\276\242H\240\275u\263n\2761x\377\275\227\0004?\274\312\266\276\362\205%\276\225\220\030\276\234\301_\276\306&?>?\300o\275\242@\">\002\373\273>"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.20959855616092682
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
