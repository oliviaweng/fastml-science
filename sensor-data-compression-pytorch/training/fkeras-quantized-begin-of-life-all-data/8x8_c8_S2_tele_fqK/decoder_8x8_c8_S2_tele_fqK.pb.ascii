node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\206\334\242>\356\235\003?f\364\346=\363\347c@\317\315\010?\3736\251@\345\336\036>\232\267\203=v\021\220?\ny?\276V8\010>\371\022\006>\300\214a?\333\312\001\275\025\0013\275\257*\n=E\025\250>\334\267/?k\342\202\275\360\375,\276\375\0320>\035]I>1P\004\276\270\222\216?[%\262\276\212\006e\276v\345Q>\274-R>\364eq\277\007\006\376=\3000\304\277\006\276\247\274YH\025\275\243YV\274\377\212a\276\231#U\275`\374\310\276{\210f>\000\013\351;\341v\315\276\202\235\177\276T\267\360>%V\200=\355\301\375\274\330i.\276\216\210\245\276\354Wp\276su,?v\206\303=\005+ \276\350)+=\021\320\210\276\251\025\211=a\301\336\275>\023\335>\234\361\033\276(\260\231\276\004\326\204\276c\003f\276\017A\001\277\337=\r>nV\236\275u\3625\276\360\263T>\025U\240=X\340@=\212\371\251\275\005\370\t>Hi\303\276\026\240l\274\336\215\210\276\'a1\276\274\341/>\235ke>bK*><\252\201=\223\362y\276;\242q=\rc\007\277\321QD=p~\220\276bv\226?\205\221\274\276\241b\003\276/4\377>\355\2618\276\037\212J?E(\242?\212\254^\275\344\005i\276\244\313\003\275,\025\013>\336\274<\276\201~T\277\256\357\202>\\Ev\276`]`?XQ\214?\273\016\352\2760k\254>\346\033\206=\270\346:\275\355\234\267;E]\005?\0236\360?\332\006a<)E\305\275\342\210\356>l\215\307>\260k\034<\241m\013>\034(\316\276\\\3335>\256\303K\275\231\222\336\276\227BS?\3129b>\r\n\214\274\276\\e?\004\312\373?\200\300\236:8\222\306= \274\371=v\2418>\340\335B\276F\341!>8\023\223<P\007\213=xB&=\243$\315\276\"t\004\276\235\232\023\300\"\332G\275\243/^\300\321\306\026=~\207a=\353\253M?\302\344\375=\275\213Z>\215>\377\275\237\365a\276\271\001U\276\003\004:?\377\2102\276\031\255\232\276\221\307\004?T\230]\276u\3542>\205\214_>\346b)>\035\275\002?@\213\355>8\355[=\242\004\221>6\367\314>=\223\213>D\237\260\276\335\210\231>|4\250?\274\372\032?\213\030\313>W\024\213?\342\332\033>IV\024>\202\245\336\276\313\177R\276\037\235p>3L@>P\307\335=\351\347\351\276\265~\311=C\261\212<\250\036\017>G\261,:\374\030\241>\356\253\205\276\353\251\006\276\256F \276\333<\241=P\030m\2774RH=\225v\221>\"H\264>\366\247\213>\354\265?>\262\005b\277\203\307;\277 \364\347\276n\263\310\276\310i\036\277\362\347\266\275)\323\004\277\026I\347>\2120W>\210y\t?\024\323^\275<\025\026\277\336\344\346\276\223\225\376\27568\346=VEs>\301s\361=O\310\245>\036\010B\277\004-v\275\231\342\216\276\247\206\336\276\276\033w\276\366\304r\275\232s\\\277(\0140?{3\275\276\030\026K\276\004\255\220;\204\224\252>_\225\315\276\336NI\275\021\303\370\276\322\360\325\276\'\364\267>\177x\215\275 \003\005\276\303|\267>\344P\230\276\245\327\262?\357\270J?\204\251j\276\232\245\247\275\266\007R\276,M\347\276\364\272a>p\3576?\352a\016@N\305\331?\2759\014>B\364>?\363\3032?\037\267\337=KT\010>\376[L\276\226W\016>A\271\325\275\371\000\201>\373\237\316?2\353\200>\346\r\020?\335QW?\212\214\222@\000\206w\275\270z\317=\340&\371<\214\311\201=\204\366\017\275\260\254-<\306\037\007\2768f\252=\215\222\022?\243\"b\276`\242y>\357\211.\277\241\224\251>\337D\022\300\337\'~\276\\\307F>E\374\347<\202\237N\276\271\250.\276HX$\277f\260\303\276\365\314\202\276\334n\r?\004\246\001?\3728\232?z\321\305\276\213X\357:\243$\347\276\225G\247\276\261\310\257?\026q\244\276\304\224O?\337\302P\277\016PD\277\210$\013\276\306\335\307\275(C5\277]B\252>\245\3353\277\226}e\276\r-\r\277X\370g\277\235\356\220>F\346\244>\303\303\212\277a\214\257>\310\243\203>\006\255\023>\224i\243={\331\233\274\272\270^\277\360jK\277\246#\207\2767\332\220\277\322\205\275>>^\222>\001\2552\276\213\344\250>0\201\227>\216\273\205?\242\211f?\206\034\022\277J\356e>\033\274\364\275#q\002\276\215\272\255\275q@\237\2765\217\001=N\217?>\226\005\351\275\000\236\r\276\346N\225>i\271\353>?\307l?q\260\014>#\207U>_\362:\277\267M#?r\212\312\274\316i\371\276\004\242?\275\032&$?\020<M?`\260\213>!\331\230<p-\315>\025\376x\275}\010:?k\237\002\277\007h\245?\034\331\003\277\351d\320>pMn?\260\311\004?QH\201=\321X\324\300W\2406\276\034=\334\277g6P\276\240\267\'=\225\2063\274\350\362t\275) \275\300\3563\271\275\316\271\220\276\345\222\342>\235\325\200\276\023\250\031?\016IJ\276a,\316>\214s\204>\315>\221\275bW\333\276\037\253R\277W}\301\275N#\254>i\n#\277\244\217\317\276\306\2246\276LR\222\275\3531\t?\372r\236\274z\335=\277\003\276\320\276\037\374\372\275,\235\223?\241\r\026\277\251\2040\300\304\246/\276G_\244\275C\245\005\276&+\033>\362%\233\275\205\240C\276\340\243R=019\276y\245)\274\255=p\276\347=L>\230\345\364\276\375\021\220=\307\242\245\277c\375\307\275\302\'U>\336\006\277\275\331\016\356=\273R\350\275=\245\005>\022G\324=\307!\017?I\310\002\276\002\361\276>\250\023\316>6\016`>`\010\327>\312\203\010>6\301\\\276-?\307>\014v\340\276o\356\327\275vIa>\336\225\240\275\013\315\224>\203E\026>\263\350\255>R\277\356==\274\021\277C\2524>\205\207\335\275\303\005}=\014F\201>\225d\013>\232J\331>\nd9\275\314\0372\276\025\020\376=Y\331\355=\247\257\211>7\335\036\276&\350\302>$\214Y=S4\036>{\026\215>\334\270\275\275\217I\353=\223\236N>\260\010\033>\354\331\273>\333=-\275u1\240>\264\270n<\337j\313>~O\r>\267\231\001? \364?\276\355#\266?\313\202\320\275P\240\021?\375\244p\276\214\365\220>\251Q\214\275,2\352<\252\257\305\275-\021\256>\001\361#?\223UU\274\231L\177\275l4\361=\204\217Q>2\003\332><\250\330\276i\000\334>\036v\320\275gaO\276K\033\362>tV_\275\337E\351\274\334\\7?K\365\241\276\336\001\365\275\177\253\020>9\010\217>_\177w>`\264\253\274\206`\304\275\262\361\212>\3124\307>I\335\016=\301\270\313;\230\006a=Zx\200\276iF\321\274\253\244\253>\344r\346\275\264\331\321>\224%\234\275\357\323\013\275D\272\234>\274\320r\275\224j\314>\0211\322>M\313\362=\334\257\312=b;\362\276g\364\341\274\031?Z>\317|F\276F\223\246>\026B\310\276\303O\016\276\177\341\214=Y\337L>\001\275\214\275fH\222?\032\271\276\276\210{\303?`\351O<H\317N=\0004\215\271\020\023\201=\210\010\013>\2147\244=R\302\003>\210\347\222\274V\273t>\351\351\016=\322\233\246>4\377\314\276\322\202\020>\301\274\224\277u\272y\276X\235V>un\030>\"w`>\031\n?=\216\366\200\274\014H\037>\235j\361>\033\376\020>0b\313>\323W\035?^Q#\2761<\021>8\034\231>\217Ry\274\335c\366>C\"%\277?\321\232=\2064\013>S#Z\274\232<z>\177\333\003>\203[(>\206\026_>\303\363%\277JA\307=\337:\221\275G\3461\274\t\314=\275\302\365\357>4\2720?\202r;\276V\004\341\275.8\023>\312\233*>$\206:>\202\367\032\275\344\227\250>\024\355C>\325G\n\275\322\035p==T->P0^>\231j0>\230(\334<\266\231\252>\345\275\233<7\020\357\272W\377\223\276Ev\270>\032\033\005?\213\231U>/\346\203\276\271\255\315?V\024y<\320\013E?/Oz=\202\347\235>d\340\342;H\322\024\275q@X=e\027\256>\203\236\020?\225I\034\273\'\177\222\275\252\'a>j\362\244>>\345\255>\360\362O\276\223\351\302>\343A\246\276\245z\205\274M\037#>\205\336\215=\307-\334=\376\366\021?\315B3\276\360\232\346\274\252!\215>\004\2207>\325fz>\375\235\022>4,%\2764K\203>\314\270\321>\223$->\354T\036\276\255\235+>\364`\343\276\2076\265\275T\321\014>o\371\232\276\264Z\"?`\025L>{\202\224\275/^\177=\340\217\254\276\256\320\254>]\r\001?\033\245\245=\'\023\242>\025\026(\277\275\361\026\276)\nW>\352\n3\276\330\307\230>\020\321\370\276\271\017F\276\353\354[>gl\204>Wm\237=Z\031\203?X\006\352\275\002\354\300?\372\227\025>\263\217J\276\200j\314=P\215\240<\362\214\023>\250\021\325\274\034\201\023>\323\327\262\275\027\222\313?\251h\t?\177\252\001>\234\275\365\275\343\005\256\277\3373f>\333\216b\276\360\223\377>R\014\252\274\302\306p\276\232\373\'\277\204\2104=1@\242?Z\376\347\276\270\0007>\361\366\254?E{\021?F\374\372>\325;*>\331\020\323\275\326\031x\276\304\323\276=69\213\275\216\247\324>u;\023>\334\3673?9\020\201\275\210\266\352\276\021\265\245\2761\331\302<\177e+\277\026\264P=N\0212?\340\225s?\023\267\010\276{\224\312\275k\024\010\277\3543\024;M\346\304>\375\220\035?\t\257\307\276\017+\002\275\356\r\350>\366\365[\273\034\207O?\213h\230\277\0103\313>\327`\036>\220C\267\276\263\324J?!\013)\276\203\313I>\340\033\254>\377\337\330\274e\361\013\277\002a\t?\267\315\020\276w\200\243\276.\270.>\270\340\347>\340\305\264\276\265%\022\277\007N\307=\264\001\212\276R\026`?\032\347\241?/t\216?\310\222\006\277\213:E\277\351\233\032>\302(\305\275O\005\230>_\\\223=\316u<?\346t-=\014\241\215\275G\024\237>\257\354\330>\200\3151?\007\213\304>Nwq<5M\341>\350\232j?\245z\234\275t\366\357>B\034@?O\361\204\276|\217\036\300+\3612>hk\301=T\344\241>\\\345\022?\346D$>x\254\010?\234\203\240>\371\374\371\276\237\322\276\275[\267\037\276\256|\014\276\233\306\224>W\365L\276j\243\376>\254\357\321>\371\\\220\276\200\362\217\277V[\312>\026\314(\275d\365\251>\305\264\254\276\262\005\321\276\227T\013\276`c\"\276i=\315=\220B\206=\225Q\033\277\027\025\215>^\227 ?+;\261?*\310\210\277\000.>\300\000\273\327<\270\336\017>\002T)>\274g\261\275\n\024=>es\351\275p\345(>\320U\344\274\003yH>\210\217\">\261\2631>B,\031@\353\350s>\271\000i@8\366%\275bM\201>J\233\352>\332i\247\276\342\332\202=\204\365\222>\277\357\333>\342\323\215\276A\010\025>\000\2204?\254)\025>9\275A=B&:\277^\216S\276O\351\211=\316\037Z\276C5\373=\320I/?\315\003\256\276\304\376\353\275\264B\246<\373~\252\2768\224\371\276\231N\270\275}[\307\277i*\306\275C\333\274\275\320\324\361<\247d\274\276\342I\316\275o2!>\n\255d=\000=\300\2764\305\304\275T\036\005\276\234\345\257>Q\227I>\334D8>\232\020\226=\260l\235\275\245.\030\276`\206\206>\274\271\022>3\203A\276\317\271N>e=\315\276XV\315\274e\313\023>\316\313\315>\201\2354>\236\360\306\275~;F\277\277;+\277\350\370\216\300\341\005\333\275\210}`\276\025s\325<q\310\007\276p4\246\275%S\240\274J\004\211\275IX\247\275\013\004}\275)-\002\276\213\261\273>Cz\374=\272/\340\274N\027#\277\214y\'\277\342\242\323=\302\261\213\274\033\277>\276$\004j>\236\022\376\275\327\363\r\276\354\023\224>\270]\372\276O0\005\276t\327\232>\2347\033\277t\006\362>)d\222\276oeW\276\237lT\277\264R\335<\211\216O>\275\235\342\275%\230V\277*\331\227>\320\347\037\276q\031\021?L%\n>ef\027>y\'\250\276G\376\023>p\372\235>\326\240\365>7\377\374=\245\234z\300|\376s\277\256\3212\275\310\242\023=`\355L\272\266m4=\357U\214\275\221\030g\276\005q\002\300h\2042>\231\224\357\275\310\311v>\352\006d>\214\362\013\274\203X\247?\314\374\020\3018\025}=\252\231\031>\300\024\274;\272H\025>\330\265\357\275\262\221\037\276\320\275m\275\022\022\020\276@\332\235\276\310T\027\277\367\314\261<\330\243\001@c\030\177>PY\207?%\345-\276\326\204\274\274J\022q\276\273\267\350\275\220\033\217?\216\350\372>\364\352\260\277\317@\273\276\355i\310?r\327\022?4B\214\276\240\237<\276\364\200\370\275\333?\322\274\2109\253>\261\000\034\276\003\3012?.\301\010\277[\275}>\374\004\025\277B\245R?\314\017\226\273\375A\343>\376\321\273\275\236\246\346\277\3334\346>\'\334\255>\201N$?\023\221\306\275\024\310i?\212I\002>jj/>\reH\276\306]\252>\350H\325=\014\244l\276\262\325\001?\n \030\276\327\224\r?\327\342H>\311`{\276b-\273\273\231\220\204\276&L\334\276\204\351\335=\246\201\250>g\342\030?\265\r\323=L\333\245\276\361d\305=\305\275\373>\224\301\016\277\225\222L?c\014\275>\361k\025>\370\306\027\277\204\223\005=\177\006$\274$\257\037=\026\216\374=\215\014`\276\031i\200\275NfU\276\212y\023>\366*C?\376\322\222\276HJ\002\276\207\320K\277\265 -?\251\013\341\276.\214\375>\364\016#=f\360\000\275V\315\222\276\357F\370=\322\361\022\300F\332#>\234\006:>AQ\304\275;|Q\276M!Y\277_\007\221?\225\353P\276\322I\337>\026\344\214\275\334\204\207>z\257\005\276\264\324\030?b\323\201\2758\246p>)\177\251\275\273m\357\276\264.\277<\000\241 \277O\256\244\275\344\356\003\276{\314\032\277\275\266\231=d|\202>jX\002?\306\004n>\231Q\207>\240y]\276\274t\335=9\344\232\274;\303\333>\352w\263\277y!v\275x\203\335>\351\352/\277\223\243E\277\222\226\377?\001\024\265\276\264>K\276\001\271\032\276,N\256=\370\345\001>\2640\001>\250\213\023\276%\210\013\2760\376~\275\342\004\317\275p\024\207>\305\201*\276\236\316Q?dz\316>]\036\214?q\356j?\355\226\232\273[I\024>d\223T\277\237\262\'\276y\362\355\277J[V>\252M\016\277\237\314\276\274n`\225<\260\324\206>\254+%\276& \021>\234wt<\337C\352=\200!\006>#\221 \277,\210E?\2766\264\275\355\310j?\367Z\221\273\256E\332>\nS\365>\255\257\364\275\371\030\203\276]\251\253>\256\345\201\275,\014\256>\356n\002?`ue\276\336\361_\277\375\260S?\207\224\363>\376\230\024?\212\272\303\276g\243\205=\236\356\201>B\271\'?dW\244\275E\006\350<\216\357\340=\326\311\223\275-\230\325=\365\316\035?\3152.=\031~\337>\374\231\021\277\327\204s\277)P\350=\034\031\231\275]\000<\277K\030G\2768\255\031\276/B\t>\215K\276>\007\203\032\276\004\037\323>\370\207v\274\222\246%>\202Z&\276np\342\276\014\335\270>\244\224+?e:\314\276\007\207K?\265\306n\276 \252\212\275\034zp>\343\373!?\261\215\017?\2040\">\202\353\243\276 /\002?\350\376\'\276\341\025\240\275\227\302\303=\375w(\277\303\256t\277+\\\222>r|*\277eJ\201\276\326Q\003\277Z\367d>\257`b\276\232\340b>\260F\'\277\210\352.\277\'uz=X4\262\276\346\212\364=\366\031(>\232\333\016?\025\021\367>p\273T>\337\353\337>.A\325\275\254we\276\276\352T?\347\305\324<\245\222\210\277\311\\\034\276\344f\212\276\255\017\010?\274\357\n\277F\261\002\276\262\316\201=\321\206\364\276.\"+?\331_\033\275s\347\277\277\221?\327\274\350\263=\275*\237\231?\010\232\354\277 \021\215\300`\372\273=,\367\212=^\356\014>\350z%=D\303\027>\n\2205>\264#*><t\314=\005L\304\276\305\342I\276AeA\276\344\257y?\277\340\362\276N\216\316?\035~\240=\013q\257\276\005\360\212<\025\270>\273\002\204s?@o\226>s?\322\276,@\007\277\346\211\363>\213=\004\275Ip`\276\n\367\312\276j\356\267\276\207\346>>db\370\276\177\"\323\276\325}V=[D\255\276s\346\267\276\313\022\212\275\032\367\261\276r\313\364\276w\275\235>)\360\357\276\302\256\r>h\262\331\276G\036\271>\344.\346\275gau>\201k\214?\22615\276a\351\271>\342\n\020>{\300\313\272}\254,=\212\351\340>\354\312\020?c\356\033>\330\242\243\275\3667\256\275\354\274\244>\336\343H\276h\307\364==\\\216\277p\025q\276la\206\275\224\"3?\310\253\210;\217\203\r\275\021\227\267\276\226\211\251\276\332\005\311>_S\266=\325\272\277\277\256\031\266\275\372 \301>IF\251\2755\n\001>\t\232_>\014\207\016>\227\000\014?)\306\367>},\006\277\246\262x>\202\337\023\277\024Z\260=\251\254\237=\207\217\033??\310\224?\374\031(>\022\032\030?#pD>\024_\020?\357\001\310=\204\370\205>\001\372\215\277\276`%?\211Wa\274\026\207.>8gj>c\240\254\277;\317J\276\021-$>\231\353s\276\223\307\257\276w2\331>\366q \276A\307\324>\325\212\032?\034\360\030\277J\205Z\277 5\336=\021\r\227\276\334\017\023?\257\035\375\273\214\013\027\277m\\a?.%+\277\367M;?\257KU?R]\253\275-\235\001\276r\010\243>\217W+\276\204\363\335=b8\004?I\305+@\254i6>\030\200\344\273\314\017\217\277\226O-?\t\r\357?\222\331\001\300\267N\241?bI\210\275\350\312\255<\250\010\006=xa\364=\000\215Q=\324\275\211=H\010\355\274\274\277A>\023]=?\352\262=?\373\3642>SAb?d\236\313>sf\275?n\245\242=\354\252\354>\312\346\355>\000\351=>`\250V\277\316\332\354\276\331\033\325=\013\255\355>\230\231\355\276W\037\307\276m\031\360\276\202\204\353=\036\345\213\2761\215\263\275_\010b\276J\314\313\276\250K\231>\257\315\207\277\014\227&>Q\207/?\227\r\205\276\3542#\277?\355W?I\235\207\276\31264?\0076\372\276\222\322e>8\3062?\024T\024\275\316\037\004\277\326)R\276\205\373\250\276\024m4?\277\026\347<\373M\351\276\354\230\242\276\017\233\245\275\315\313\330>\227\355\225>\022\261\210>\'=\364\276G\034&>\306i\266>i\340\211?n\321\270\275\001\006\325\275\340\233\035\277\310\205i\276\021D\001>a8\005=@Fz>\320\211Y\276\320\tA?!o\373\277\253\222m<\367&\005>f\310\233\274\350\305\022>\240\357\230\2767^\037\276\310\243K\277\372L\363\275%\352\340>\375\341\273=%$\206>*Q\240\276\312\262s\276\364\220h?~\013#?\023\234\253\276~`\347>1\227\221>?b\247\276c\234\244\276\017\nl\275\200\023\232\277?\023d=f\276\005?(9A\277%\350\014?\205XC\274ZAA?\374h\\\276c\201|?QD\026?\306>\301\276\273P\021\275X\021[\276\356\327\262\276\206\310\350\275\333\010\307\275\037\271\330\275\337`\221\275\201p\240\276\004\3329\276\233\313\222\275\215\013\217\276\0232P?\244,\203?\007\030\250>w4Q\275N\234\266>\335\226\242\276\300$\201>w\331\377\275\343G\217\274\306m\273\276\366\220\034\276 \353D>\242\322t\273\266\006\226\276\225\200p\276\017[\331\277\033c0@(;\252=2\3417>\010\277\257=\342u\032\276\240\246V\274\030\201G\275xW\222= \377\003<\322\000A\276\373\204\346=H\372\030>Mv\021\300\346\241\214\276@\307\010\300\316\003P\275\022\003\237\276\001\025\200>\342\027D>(\177\302\276\214\025\272\276\213\267+>E!\241>Q\335\207>\344\3543;\314\257\227>\300\205\005=m\232\020\277\252\025\363=\351P\r\276\317\022\207>\377w\276\276\t\0373\2763;o\276,\362$?\220\255w\275\300\246\020\2762\223\272<\351\346<\276\243\2000\2766\362\n\276\306_\267\275\016\030\263=\325\251\245>X\002T>rm\000?\014\020I\276\rV\226>\031\2333\275h\356\276=\tC\267\276\344\2734\276\334\236\300>\3505\321\275Ca\316=h\225T>\\\312;\275\335/\305\275\027\327\227\275\\\212s\276\232\241b\275\302\3565>m\n\311;\030\333\244\274Z\364d\275G\347\302=\254\034d>\230X\240\276$\341>\300\'+@\275\215\360N>P\210\336=s\037\021\276\301&$;\215m\226=\302E\236\274\032K\360>\3433\016?\350\326U\275j\333\306>\360\n\027\275\304\306\317>\022\212\341\276sj\014\277v\376U>\356\233\001?\213\"&\274\327\255\331\274\027\2132\276\026=F>\234\2239\277\211\344\243=\033\027$\276P\326\305>R_#>QM\010=\372\313\220<\022\361M\276\312\340\276;\374vh>\261\372R\276\250\236g\275\321\222\207>\333\236f\275\341\305z>\215GF\276\233L\236\276\024k\013>%\222M=\227\346\270=\305\375\"\276D\264\027\277A`\262=\310\014F?\221@\t\276\016\014\267<\373\324\353\275r\215\213=\332\332|\276\323\200Q<\244.\251>\372Z\311>P\036\355\274\207\037\206\275\346\350\236={\014\363\276V\341\342=4\0223\277\200T\273?\020\206X\275\3305A>\314\354\302=<.\035=\3206E\274\314\207\005\275\014o\367=\207\2076\276/\202\240\275\256\246\313\276\343bp=j^\273\277\263C\375=\310~\331\277\013\356u=\036\366\334>\236\364\232\276}ff=\177\206I>\366\250\276>\307\001\203\275\364\3076>\216\002\251>\333\314\346>\360\313\265>4\200\177>d\234\220\275\226S\003>|\321\005?_G\344=;\264\306\276\201\266E\276\243U\216>\305\342u>}\237\355= \244\030\276\202\201(\276Jn\244>&|\222?\320\033]<A\224\005>\341\367*>\014\001\032>n}\203>{\331\037<\237\340\205=F\357\227\275\277\357\211\275!\341\354\274\350\023\006=\036Xb>\302h\'>z\263q=Y~\223>\351\030M=\214\321\010>\205C\257=R\272\345=g\234\302=*e\250\276\265\\\024\275\007\337\205=\277\367P>Tk(?2\337\022>\200\337\213\276C\207\246>VJn\277\370[\207>}\216\223\275b#\006\276\3439A>7\2003\276\321\353\332>\240\377k\274\217`\320>N\336\306\276\2045\237\276P?\237>k\373%<\311\253.<\243E\370\275\236\275\260\276If\037>\227\2539=&\370G\276\376\003\253>Cnn>\311\035><(\022l>?\330\217>\257\353J>\264w\016\277\253B\006\276\263_\r\275\312\276O>|$n=\341\265\247=\240zp>pdS;\221F[\276Y\376\250=GrW\277_\241\212>\225\206\212\277\273\320\003\277\261\234\021>j\033\352\276\037m\233\276\005\364\016\276U\222\271>3B\225\275\027\300\013\300\304\254\000?y\277==R_\262<!\263I>a\020m=\033\013\253\275\257\345\227>\013\232u>_\336a\276\367\274\t?\262>\277>\325\376m=rg+>\022\356\036\277\333WY\300\320>\310<\340x\317\275$\322&>\242\254\020>L\342b\275\340\005!<$:L\276\"x\007\276\032>f>\322\265\341>\347\355\n\276\034\200\314>\304\216\216?\353u\236?\233\022\235\275\000\2527\275d\352\331?\365\273(?\360\347+?\004\276\\\277\220\246\254\276\037\366\233>\267\343\341\275h\302\213\277\334\370B\276w\216\210>%\037\365>G\220\353=\322\0251\276\035\000\225?RF\264\277\232\177\n\276\233\212Z\276\345 \242>\341\310?>\362\355/?\325;\027>\242K\261>q\214\r?F\275\344>\230\253\217\276u6 \276U?Y>\260E\">B[j\277Q\022\300\273o&\n>\030SI>\207\306K\276\030\357\016=S\324^\277\022\317x>{\t\211\276*\001D\277d\231\233>\201\325.>\370\364u>\207Iy>HY8\2763\273\313\276\361\272\330>v\332\223\276\317\320(?z\n<>\303\t(>A\375\301>\353a@\277\262\330\017@\021\240\220\275\215\260\024>\266\241\220\275\331\332\311\273\362\007\273\276\265\221#\276\301\377d\276\334\303V<2y\212>4X\332\276F\022\024>\231\017C>\221r}\276\252\225}\276!\016\023?7U\n<5s\254>|\254\n\277uC9\276\204\355\024\276\271\213k\276h\362\005\277\355D\372>\263\254\253\275\022\026\t\277\216\276c?\211\2216?\346\'\235\300\360f\225=\034\352<\277\324\232\323\275I\306\260\275O\336\252=\361\243\213<\000z\022\300(X\317>\233\211\003?\334`\017?\001\351\270\275\270\265\242\276\275@\317\275V\3648\276+\351r?\253e?>\323\317\360\277\346\261\203>\205\344\360=\261\353\\>\321\346\215>\352;\317>\233y\n\276\375$\005=\200\245\204=\233w`=r\341b?\367\005\372\275\231\2575?\020<\342\277\332s\242?l\031\205\300|\023\371=jC$>\250\254\245=\004]\261=H\207A>\322\307\227\275d\320\305=\230S\265=/-\222?\260\217\004>\227\271|\274\342\216\352?\214-\026\277\354\022\321?\237\345\272\274\311\231\013\277\036\275c\277\235\203\002\276\364\241.=\376\262\022\276\321U\200\276`V\363>h\335\216\276\256\0039\275\272}o\276\263y\014>\244oJ=\207\"\310\275\231v\t>?OL>\360w1?\352\343D\277\374\030\t\276\333\001\236\276\342\032$?\370\375\270>fm8?\374?2?\234vg?\'\255\300>\021\260u\276\020\261\302\276\242C\274\274V\344\313\275\317\2731?\'e\016?\\\370\204\275=9\325=\2624\035\275\317=\214>\036)\217\276\200dX\276\213\2341?\251\211\026\277\231\232\307\276\233[0=\301\236\236\276y#/?f\317\375=\231\026\253\277\211.\010\276\313\331\350\275kY\016?t\333o>\271\004\240\276\322wN?\375\232?\276|1P>z.\014?\357\361\247\276\375\210\240<`\007\316\275\177\246\372>\017\\\271>\"S\304\274\260\314\325\276\274\2719\275\275\3524\276\236J\005\276\214\340\020>\332\275i\276,\377\241\276b[\007\277\362L\021?}d\266\276\230\001\325>Z\322\221>\021\363 ?\325\324\216>`\224\323\276\312\256\317>\352G[\276\335\354\003\276\256\253D\276`\037\200?[\037\216\277%\236\221\275\017H\013?\377\3300?\002b#?\375m\027\275M\360N\27721\n?4i|>\340Jk\274\003x ?\034\270\340=\321\345\233\276\264\242\023\276B\372\270>\250\321!\276EX\215\275YA\223>\\\313\250?\276:\253\276\300\2314\276\310H\367>Dz8\277\004\216\'\276j\206\000?O\'\010\277Ch\266\274\\c\205\275~~\333>\225\020\031\277\204q\236?\347d\250?7\356A@\200~/<-(\026\276ji\263\275d9\205=\300n\226\275<\267\262=\363$\243\275\366q2>\241.\020\277\250\342\376\275\003\331\023\277h\220d\277E\006\216\277t\021\355\277\030*\317<u\267\267\276o\nX?\363\373u\276\377\316)>\261\223\237>\224\344\017?\350v\373\274\335.\334=\035\366\016\277MG\225;%\230x?\002Xj>\257\204\005>\350=\017=8]\007\277Gk\320\277R\226\202>\305\320\216\277\271\332S\276\262\375G\276^\030K\275\0276\252\276\203\312\221>\312\"\005\300\022I\224\276\001\027\033>\234\214:>\350\215\005\276s?\340>.H\361\275Z\370;\277u\365\327>1?J\277?\323\210>bF\332>u\363\210>\254\264\212>\322\275\345<#\373*?>c\000\277p\301\222>\020\2160>%M7\277\345\261g\277t.\335>\263R\264>\272\240\303\276\304z\321>a\220V\276\334\025z=\330\013i>\023W\250? \016\245?\026\355\270>Kr\021=&\2509;\245R\241?\'\031\002\276*1(<\264KK\277S\202m\276\r\226\224\276|0X\276\372\376\005=A\274\226\276\211\207j>\226L\330\273\267\2412?v^\020>\352U\200?@FN>\346\345\026>\223\205b=\211\376/\276\312\276}<^\264#\277\371\026<\273\366I\305>\356\223\356>D\221\331<+eH\277\254\272\206\274\201*\004@\2168\211\276\375C\303>~\010H=$*\271\276A\275\310?\207\032\235\275B\367D>\370\035{?vW4\277\367+l\276\227\004\004\275<\3374\276\215F\256>Qh;?\372\035\347\276\206\224\204\276?$\001\2764H\025>3\202X?\320G\350=\355\330\360\275\037\313<=8\226W=\277\244\327\274\217\n\323>\236V%=T\235\305>\025\247S?.g\230?\323\263\026\300\020\254<> \221\017>\262J!>\\e\034>`\351^<p\321\353\275\024\0338>\020\002\334\275"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\215\334(>G\256\302=\266\343\214>X+&\2761\345\270=\377\254\200\277\337\306i\275\317\367\214=/\217\000=\241h\177>\260\306\324=\343=\303<<\314\234=s\250\t?|\212\220\275}\277\212>\351\224\327>\243\022\211<U\370\325>\006\253\241>V\251\333\275\232`\376>\237\005r\276\326_\251=\352\310_>*\315\206=\263d >\233\316>>\312\333\336>+\315<=\367-\314\276\037\333 >\315\236T\276\335\014\232\271\2373c=P\372m>\300\343\024?\250\320a\275\352\020:\276A\030\200>\021/6>\003\301\245>\316o\'\273\022\346\225>\357I\221<\276\022G>\027I\r>\276\245\342=\315\336\034>\365)h>\3212\004>\346\300\231>|\021S>\203\246\227>\270\033]\276:\304\211>Fq\224>D\274\004?\344\275\220\274\323c\310?\222\206\177=\252i ?4\322\004\275\352\345_>I.\032>\357\261\345=\210Qj<\027\036\225>d\233\'?z\353\026>\253\255\240\275\034Ad>rp}>K\020\341>\356\017C\276\336\271\217>\013:z\276K\303\262;a\014\214>\351ur\275\001\2219>!O\031?\256\341\244\275}\260\310=\002\033Q>\272\376\\>q\352\303=\265\347w\273%\362\247\274\246T\216>z\031\312>\233\205\020>\016\232\354\274\226\035{>V\272\257\275\237\252\264<l\035\211>\332:\270\276\356\325\006?\221\314,>\312\220/\275\034\301\234>\337\276}\276\202q\240>\374\311\321>O\261\274\274\034\030w>\270\365\263\276\002p0\275\263s\277=\257\243\276\274\251.\216>J<\333\2769\217K\274O\024f>\261\220\221>\332\302\373\275T\260\261>G\034\224\276>t\243?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\374\365\004?\371A\257=m\210\027>#P\341>\200p\234=\2701\226=\217\214\"\276\355\260Q>$\273j\275\343S\376\275W\306q\275\371\302\354\276M\004\363>\250{&\277\037P\321>Wf\354>a=\022\276\374\325\303\276\274\341\374\276\273D\006\277\304\277\010\277\215N\007\277\376l\354>\314\302d\276\336\224\031>c\037\206\275V:\243>\320hS>g\2662\276X\312\016<\001\r\366\275\223\375\212>\267F\217\276\351Z\215\276\003d\361>8\311\024?sk\351\275\352\207\227=\367\037\210\276Z\350\244=T\352\213\277\034/\367>l\300\220=\237\031\001?{\036Q\276wB\213>\244\340b>]P\222\277\212U\227\276\216D\236>\304\250A>a\352o>\017P\207\276\345\375\323>[zr\276)h\265\275\376H-\277\303\225\243>~\037\000>\003\235\242\275G\t/\276\355ah<\033*\375>\267\250\366=o\255\273=\320\236(>\243\273I\273D\217\315>Fs\n?9\213 ?\375\\C\276.4->\327\310\262\276R\306\221\277\2313:>\361\3636?\rn\302>qs\344\277\034?c\301\267Y\313?\3679\234\274nr\274\274\277j|?\225\354\335>\0023\203>Y\276l?&\n\245\276\376\333\367>\314t\263\276\323:\004>\300\266\336>4*\332\275\231^\260>\234%\004?\201*\377\275A\372\202=\261\257\201\276\236\017\224>\t\000\245<c\327u>\277\253g\272\263\017\017?*\315\267\276>\037z=\202*q?\210hB\277\357 \017\277\357\311\031>\253\365G\276\303\211)\275\037\252\345\277\364K\260\274\361X\343\275\312\313\213=\256\2739>\026sG?\242\010?\277f\376J?\245\001M\277\3038\234>\320b\366\276\014\376\255\275\246\321\347><,#?p\010\200>,\214\205>l\235\221\276;X\004>u\254\035>\030\022\006\277\001\213\244\276S\024\320\2754\035,>q\243\366=;\273C\276r\242\253=\353c/>\346\034\366\274\367\276\017>=\306P\276>\314z>,\220\023\277\215\275\365=Fd\301\276e,8?X\271K>FcS>-\334\004\275e\270\207>0\tp?\021`=\276$\374~\276\347\337#\276\332\274\326=\223Q\262\274\261HN\276=[r=\341r\315>`\226\024\277\333\025\365\274@\310M=n\300!>\271o\207>\244\370\\\276C\375\345\276^Y\207\276\3328\321>#\310n>\206\263\237>\344A\316>y\326\362\275$\357\007\276n\3716>\005\211\266>\nD\002?\310\230\216>*m\352=\030\331@>yMt>\013\211\227=\241Tk\275H\337E\276\240m?\276\302c:><\217\354\276\334\310\257<\026#\277\276\r\340\263>\267I\305\275\217\034]=\253%\352>t4\'?\017\200\301\276\312,D\276\207@\315>\355\265\003?`\0246>h\315T\276\276R\241\273;\315\310\276Nw\027\277ds7<\367\317\003\277[CD\277b\303\030\277\317k\234>\033\230\"?.71\300\313\357\205\275\263\007\000?Q|\030\276\205G\354>\307\022\036?\323\"o>=\274^\276}\007\216\276\027\246\230\276\241R\313\276\017\000\n>\366\362\n>\264\311\373>\\\270\256>=\004~\275/X=\276\330\364\317>\t&(\276\360\231\233>\2404\003>>\244<\276\223uE\276\265\006\020=\376?H\276z\2005\276w\0269\277\003\2021?\202\033\030?S\"\331>VF\026\277B\325\331>\202\022\206\276\3111h>\352\226~\277\243H\212>2\001\244>w\034\034?\306\021\203>%\260\031\276N\244)>\346.\202>\350\247\005\276i\200\346>\220%\250>A\240\371\274\215\201\233\275p\216\245=\373\246\211\276\333\303\325>Dq\034?f\345\034>9%\250\276.\256\250>\360\344\034\277T\360!\277Z\345\273>J\325\005?tub\276\352\rA\300\244\331P\277\260~\016\277\246\344<?\314\027\'\300\274Se=\260];=\364)\316>\217B\362<M=\247>\213\344\363>\337\235\314<+\026\305\275d\017\275>9\245\320\276\347E\305>\000\216\231>\027\344%\276Xj\322\276\254\314\032=\0037\027?\017H\200>j\201\032?3>\336>?\2517>\370\\\005=v\nK\276\237\300\256>*\362D\277\031\303\346=&\263-\277i\250\370\277\370\241\316\277\233\013\024?K)!\300/\352\330>\266\231B\276}!U\277\017\331\302>K;\254>\024\317\014?\272\013\216\275\346F\364>\2537W>\251N\241\277QNZ>\3373d?\265\243*\277\247\325\037>\030\374\204?\315Y~>\r\337P?T\366\364\277dU\347>$\005b?HBo\276wp\331>>\334\373\275\241\325n><&R>|\r\021\277\215\216\316>\325m\236\276\371\3344\276\374g\256>4\314\341>\212\263\245>\223\002\267=A\366\354<\200\231\221>\365\247\353>\236\304\332\276\345\007\177\2756\206\207\276\\P*?\345&\334\276%\\\274>\034\367\324\276\342v\362=y\032o>\251\271\025?\254\226;>\227\270v>\2220;?\337\334,\276I\027\254\276W\272\232>\215M\007>w\355Z<\303\207\026\275,\304\210=\311\301\007\276\234B@=pQ\264\273.\327\216\277\013\353\274\276\304\023\203\301mv\222\277HJ#?\204\343\017\300\314z\212\277\272\275\260\276\351\336C>\005%\270\275\n9\277>Tc\205\275\035\261&\277h\214F\275\32401\276\001\357\231=\363\317\273>Z\250 >I\213!>\326]\277>\345\003\324>;\266b>\324\3601<o\362\276\274\377Xh>$\264\210=dz.\276)\374F\2768\325\313\275$\233\014>\277i-?y\323\323>9\010\031>\355 !\276\357\351C>\t\261\220\275{\3100\2751x\371>\373o\247\275\357\2279>Q\022\270=\326\304K=|\3519\276\235\312f>\'\r\215>\310\273\274\274v\320 \276\016Y/=\362?Q>a\312\237\276\2712\226<\311\374\033>\314\355\271=S\235\275=z\251\'>\250\025\201>\230\353r>O\351\024?\327n\216\276^P\330\275\026\006\315\275]E\277\276\'l\376\276{d\275\276f\3439\276\317X\265<\340\365\021>\'XF\276\000\334\311=\361\007\272\275=\217\022\276+l\356\275\257\351\007\276\331\247\221>\340\352\307>p\260\032\276\026<\260=\035\212\370\276\216\247\203\275\'?\021\274R\266\314\2765\233$\277\351\313\341\275\351\375\340=\242\377\322<\207\\`>a\n0=-z\025>\227\330&?\027\026\221\276\032\007\347\276kH\230=\330S\277;Pf\342\275\245\275\024>r\343\312\276r<\201\300P\002\345\277\004\330\372\275k\354j\3005\327$\300q\034!\300y\203\256\277\303\t\374?>\212\211\275\021\304\250>\206\037\334=\351\n\253>G\251&\276\207kd\276\r\345\260>\320\001:>|N)\276\237SQ\275\277\0264\276\017\204\266\275\325\344\250\274\265;z\275G\375\224>\021b(<\217m\036\276\356\247\306>\255\233}=%D\013?\354)\241\275cg\342>\346\341\264>\222\276\355\276\027#\017\277\245\232\001?\345\235$?sO\324\276\356s\'\277(\222\n\277\356\177\350\274\235\375\021>|\274\2477\342<\330>f\262\327\275\210\340j\276{\322\025?OS\\>\320\370\244\277\240\235e<\273;&\276\302\267\357>\320b\345\2761\177\'\277?\202w\274\341\337r\276\'8<>\000Y\312\276\214\347@\276c\261\247\276\r\016\016>\246\265C\276\356B\231<I\254L>1\231\217\275\343\230^>2%\013?S\243\t?\257z\354=\311*\214;\026\205y=^\365T\276\"\034Q\276\250C5\275\016*|>.w\231;b\234Q\276>!m\275\317xh>\365\342)>\367=Y>\026\310\263>\301\313\230>8R\377\275~#\266>\204~\t?:\240\330>:\263\373\275\274p\216\275\213\367\301\274/\337\034\276\360\262\260>9v\'??\364I\275\002\306 >\364k\017=\253\033\031>\201\033\243=\256\313x>\024\"\303>\277\202\031>\264.\331=\257\254\317=S\342^\276\230l\203>;a\244\274\317\363\200=\275C\206;\364\362E>\255\233\313>\001\226(>6y\225>2\034\261>\004}\200\275,\231\002=\224|\270>\334\270\206\276RG\360\276=\205\004\277\240[\215\276\354[\244\273\207\274\316\274"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\023\030?\274\234d\006?\305\020\313<=\360\t?w M\275\007\260U?8nu\273\237\230m="
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\022\341\271\276~\235\370>@\204j>g\217\t?u\016I\276up\025?\302\364\235\276\343\\\347\276\373\014|\276\344\022(?c\223\360\276JK\236\276A\263\212\2761@{\275\362G\326\276\210CJ\276\202~\250>\013Q\265>\261\205(=\240W\243\275\222\237k<\260/\250\276K\230m\276M\341\324\276E\257\312\276\2532I?\274w\r\277#\230\334\275\r\265:=~\357\016?\256e\025\275@\374\270\276\237QN\276\236\016z>\373\314\314\276q\001x>\355\266D\276J\007\201?yd0\276\362\353\005<\235W\327>(\311\007\275P\362_>\030\262\241=\223\250\335\276\026\010\346=\275\267l\276\004y~\276\276%3\276\247\351\257>^\315\206\276+\334\265\276\004\216\314\276\361`\234>\362\013\250\276\221\305\375=w\203\260\275\032>\231>\334\3728\276\221\037\215\275(\236\225>\304\035\316>fi_\276\313\277Q\2768\274/\276Y\340\027;\0267 =\365v8\276.tX>_>\325>KU\213<\222gI\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.18486113846302032
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
