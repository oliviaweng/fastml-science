node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "A\357J>\223%\002>Iq\250=O\375\372=\271\237\372>\347x\300>s\361\014\277\265\307\277>d,\342>8)\335>%\234\204\276\025\'\366\276\277\376\232>\327S\035\276\246l(?\022\372\242>\026\210\335\275\347\177D\277\006\341\333\276c\321\332=q\310\371>\266\361\330>m\3236=\357\254:>(\033\234\276;\225\365=%\346-=_\226_?\214,\035\276:\007\331\2757\032F=\035,!>\321r\225\276+\r\330=\rFl>\021\022\266=f\'\261\273 P\340\2741\320\335\276\206\333\347\276\331\250\303=8PR\276\264k|=h\310>\275\023L-\277\230J\206\276f\310\t\277\342\2472\277H\327\034\277\323H\017?\240o\212\276\252Q\037\274\302\353A\277\265\\\220=\373^:>\205\324>\276\231q(?\024\254\001\277\320a[?Bh\302>\030&\200?yq\356=9\"\213>\270\216I\276;\203\245=\205\330n=\357\274\274\276\346\006=?\367*$?\031\373\241\275\276>\236\276\261\332->N\351q\276\315f\250<\371\372X=\002\327\235\275\3149\306>=\256W>&\370:>\352\202\222\276+88\277\361IX>\002\264\271\275x\002\t\276\321\237\357\275v=(?vI\315>\037\225\351=\010!\t\277\366\002\216\276\306+~? \324i\276\343\223\202\275\336t\004\277h\342\232>\226\202\217\277C\336\313\276\227\200\251>\031-\245\276.?D?>\355\302>\373\245!\277\3632\215\275\233\341\014\2777\315\021\2771\370\245<\317\3736>\033\247\272\276=\224\351;\377P\371\275\313\346\301<\330QH\276\373\225\226\275\271?\331\2765\216\300>\337\364\332>kd\354\277\224\000\375\276\031@%\275\210\326\212?W\335G?\006\020>>d\342\364\274\035\013S=\232t\200\276\311Wd?>=\003\276y\250r>\245n\333>\003C\371>\351T\022\277\204\342\247<\252\030x>q\314G\276\241\253\234\276\303\356\346\276\377=8?\031z!\273\006e\375=I\241H\277o\247e=3\001\366\274\370\215\305>R\250>>v\335\301\276\227\013\037>\217\234\232>\037\374a?\271;?>\213\230\005?\037\3158>\340\376\241\275<\307\255>X\274\207?\371&\330>\373\212x>\253\250\006\276\205\340!\275\374\306\005>M\355h>\344\353P\275\204\200\252\276\255\316\263\2761>\232=\317\274\217\276\274\266\246>L\215\313\276c\372p=\207)\276\274\352:\301>^\236\233\276\235\347+>gR\215\277\2032\263\275\232\'\307>\013\351\320\275B\235k>\362!->\374\322\354>\211\320\241\276\3109\336\276\367\010\036?\340\334\214>\313;\371>\367\246S\275\276\375\227\275\330]\335>Jd\005>\340\343s?`\363i>\327\201\002\275\210\352\005<$\373\241>F\001t>\303\373\240\275w\2064\274\372Dd?\233\365\367<\215:\333\275#\256\351=\346\"\244>\220\257i?2x\'\276|\331O>\212\231u\276\226\001\235>\364\027\376>C-(>\214\352\355>r\255\251>\025\313\365<\361\214\002\277\275;\003\276\262VS?\"\366\245\275\366?0?\204\216k?\"l\203\275\254\233\307>\250$~?\352\364\026\275(\270\264=\355\t\376>\363\327\t\277\255\274R\276\200])>v\342S?Hr\324\275I%s\276\n@<>\222|=?\241\207r\276\0047\302\276t\203\277>^\006\263>\2767?\277zBy=<C\356>0\035&?O`\314>\376[\321\275\001\037\'?\275\266\335><\224\021\2776\003P?\"}\221?e{\260\276E\222\233\277a\236q?h\000\354<\006\2457\276\007\357\226=\200\325\213\274\350\005a?\340\376B\273Z\316B>\277\243R?+\335:\276\177\300\315>$;,\275\226\213\221>\210$\302=\375\371\267< \2579>q\"\240>\316\037\237>\320\354;?*\270\235>\226\352\322\275q\032:>\033P\206>g\017\330=\207\303*\276\351e\337>yhD\276?\241F>h\321J\275\247\355\026>\376\243\375\275QO\210>\324w\002?JB\030?\20070?\310B\266;G\371N\275\026\213\262\276\217\256}=\303\261@\277\031g\264\276\206B\262=\273\325\326=\267{\324\276\302\301C?J\237\204\2765\374t=\271J\021?\202S\206\276\004\377\227\276X\323L?\341\026\214>\374^\371?\035\2057\276\224!F\276\357l\r?\271L\210=\317\3200\275\006<\037\274UlZ==Fd>\026\'n=\204T,>\340\232\034?\004\257\314\276\261\034\240?\260\034\213>\257x\235=\\\005\006\277\204\351\372>\3754\322<y\227\r\276j\360]\276\254\342\034<;\200\270\275\220a\207>\023V\215>\301\227X\275\177\317%>\312z\340\275\356\202g\276\033\321,?\326\341J\274\373\331\256>Uv\237\276\022\2078>\242~?>\323\026\200\276\320:\315>&d\323\276\027J4?\334Q\320>\274\210\030\276\255\035\000>\034}\010?>\023\215>\007\347!?|\212\n?LI\013\277Ye\225?xA\030\276c\310C?\351nJ\276D\262#?\354S#?\354\331\367>\345\037R\275_a\362\276\266\222V>\230\217\203\277\310\001\224>\024\305\363>B^\243>1g%\276\033\007\236>]\230D\276>Gs\275\031\241\004>UG\320>\364[/?\220\n\353\275\363\"=\277e\014\010?\322\346\221==\263\211\277$\364\326>\246e\215\275\354\004\323\277p\307\226=\005\026\177=\350M\211=\003\3450\276\273\000\205\2750\306\251<#XJ\276\356\211\205>\252\352\247>\231\205:?\214\342\235>iq\201>\304/\234>\267\211;\277 \r\323\276>\212.\276\211\031\316\275\3414\341\276\205\303N\276I\267K\276i)\305>\000H\215\276\226p\365\275EC\036\276A\326\240>yc\345>\346\370*\276\375m\211\275\210\320.?e\242$\276\353\027:>E\\\036\276F\2735?\205\356\265\276LU\266\276\033.U\276D*\234\275\371\227\353\275\250\221I>\274\306\333\276&\0333\276\356\032;\276\327\317\033>A\333 >\r\017\340>\273\034X\275\315\020E>\260\330\264\275=\366\234\273\251U3\274\005T\267>\027\213\255=\3108\336>d\341H>&\246\035\275w\240+?\253\261\022>\233_\252>\352$/\277\347\237\211=\215\350%\277)u`?\035\241\226>{d\266\2761\035U>\357\205\305>9\356_\276\350%l\276\2509T?h6E>\222\272\002>\254w\355=\005X\276>\025K]\276\004;\005\276v\370\233>\330\360\033\276\t\206l=\305a]?H\264\335>\365\304\270>\260\014\267>\022P\016?\272\020\375\275(D\313\275\273\n\223>\036\245\244>\353\207a?\372w\246\276j\362`;\351\244\245>\3120*\277\2234\002\276\331\265\325>Wf\315=l\367\202?%\353\222\276\226y\253>\331\366\031\277\010\001\017\277b\265\024\274\022i\310\274;\021\201=\370\344\t\276i\230\330>x\2108\277\005\370\257\276a\330\253=\345\302C?F\307\234>\355O\017\277\341\177\236\276\246\227]>\202\243\034>gQ\242\276_\316\217>>9\t\276]\365\367=\371\215\256\274\375\331\374=\r\256\210\274\245vE?\027\372/\276\375\255J?\267\013\311</M\314>\244\261\350\275<\2077\300\304\213\030?\205U\213\275\321\304\024\274\2662T=\007\323r=x\326\022?x\002\373\274\357m\345<\234\316\200>0\031Y>R\017\007\277\335m;>D\344l>\203\372H\276\304h\247>n,\016>=\005\216\276\354%\350>\343$\363>\2640r>\024gL?s\000\263;\017\2458>\230\210\274>\032\202t>\307a,>7\357+>\025\213\363>\331yl\276\306e\203>\252\373\212\276\215\305+?\352\273\341\276[\2072\276\373\023\207=\032\207q\2761\311\005\276,\356\356>\215\023\230>7\226\004>\244\221\252:\016*\301>t\301\225<\267\306\027?\002u\010>P\217\227\276\305c\200>\361\273?\275\216O\231\275\352@\037>k\343$\277\225\367\354\275\036\310\265\276\003\007\361=\330\032\274\275\0319\211=Q\235\244\276#\001\247>O\nQ=\222\'\024\275\273\252p\276h\3133>\205\256\331=m\227\271>\007\251\341\276\227\255^?\336J1>\352\017\236=M\377\206\277\332A\375>\357\330\036\276\273\344\204\277\013\346F\276T\037\227>ri&\277.\274\025?V\352\316=\337&\327>\237e\352=\177\024H>\305g{>n \006>Tz\236=M\251\245\276\374\320\217>\276\3701\276?\221\032?e\341\321\276e\337\254\275\023\323\365\275h\206\220\276\002\214\266\276p\357\224=\375\271F>0\002\001\277#\257\374>\253{\276>\n\277\263\276\006\251\315?Sv\031\275:\305E?1\340\272=\326\271\\\277\272<A?w(\351>\245\032\203=\027\203k>b\235\264\273\321\367\030>m\270\305\276\005(\317>p\335\177<\236\252\031>\223x|>\257\026f?7\215B\273\305D]\274im\325=\360j\237>b0J>\033d\205<\325t\235?L\272\345>nU\225>8\354\234?W\375\223?B\336\330=:\355@\300\200\035\263?\027O>>\222\253\021\276\217\014?<\'x.=\327\220\242?v\251\025\276\240\314#?\236T\250\276\363\357^>\310\250\256\276\270\222:\276Q1\204?\212\365\277=\306\r\017\277`#\">T\305\217>\217D\033\277r~\210>.\035\026?\220v\274\276u\260\327=\2672\274\276\344&\317\276\2557\305>Y\205+?+\030\007=\234\346\267\276\217\006\217\276<!\222\276K\213\014=\016\273\312>\221\304\001\276F\270\213>]\177\000?$/\034?\211\244\201\275-\210\031\275\025.\365\275\276\020H\276*\226\265\275\266\245(\276=P\351\276\212\320\023\276\210\203\252<\036\354;=\025\236r=\325\304{\277gu\237\275\374\221n=\272\312\255\275\nm\334:p\363\374>\326\301B\274\252\237u\276\245\034:>\373^\202=\024G\211=\322\346Z=G\234G<\272\212\031\275\005/\027\276\023\322\362<\266\366\260\275ui\320\274\035\331\316>\037H\n?\212K\001?\351\225\312>;\303\243\276\003P=\274\325mT\276(FC>\363s\026>\254\346\024>\332\035\272>ep\376<\232\016\262>\"\237\303\276\314\241c\276\221\267\020\276\253B4\275\274\010\322=\244\3554\276\205>\353>\304H\320>\027\357\323>\274N\353\276\211\273\255<`\265\302\276\230\311\016\277!\230\337\276\t\024\233\273\013\244\005\277_\225\264>\004\207\020?Fu\305\275/\361\021\276d\374e\277 ]\031?\356\332\r\2767\203G?N\201\003\277x\331:\276\217(\350>T\031Y>\201\000\314>\347&\330>\265y\362\276a\274~>\n\356=?\210\224\357=\237\265\326=3VB?)\346,\276\237\\G?\"t3</6T>W\270#>\346Y\t\277 \254\267\275@\030\312>W\342\212=\373{\232?T}\220>\350S\252>\316\303\177<@\201\036\277\034\255\342=\034\3463\275\233\300\341\275=\352\266<p\214\276=\300\206\271\274c\263\226\275I\004m=\263\033\267\276D\325\303=\367\0260\277h\035\236>q\021\237>\307\274\025>\344~#>dl\275>\221m\225>\\\205L?\250\373\343;\217\r\026>\010\366\270=\3633\t\276\331ZK?\240\332\262>9\027\360\276\335\014\251>-\276\241=DQO>VN\326>\277-\232\276\223\260\217<\031\327\215\275\016F\005\2743\221\177?\202\204\'?\036\351\333\276\205B\331\275|\010$\276y t>\217\340\253\276\245D+>KU\010\276\000\341\310>\223\257\353>+M\373\275\000\300\025\276\373\324c\276\250\264Z\276\350\006\235\276\321\210\002\277\336\376\222\276\022s\335\274\257\033\361>\317\314\010>\026\303!>to0\275e)\004?=\242\252=\354\343=\275\377\266a<6\222 \276V$E>\032\022\271=\342\341\256=\023\247\t\277\203\345\240>v3\364\276\205\216E\276\245\003\034\300\007o\020?\251\376j\276H\362X>\314\007\t<LC\200=\016p\004?\347\027\212\276\360\220I>\347x\207>^\360\034\276g=\274\276\253\016\345\275_\252\t>_\216\207>\0266V\276\356\0005>\337\212/>\310 3\2750\213\272\275O\257;?%\310+\276\322\0237\276\346\375\267\276\352\017\344\275\332PY?\217%U>T\335\356\276\333*\301>D\010I\2768\272\233\277N\020r\277\225\3078>\023\216\n\276t\312P?k\310K?M\374\'?\036\247v\274f\201\372>FM\342\276\274(\361>J&\231=UI\363>d\004}\275\314\266\362>\263\373N>\341l\003=\201\2077>xd\255\2741\336\350>2\2715\277\361X\223\276\030\341G\276\025\003\256\276T\323\362>\231\330\372?\357\232\224\277\273\016\005=\266\331\355>\314\000\006\300i49?\017\265\201=\364\376\224=I\033\210\275\201\224\033\276e\230R?8\326F\275\2308e>\375\327\025?\340\026@?0$$?Zo\264>-\005\225\276\301\355\313>\"\305T?\224\332\014;\215\324\262>Y\3211>\332H\343\276\246\212O?\247?\323<\177\355 \276\247.\r=\373\236\236>\366\005-?w\231)>\301\274d\276\035\213\020\277\204\231\202\275\006\025\373<I\177\371=\242\370\332\276,W\271\276\217\315_>\335\266\016?J~e?\210\376\r;\366\n\000?\316\3238\274Ml\273\276\323\265&>\375K}>sL\343\2752v\232>\001$\002>\206\340\311\275\273JC>\013\365\312>\227\302\202\276\317\200O>K\000\337<\235\317c\277w`7\300c\001\313=\233@T\276\366o]\276\331\275\000>\344\344\\>\223\347\327\2752\235L>\017\306\256>\335k\347<<\034\206=i\021D\2764\221\007\275~\205\032\277\315\204>>\213\036\272>\323\250\314\276>x4\277\030\027\373\275+\243\256=\177rV\276T\356X>d\224A\275\343*\267\275\211\243w?q\237\212\276\306b\007?\004\335~\276\213\005\301=V2$\276#\371\216\274\004\217\353>Vs8>\300\213\201>5\026\310\275\303\274\226?N\203\205\276\333)\203>\"\334\225<A\2559?]I\251\275\253v\025=\244\243e\276\251(\036?q\025\322>\226\2336\277\253S\206\277$?\321\276\227~+>/-\034\276la\017?\254\342A?\321\203\251?\220\010\213?\366\301\323>\004n\022\276U\370U>\336\206G>6\205\325>?\026\022>BTn=B\002>\274\337\250\236\2769\245\300>\204\025e\276\300\035\322>I6\227>\246\376\213>\300\243F\2763(\216\276[{\373\276\234XB>u\231\254>J\340\004?\232\277\232?\202*\325?R}\355=\325\301\312>\004\n\246=7\311\265=2\325\021<\330\300\020\276\334\306\t>u\340V<\002mq\276\361\022\016?\356\232E>\022Y?>\315\242\230=3\3628?\363s >v\303r>n\006(>\221\354\257=\377fH>t\207\347>4\343\243<\334\322\235\274K\025\210\273.S\363>\340@@?3\320\t?p5I\275^\271.=\316\247_=\232\224\243\276\232\3268\275\252\375{>\267\373\322=\356\"\315\274\021\333\261\2769\362\336\276\346A\347<\017\302\357\275\237i\350\275\006 \017?\233Ye\276\336\261i\2760\211\277=K\373\362\274\273\340\235>r\233\266>\354S\025>b\252\300>\226\231\260>\347&\207\274\276\213\212\276\034\363\301=\306\020=\277\264\210?\2768\014\300>d\247\246\275/\300d>hh3=2\212X\276\244F\236\276\207<\253\275;li>\266\310\332>\022\307\260>\355\325\243>A\003\357\276\220n\337>\305\331\223\273\355\346\215?\344\333\247=I|\241\275Tr\003\277\026^\256><\003I\276\2234\326>t\222O\275\304\351\234>e\212>\2748\252\222\276Y\202}\274g\3571>RE\034?\272P7\275^B-??\266\263\275\236\276%\275\265+\363<\0255f\277\247\214\227?\263\200\027\276> T?m\305\354\276\232\376\204\274\365\211\303>\006\254?>\337\321\250\276A\332\263>\354\1772\276\302C+\277\002\177\360\2750W\360\276igG\276N\004\034\277vT\231\277\342\275\347<\336\351\025\2772\201.>\237Bz>\343\231\220>\214@\006\276\3604\260>\024\035\026?m\240\003?P\311H\275AG*\277\270r\362>\030@\346\276\026\367\033?]\377L?\031\022%?\303\253>\276*?\260\277C\350\271=\241P\005=\255\3118\277q\360{\276\301\375\334=\315\203\270?\034_\355>q\221\324>^i\375\275 3o\276\017?\202<\251\021\233=yV\001>Z\t\'>\034\230\025>k\236\n\277\271\252\350\274#\013\317\275\327]\022?5z=>\004\305\200=DU\006?\252)L\275\216\022\036?\003O\r>4\020\262\275)\325\273>\240\246v>\026\326\262\275\307\177a\276\333\264\014\277r\327\003\276$\264\375\275\n}K\276\264\311X>\006QQ<\002\204\222=\327\"x\276\240l\332>M\033)\276\250|\014\276\034Q%?1m\220\275&P\375=\314O\226=ja|\276\355W\237>21\211>\335ZR\276\020\360p>\301\312\027>\\{\346\274\345G\r\276C)\365\2746\001U=a\021L>O\340\225\275\006D\324\276\327\033\001@\316\265C\277\321*\216>\212\3632?\257<\342>\267\276T\276\030r\232\276\357\"\356\276\200\312c\276\326\000\333\275\212\327)\276#\362\014?\257^\257>\364#\013\277\357wL?\024G\273=);I?\256X\t>Nl>\276\2025\327\276]\367\233>\357\232t>\300\254\020\277\252l\271>\001\206\004\275\037N\231\276jy\301>\023\333\205\276\237\363\201>\344\217\n?.\327\031?v:0=D\233\301\276\236\255K>kU\210>\3415\363\276=\234W<8\032\016?\313pa?\305\261\377>8%o\275i\000\014?iy\202?\007\024b\276\177\203\n?b\016\"\276n\212\'\2764\274X\275\274\206\024?\013\n\005?\347e\030?\252\320t\277\n\343\213\275\335;T>\263\014\245\275\240\035)?hn\227<\351\007\031?\322\"\340>r\235\230\2767%3?\023[\"\276\201\366l\276\217\330\341\276\004W\323\275V\302t?\213\017\014\277_\010\350\2759\025\324\275\264\026\311>>:\325>\00073\276\343\230\271?\007F3?lf\232\275\335i\223\277\373\255\025?\302\350\201>\007\004\333<\366\377\214\275\250\355\204\276h\247\313>f\350-\276z=1>\277\256\334>;\354=>\365\001[\276S\260\036\276XU\014\274\315\315\220>\263\334\352>P\342\306\276Xw\214>;\037\003?k\306!?\340\337\357=lU\317\275\375Sg>?\336c?\223r\354>\360}\\\276\2377\313>\207\375Z>+\350\342>qYJ\275~\r\322=\010\221\033\276 3\215>B\364F>n\231S>\'\264\206\276\202u@\277\330\257\224=\347\214\242\276\206[\333\275M\307\320=\020\351\217>.\002%>\231N\266\276\376o\243\276\007\312\306=,f\035\276\365\336*\2761g\263\275\260\274Z>\270\317\250>5]T\276\366\361\264\275\020\363\270\277\232\341\037\276\276e2\276\317J\263=\"k2>\303\205\261=l\300\372\276>\300\000>\345U[>\341\026\326\276\237\372\010>\331\216\254>\360\3230>\205\361\177? i\350>\335Xf\276q\000^>\360\007\013?-b\206<F\263\217\276{\2114\276\271>\220>d}\024?\325\334\010?c+i<\033B\363>\206\r\025\276A\013\201\275$!{>\376\244\216>\020\271\016>m\335@?_\233\266\273;\207e=L\315\250>\354#=?\016LQ\276\350\006*\275<\361|\277\224\246\331<)2?\275\2626\234>*\273\005\277 7O>\241\351\246>a`\261>\026\321\301>$;\211?\277\215\313;\301*\\>\r\014L\277\017\377\334\276\306s\271\276b\302\001\300I|\202>|D\005?\371bA\275\027tC?\346\246\200=\213\316\315>\262n2>=\023\016>\302\302\307>\255(T\275+\361\037\276\246\325\254><\n\347>P\027!\276\024\365\315\275\375\242\257\276\033\312\200\275\344\205\230?\013\205\367>\214\371\307>\374\260~?*\303\330?\021\322f?=\264\245>\271l\031\276N\t\035\275\032\311;\275\347\002D?\350\260>\275\312\026q>\277\360\364>\356U\206>\3520\241>SE!>\035\003\005?\315\031*\276\235\314\007?\362\035\247>\004W\002?\013\2067>\214]\201:\275\345\320>\204$\277\276\335\327\226>\312\213\360\276\r\250\353\275d\3733?\211\024\014?\351C2=c9\214>\231\340\323\274\374f`\276e_\246>\316H\200>\301\032\232>\350*\331>K\254{\276\013\247\362\276\362\3376=\317\021\022\276\244\210\257\274\031\300\370>\375nt\275\304\032\267>N\221Y>NEN?\210\277 \274\234\nX>\337R\306=\025b\321\276\244b\\>h\210\355=\206xH\275\354\rG\276V8V?y\353w>\374\002D>\310\356A?\037\200\253>!0z\276!\227x>\331\325\r\276/J\225>`\245\001>\322\257\033?~\236S?H\026\\>_\206\240\276^\350??\254\3224\276\272\276\217?\275\017\304=pe\340\274\364[\375\276\031\200^\276\225V@\275H\177U<rgT>\035\251\377>\215\365x>\352\342e>\341P\326\275\020\340o\275\320\264\344\276bv\333>_\253\360\276r\022W=\016\006\304\275&/\204>\261\342\010?\212\327\353\275\305\273\274=4T\275=\014\317\214?\217\305\007\276&\004\203\276\204\276\267=\364t\303\273\'\364\332>\2478\353=Mf\220\275\375\361\377>\327\250\"\276VaK>(\214\r\276e,\244\277;\376\024\277/\t\035\2775a\210\276\221\306\235\276v\212\376>\034\311\006\277\251\032\263>\202\312\212>\244q\306\276?+\315\274\217<\213>s9\n\277\200\250\177>\207\322\007=\254l\261<T\213\357\276 T\320=\307*\374?\337=t?ey\350>?\272\373\276\026\335%\276 C\013\276\001\337}\277\242\2602?u\363\024\276\333\325+\276\232\243)>\007;u;Y\216\343>\226\224A\276m\306~=\276\327\373>\271\213 >\306D\224>uo+>\026\252\376>270?\300\220\220=\t\340\031?}u?=/\355\277>\021\375u?X\021\371\275}\3627?T,\264\276:*\237>\036s;?\251\210\\?\003\234\005>\020\261\221>\206f&?\004=\260>i8\377>\372\231\247\276\377\253\202\276\201\347\234>\260V\207>\325\267\225>\227X\"\277\021A%;\352\010\313<\375\332?>pM\223=\307\343\364\275,\210\177>\232=n\276\346:\276>\2619\351\275\231\312M>Y\361\033>\324\367w\276\227\005]\275\312I\332\276\2653]\276\242\3753>s\304\214\277\370\027\254\272+\373\337>\247y\353>NG\265>_\213\252>\272\2051\276b \026>\255\001\367<]\340>?\221K\231=\264\365E\274\266\357\024?\223M^>\320\210@\277\245\304\225\276K\331\305\276\270\300\251>\034c\206=\314[\t?Nai=\262[\363>\306ka\277\325\n\233\2766\220~=\241G\202>\214\250|>\360\350\010\277\307>\375\276S\236w\276\330\370\214>\372\343\004?\r*\311=L4=>\035\344K=n\320\227>\\\017\016?\243\032:>;\026u\274\245\241L\276\203!\323\275\305\346\206?\201\275C?\246u\037=TJ\235>\306\333\357>\375?\224>\354\234\025?=\032\230=>\213\202\276\316\336$\277\030\013\214?\231X\300>\317\252F\277\221\313*?\213\002\005>\260\347t\276\032]\t\276W\225\013\277\323\200\251>\357>\014?\000\264\320=\205\021{><\200\213?*)\325\275\224\377u\276\251\354K?\355\202\320\276\177\2753\276,\316\031>\210\335G?\324\227\257?\322\347\313\276`3\3619\240\276\036?\006\2259\277\220N4?I\323\334=X\263\350\275Y\265\211\275\207\267\033\276\036\314\365>\355k\300\275\234\367\205=o\001\001?\037\020(\276R\370n\274\306KQ=8\363\261\275H\250\210\276\351\256\335>\261\036\205>J\365\3509\006+\323>\331\004\214>\242\032\022=\023\367\020\276\211\363\302\276\177D\354\274 V\324\274\035\023]\276\301\255\210\275V\206\367>\370\013\214=\013\333\355>\\Z\266\276\307\220\226\276\275\247\017?\037\235\327\276\301\335B?@\301\030?)\215 >\035\327\364\273\374\260\017\277i<V\276\'\330P>\316\243\360\275\232\365\232>8\032\200<@c\002=i\371\346=z>\243\275\347\2712?\000\306Q>my\203\274\261R\240\275\376\203\235=>\023\367=3\202]=\277\326%\274Sph\276\000mA\276f\217#>\222+I\276\227W\224\2766m\251>\317\241\221>\233\224J\276\351+\253\276)\363\323\276F\'\275>@\352\024\272\201R\253>\212$\323\273\3009\245\277)\352\374<\0244\027?\014\302b?!\177\n\277\347\342U\276\2035\356\276`\376[\276Y\222\002?u\266\r=s\335\272\276\004\026B>\316{Y\276\355\224\033=\036\362n\2739\tQ<\324\3145>)\366\323=\305\021]>\347%t\276\243\220\013?e?\031\277\207\350\221>\307\333\362\276`_\217\275\221\020v\276\322\351\250\275\237\033\200?8\203_\275-f\270\276\305@\363\276T\347\245\277|\302\320\275v\020x?\230\341h?\224\364\247\277\246\2571>!\367Q\272\234T\255\276A\344\351>\262\260\357\275T\326\217>\240I\021=\032\342j?\020\262\207>\345\243\226>Umi\276\311\'\356=?F\002>;\223\020\275\\\263\255\276{\201\230>~\002\227\275\007\217\355>f\245\017\277\320\2505\277g\244\227?I>\037?\256\357\354\275X)\016\300),\027?<\366\022\276\304m\251=v\370\003=\220\351\213=,\014\333>a\302\021>\363N\232>\206\365\342>\374D#\277\342\243x=H<\216\276PiK\2762\331Z>\252\215 \276(8}>\324\355\354\276v\260\334>W)\201\2778\240*\276\367\266(>\237\002\245\276\277.L\276\360y\202\276\357c\342>_e\221=\226\231\205\276\003C\267<\003\340\322>\303\177\302\2767k\036>?\0251?Z\352\272=\032\034\344\275!6\027\276\3376\244\276w\001\360\275\323\324\000>\262\037\256>\030^\206\276\247\233]>\210\262\270>\003%\021\277\201\231\000\277\372\254\330>vW\010>\010\240T>\267\277_>\022\246\335=\304\270\242\275\365\237\037<\200\3133\275;IF\277\200\223\332=Q\003\\>\334\207&>\233?\212\276\311\260\227\275\305\320\375>\366\252\332>\224M\003\276k\300\250=[\026\322<\002\221\254>;\231V\276K\004\340>\245\247v=X\266\331=\277\377\200\300&F\306=\343\003\225\276\026RH\277\332\371\344\275\"\367\234=)w\272>+D\233>\242\313\245>\177\311\010?M\365\212>\016\344\247>|\365\025>\263\200\231\275.\213r\2768M&?\367\273Q\276\3521\205=@J\313=\306\201\226\276b\203(?y\224\210>\371\201\032?\345\323\004?\2441\021=\037)\273>\213\003+?\014\017\177\2766X\306\275\322\315-=\355\333k\277J\220~\277\365\345T?\005\234\267>\350r\237?\006\024\223?;\216\r>?\024\362=\001;\026?r\256\215\276\323 \353\276\360O\336>k\n\036>g\013\354=Z:\374=\256y\200>U;\307\274\373r\n\275y\214\255>\330\026\006?\353\\q>S\313N=\354\311\240=\351@\303<D\342\342>\n\371\326\276\222)\347\274\255\346\201?\234\233\355>%\315\260?_\273\010?/*\037>\312\362|\275B4\032\276\033Nj=Sk\242=\237\005K\276\331\365\002\275\255!*?h\020\376<\031\310\204?Y\010i\275\320\273c?a\"\332>\313\374\316=bb\210>\034\024\236=\016G\361\274\252 \324\276}\366(\275\341N\346=]7\245>$\333\032?\212\2436=A\361v?\273h\032>\272\244\265=;fH>O\006\320\276\340\223\205>\007\025/>\264\363\207>\244\263\272\276\301\355V?\006\326\376>\374\340M\277\212O\231\275\360\n\253\276\216\366\034:\310\201\025>\275P\006\276\362Y\202>\207\304\271=\004\207\014?v\277\240>h\326\017\276JOI\276\2343P\275W\330\334\274v\243;>\322K\260\276\372\221\224\276\262[\210\276\232O\303\276CM\210\2769\304\262\274\344\214\345=Uz\206>\342\n\255>\026\252\352=Q\237\032\277\337\366I\276x\032A>c\264\326\2763\360\205=\300\262\337>\205K\206\276le\004\277\021;\315\275LZ$\276\243,\246>\354k>?\210y\213\274A\021S\277\330\341\213\274?mq\276\246\251K\276\023\356\327>\315j\254\276\215\200\324\276W\2308\276\317\034\313=\267\325\306\275R\321\215\276x\234\205>\302\t\317\275\311\016,>\227^|\276h\350\201\2766EP\276\331a\354>\216[o?P\014\031>\022\314\320\276\244\360??\301\330=\275\302y\027\276v\030\224>\220\205\302>\202\351\022?I\rT=\233\345\230>Ky\\\277\232\n,?\220\216\310>H\3408\277\337S\252>\313\325%=\022s\027=t\357+?\367\177U\277\304\216\200\276\370\276\030>\305\3447?\220\032\365>\324\177\002\276\235\351\363>\244\370\327>&\340\026?\022S5>\310vF\274p\3436=L\260I\275\301\341\025<\330F\211?\3348T?\334\325\224\276\003\001\026\300\365\210\314>\242{\245=Y\010\006\275\250\017\242<\364\001\356\275\016I\035>\261&\033=I3o>"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\357\210\217\277\245M\324\276\244\201\"\277\377Z;?\320O\374\276\330:\335?,;\031@O\023\034\277\250B\346\276E\326\237\276\357\247u\277eUX\277y\237\022?<CJ?\277\240\210??\273K>/7\024?l\377\n\276rT\235?\252\234\206?\336\304B\277\034#\221=\177\017\263>\372s\203\277\204\315+\277G \024\277\3570{?\235\207\303?\r\311A\275w\267\204?\231\333\312\275\021\315,=-?a?\372\200u\277E\370\217?\224x\035?\361\021>?\367\347\311<\251>\233?,1}?C\342\021>\372\351!\277\215l\251?\3663\233?g\343\025\300>\"\212?$z\010?br\233?Mq!>\306\340\220\277\337@\207?\203\237\t?\314\201C=;\177\036?\213\234\035\277\r\324\023?\331\322\003?\230\033\'\276\243e\277>qG\335=\260\271&\300\213\n\262\276\\\341|?\272o\314>\272\352\224?ii\226?L\003\275?\364r\377\276\353\241 \276\276*\005>k\206\263?\005\3433?j\204\233\275\312\362\250>\372\311\274\276\344\001R>\370z\224?L\223G\277*&\214\277\312\236\321\274\314\263E\276P\017\034?I\177\324\277\315\365\240?]\370u\274\254<\000\277\355o#\2773\223\225\277A\314\211?\n\265Q>`\304\337?\236\337\032\276\344\216\003\275J\262\231?\216\267G>@/\207>\177\0321\275\341\250\007\300\266\257\\>{\270&??\331\340>BA\376\276\257\343\002\276_l\027?\031\364\340\276\361\036L\277W\032c?\033\014\210?x\223\256?H\300\373>\304\243\036?\345C\337=\315\320\355;v\255\301\277\223[q\275\201\3473\277D\021\265\276\261\004\336\276\374\213\">\271P\221\277\330\213\t?>\217l>\214\301\251\274\346\013d\275\265\254\240\275P\272\257>e\254j\274i\241+>"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "~D\237\277\337\230\004>\362\034\236\275_\221B\276\304\033r?&\355\260:\'00\277i\033\020\275\3274\315>\305\345\363=\037\364M\276\205\264\264\276n\317T?\022\260\223=\340\232\275\276\266\014\351>\303\344\024?\363 \014\2766\305\245>@\353E\276\340\274\"?j6\\>S\246<>G\345\274>h1b\277\210\263\177\277\036\232\265=1[>>a5\013?f\t\201>\365\017Q\277\227\000\221>_~\206:-l\324\276LJ\226>\371B\215\276f\376\032\277\326vr?!\232A=G\374\027>S4\370>\340U;\276\026\223E>\202\344\370=y\036\013>d\310\235\276S\361\266=\031\313\225=\275\327]\277HC\200\275c5\377<\337j]\277Z5\252=\002p\030\275\367})?j)\307\276SN]>3:\036?\233\032\214\277?\210\t\277\256h\212\277\023\377M\277\361\377\006?YI\203\276\246\211L=k\274Z>\001\213\017?_9x\277\211Z\277\275\214\205\022>\276\201\334\276\007x\\\2769\244\354>\272\233\251>\346\341\320>\016\034\340=\317\223x\276|\013\357>i\320D=\357\r\301>\361.)\276\316<o>\360%R?)\317\037?\t\207\271\276\315{A>\2757\r?\021l\245\275\345zF=\313\326!?\334\255\263\275P\267\023>\350\326\276\276\010\337\224>\211\216\271\276\035\303q\275\326]\005>\226l\000<\371WO>\375\306\024=\235\211\t>If\250>\037\266\200>*\"\201\276\261\311P>f>}\2766\373\004>0\n\031\277\360\241\227?\034u\322\2755P\031\275\377SB?P!H>\006\370\030?l\017\226\276Z\340\362>\206]\361\276\243H\032>\025\355\365\275\020\363\224\276u\372\233>\321`\330>p\271\307>\214n{\277\327y\006?\361\242\373\276\274\r\204>p\355G?\313\362\"?\321\002\374>\327\177\377>\302\037\237>Zp\362\276\332\307\367<\2146\033\277\253\334\234<m\225\311\276\257\313\260\276g\376\371>\212\363\237>\354-\020?\241\377\200>\276\335\037\276\031\314\031?\3148\031={\301O\276\316\034\213\276f\343\336=\3356A\276\203s\262\276\016\024\004?\001\037\223\276g\2742>\035\017R?\3310#?Y*\343>!Z\273>\221|\332>\251\340}=\002\023\031?m#\265>i>+>\204\001.<\033EN=\243\230\265>G\033\243>\237\305\301\276\366\315\374\276 O\263>\350\234\031\276\230\0171=,\354\305:\024>\336>Jsk=\214\311\376=}\354\244\276nW\357\275\217\236\236\276\251b&\277\270\376\013?q .?\033\334\324\275=\224\207?\002c\363\274\025\275*?\017?\206=\3714\257?\007\241\023?\200\271\016\277\342|6>\255\315\310\277\264\277\212\276z\364\301>6S\341>U\306\205\275\347\241\313>^\245\265>\250\227\236>\2516\317\277\302\037R?\037SV\276\341\315\343\276\375\025\215>\221\272\007\277\207\306\321>%p\373>\201-\253\276\270;\254>\246\"z\276\"U\014>\371\002(?\n\336?>\232\"\203=-b\261\275V\230\376>v/\377>\227\232f>%(]=-\306<\276;O\360\275(w\016>\t\226\013?:\350g=^:\253>\323\361\264>\177\306%:N]\247>\020\257(\274\200\000a\276\343\215\312\276\244r\271<\002@->\371o\351\275U\224|\276\"\226\265\276\"\366:?\310\037U\276\2675F=\034\375C>\373\237F\275\324\001\006>\t\215\253>RMZ?[\"L?\201\252\257>\343\317$=\316\272\211>~\355G?\017\334\370\275\234_<?\347a\357>\352Q\217>/\341s\275\266\227N\277`\330?\276\177M\323>\317j\361\276X\224\317\276\213\271(?\310l\326=\317\337G>\236\215\332>\226$R\276\001\250Z?n\006\200>\233f#\277\031bp?\t\337M=\356\3708?\354\265\230>\262\013\210>(\016\265\274\335\221\014>\2229\240>\376uo\276:\377\241\275b\n*\276-\2353\275\215T\003?\006\306w\275\360\206\206=,\327\t>\244\004\261>gdm\275\354i0\276\024T\254<_\377\034=\301\354\377>\264\200Q;\253K\017\275\357\037\177\275>Y\245>\013\370\237\273\t!7\276\205\025\274\275\275\356K?\235.\214\275\001\353\030?\022$\206\276*J\000\277bO\320\275\272FG\276\313\305\027>ox\361>\226\351\"?\265\026<>\241O3>6\252\215\276\244\234\201>\3413\243\276C\024\">a\037\243>\227jq=\272\371<>\017\314\257<\362\014\277\274\003\030\203?p\243A=\t\313==\350w}>\252\017\232<\367\237\303\276\360\336\277>$\343\304>\274\343\221>\253\366\250>\276\202\211\276\205\373\t\276p\276\211>K\336\000?8\224N?\2766\021>\232Z\345\276\372\332\304>\333\0226\276o\333 >\213\270\254\276Rg^>\360v\216>\300\312\215\276e\274\244>B\227m>\313pW>\233\235\326\276\276o\324\276\0319\331>\351\017\322>(\320\014\274o\231+\274\020\364}>n\031\341=(\021Z\276(\010l\276\357a\236>\t\346\016?<\236\215\276\315^\004\275\265m\243>s6*>\032\233w>\375\202\037>\"\035L\276\010DT\276\367\361\277>e\316\000>#\242\337<\270\325\255;F\263\331>|\377!\277G\213\366<\030\226\225=\226J\307\276g\352\005\276\244\346\351=G\324\265>Q\357\206\276\323\321\213\276{\275)?\343{0>\361H\002>\033+\035<K\037\212>o\377\345=\031$\240\274v\251(>\001\223O<)*\325>Hv\'?\244\315\372\276\231\317\323>\241\242\335\276\266[\354=\335W\251=\262\354-\277\240\356=?O^\206>B\231->\225%=?rZ\305:\373/\274\273\337\333:?\246\237\002\277\232uJ<\242\001S\276\031W\023\276_\275.\276\262\325H=\252h\r?\373)\203>z\r\240\2769\232B>\263\314\002?\016\272_>\371\3223?(E\252<:3$=\001\277M>\365\232a\276\014~O>c\220u\276\270c\272>M\266\034>C+\014?\306\321\024=?\316\013>j\372\204<]Fs\276\264\247\007\276*Y\333\2760\246;>O\266A>\020\371\"> O\321>pe\347\275\314\007_\2772\356\226\2777|\033>()\361\276\357\217\210<P\217\366>Y\0248?I\236n>\241\227\203=\033\360S\276\311\311\034>T\211E?b~N=\004\230\245\275\261x\323=\342\021\202\276\213\320:>\035\272S?\026\307\251=f\005\231>}\356\222=\362-\342>\215H\323>,G\273\276\342\276\030?i4\201\276\234\312\223\274\373\264\200\275\307R\031\275\031\253B\272\360K ?\rK\230\276\3430\200>z\021\221\275\373\307\305\276\265\236\275\276\367\3052\276Z\373\377>\270\272f;1b\215\276|\227\017?h4\272>-=\201>\343 \377>\374a9\275h\026\230\2769\211\234>\301\273\374\276\000\\Y\275\262f\307>\374~\310>y\257\003\277\370K\306\275+\344F\276\023\001\"\276~\240\300\276c\260\026?\206og?\214\2144\277\\\000i? @\252>K\212\333>\251P\243>\235L\335>\257\357\314\276\366_\220=\306\035\353>\375^\261=\334C\024>\237\221\252>\247_?>\014\224K\276q\330\332>\350\3751?\252\323\225>J\372\272>\272\366\360>\303\274)\276\310\253!?\212b\210\276 \210\363=\020i\311=+\245\261\274\302\013\217>|\002\210>\275=D\27602U>\002@;\276t\225\212>\335vb>\006\277c\276\204x\305>\342\214\302\275S\026%>\010\365\003>\307}\244\276@\331\n=9\362l>8]a<K\024\362=\220T\373=}\373\005?\244\316\311>j\322\013>\242\212\372>\213\227\212\275NT\230\276\0334/>{\311\003\277\224:\014\277\326\350\021\277\033\314\361\2762>V= 2H\275\2514&>.X\035\276\344N\203>\363\355\211\275c\036\225\276\351\373\230<\n0\330=\242\231:=x\310$\276\306\203\260>r\203\232\276\'\322\027?\320Ne\276G\343\262\276y\001\263\275+\256O\277\230,\"\275\177[1\276\023i\346\274\336\351Y?\034\036e=q\353\014\277\036\\\255\276\337e\311\276\342$\022\277\203$\350>\237\244\227\277\213\t)?"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\373~\336=_[\264>\032\244\327\275\352z->%\003\375>\245\004\342>\263o\362=\347 \336\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\315\344S\27792o<y:\315=\330\006t>&\"\226=w\313U?\250\037\031?\221\372\035\277z\230\314\276\233\025\022\277\313~2\276\236\"\317\276\327\200[\276O\253\252\276\006y\213\276}\366\037\276\ts\271\276^\":>\\\236\244>@\346\357=\327P\212\276\314\345\307>\337\232\305\276\376?\223\276e\201\013\277\312L\352>\205\032a>K\321\224\276\026\004\322=\264\312\231\275\275\366\323>\024\020\224>\2677!\276\353p\301>\005C\265\276T\345\037\277I\337\"\276\320\372\243\275m\005o\276\3748q?\252]\321=\252\013\256\276\200\274\t\277+\231\002\276\023\326\226\273\003v\204\276\177\265\203>{\276\'?\246~\254\275\355\360\312\276\017\354.\276b\017\213\276?z\347=/\2229=\370\331\307\276\260\230\013>Cb\025=\223\231\373=\3570\221=Q\372c\275\254@#\277\365\374\203\276\2557\237>\325\241\335\275\027=\254>\232\006I=4?\347\276\241V7\276\264\332\201\276\374<\200\276\343;\257>\241\221\016?"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.1660291999578476
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
