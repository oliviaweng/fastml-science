node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "Y \310\276^\273\227\275%\321j>\260\357S\275p\000\217\277\017\333\003\274|\'F?\365J\204\276B~P\276\320x\225>\027\010\277<\205\014\013>p\025^>\273\255\276>aFq\276\233\034\212\275\021\'\034>\270\3003>\005\017\301\276B\'x\276\243\244\263=\037\3234\276`\263\005>\244\225)>\006\311\225<t\023\023\277\037pM>y\274\r\276\206\005>>Nh\214\275\010m\365=\257\327W\276\341\264\214\275\236j\022\277Z\213:\276b\211\236?\221\261\231>Gz\330>\277\005\004\275\222\321G\276\003\242[\276\301\272\036\276\240\356,\276}@\243\276\240F1\277\017\263\306>\362\346\324\275\006\025\252>t;\025\276\347C\354>\334\224\014\276[\276\021>|\252\306\2750\327o>\245\327\037\277\354\277\032?\r\214(?\"\363\016>\376N\340=\n\236a>}\177\253?\3205\351\275tC\331>t\262\376\276\252\272\201>\177)(\300{3\224\276\001\252\205\275>\333\007\27788\342>c\033 \276\312QQ=i6\004>5\305\265=\036\272W>\250\347\241\276\037\031\014>\242(\375\276\211a\264<y\002\206\274\362y\n\277\005\233\265>\223\244\347=\235_\237=u8;\276Z\310\374>\357\037%\277$r\013\277:\'\033\275IG\245:\304\374i>\004\004\177?\277\245\017@o\206\247>H\365\227>\300\271R=\210\177\325>\2257\240\275N\212\024\276\373\003+\276<\212D?\346\236\262<\261\020\322=\204\216c?M\020\023?\257\346\234\274\254\301P>o\330\315>1\322X=!\245t>\021w\213?T\323\331=\275B\224\277m\3728\277:.Y?|\014j?\331\302Z\276Y\331\343>B\006#\275\250\2773>\314\224\323=H\332\307<,\267%>@\204\316\274L\243\t=#@P\276\366*9\276\240o\020>\374\206\027?*Eb>/\275\202\276\2034\340>|*p>*\256/>W\341->\0004\247>\244\352\217\275\010\357\024>\300\326\177;\3275\361\276\232Z\264>\333\031:\275\006}\243=1\232\307>\245\323\302\276\030c\300>0\274\276\276\235\363\262>\331 \361\276\257$\027\275\201RP\276\202w\007\2778\023\322>\034`\372>ku]\276\316\226\013\273\273z\330>\022o\376\276x\302\326>{K(\276#\204\235=\232z\250>\024k\336=\264<T\276n\n\217\2766X7\275e~I\276#\233)?\244\314\370>W\330\024\275\003=\247=\016\270\026=\362\327\352\274\266\233\255>\376\266>\2765&\363=\376\352\231\276\221\263\251>\010\231\t\2766$\265\274\312\3054\276\246\226\204>\224\030\263=p\326\355>\212\371\r?u\355\033?QP\226>\300r\241>F\221\000\277Z\316\036?\253r\\>\303\217\256\276\336b<\277Ge%?\222\300\265\276\376\263\327=\177*\021\276\246z\251>[2\310;9\346\322>\310\223\370\276\377\241\177\276\031p\005>>\353#\275\372\002V;e\255\260>m\272\202=\250\3179\277\342\301G\277\025}\252\276\000(k\275\002@7>L\247\t\275\361\275\022?DBx\276\301\213\240>p\0279\275W\272\252\276\2644\256=\343\t\227?\335\305\023@i\343\233>~e\200\276\371\307c\276~\377|>\000mg?\210x\005>\003\364\226=\207Q\035\277H\030\320\276\257\204D\276]D\024\277\352\201\233>\350\225\212=3\006\367=\231\000\341\275\231\036\205<O\317\324<l\3548>\3349\003?cT[\276\227G\021?\353x\204>\002r\351>\306k\360\275\336\323\220\276\304\037\\\2762L6?\310\341\030>P~i<\370\026\251<\242\260\010\276,\\\242=l\006\213=\360+\344=p\352\361\274\\`\213>\035\303!>\027\026x\277z.6\275Tr`>\370\354_\275\nZV\275\002Dz\275\236\247\2659ld\336=6\316=>r\201M>\370.>=\227\227\357>2\034t\276s`\262>\267\004\264>\206m\361>\'\322\225\277fo\243\276E\023\375=\223o\014\276\270\226{\275$\203/\276K?\313\277v\257\261=\333\337\226\275[(\246\276\230\254%?\035\037\214?\031\366y=\366;i\277\007\322\303\275\2608\001\276\371jK\276<\262\205\274\332(|>\255;\232=\026\363\003\274|t\356=\017|k\275D\306\335>wb\260\275\37114\276\270\362\206>\253a\232=\231m\370\272\342\201\021\276\241A4\276C\233\226>\225\357\275>\373(\237\275\316\210\177\273X\213\361>\206\254q>\240a*\277\t^\360?\n\026l\276\335\232\000=\272s\373=\267K\030?R\330\346\277\232\303\177?\337\030\315>\024\365\005>\027L\216>\304fz>\n\370O?,+\027?97\n\276\357\032\352>\002\014[\275\333\032}?M\023\211>\336\335\204<G\207\004?3\002\013\276\370\240\272>\360\350\365>\267m\006>\326[\257\275\3449^\276\007on<<\324c\276\272\270\360=\014q_\275\r=1?\032\236&\277nNH\274\345\300\245\276\325\026\371>\255\356\356?e+\236\300\323\233\177?q\356\320?W\330\243=1\275\242\276\361\303\255>\310\336\020>\246\234\035@82\265\275\021\007\361>CG\207<\310#`\276\254\224\243\274q*p?\310\001\371=W\260\343\275\363PJ=\036\021\207?D\3374\277ri\336\275\000#\265?l=\220\275\317\276\315>\244\267M\276\316\262\271\275\357\372S\277\253\006\317>\352%L>\260\003\211<\240\001\332;P\313w=d\237\204=\312fD>\234\312\r\276N9O>\037\375=\276Ra\324>v\374\231\274\233k\\\277usV\274\216\363\234>\3421W\274`Ok>:\n\240<E\315\001\276su\001=\200DD<\206\325\360\275\222\352\027?`\335\037\276\357f\354=\217\261\272\274\210\345P\276\346\r\350\275P\342\246>Z\377\250\276r\2257>\367\357\317\275\371.\035\276@\227\344<\201e\272?;\002\205\276\226\2132>\316u\001\274d\260G\274q@7=\214\354\211=\274Yb>\3618g\276\272\030C\277^\373E?F\001\234=\031eO>\251u\020?Bd\261\273\312E\033\277\304`Y>F\2758>\260\352z\276\307st\276\214\030\207=\241\372N>E\231O\276\032\332\027\275\207\2375>jJ\021\276c\221\224>\312\314\224>X\213\262\275\002\315\302\275\215\376X?\234\343c>\212#\325>W\240\236>\314\307r=.\343t>Q?\354\277\261k/\276\345\354\376;\275H\204\276D\255\246>\237\324d?\037N\206?\277\363\226?\255\001\344=\224\r^=\016\351\234>\323;\237\276\276\242R?\000\276\226>\351#Y\275r\250\310=%\245u\276\206\032\240\275~\367\206\276\223p\025=\245\243\254\276\211>\305>\207\036\331\275\263{{=\271\223\340=\350\177\347\276\356w|>\334J\230=\313\222Z\276\202p2?t\335\261>\330j\237\277\226~\302\300\300%p\276\310\031\333>TM\346=z\237:=ll\365\276n\264\263\275q\231\265\2777>\212>L\022\271=\213\364\366=\330S]\277\376\351V\300\356N\262\276\215Ji\276\r\204\253\276g9\001\276\263?\222>1\272\222\277L\274\016\277z\313c?i\266\253>I\263\030\276\"\355\211>$r\001\276\234TO\276\3020\353\276\274=\255>@\210\034><\274\241=\304\031\225\275\000\363\340=\256\034\026>\\\252\270=\260\356z\275\360\263\224=g\002\014>\301\356\250\276L\305\277>\020&\372;D\335\022?\322\354\242>\301\334\224\276\355\230\275>h\266\362>\245\261~>\240)!>\252\017\3378\270\003\001?\003\232\034<\210\003+\276\003\331\310>.\325?\276\276\333\343=\365\024\344>\020,\361=\026\221\271<\324\023\246=\256hS\27683#\275\2036\201>\271V%>m\007\270>)\365j>\216\030\316=A,\274\276\222\2158>\242\211g>\2569J>*\350\003>F\201\364>\351er=~N\256>`9\377<\322\2436\276\353\373\027?\217B\273\274\307\207\013\275\265\234\241=\364\274\231>\317B\213=\347\221\"\276.\3273\2763\350y=\"\230\241=\264\333\353\275\336\353\305>A\277\344>\n\324p\276s\307*\276W\256W\276J\243\226>\346o\032\276\230[\366=\324\2422>jC\177?\314u\267\277\327\014E?Q\n\204<\246m\014\277\026\237\251>\322\007y\277\347\017\352\275\202\275h\273\354\326\030>\276\303\010\276U\216z>\214v\255>\n\256h\276I\276\330>\365\3607=`F\340=\312FD>\326{\330=\242\214\004?\263%\276>\001PZ?^\341D=\326\247\217<1\034T?\237\364\205\276\322\010\374>.\277G>L\363,=t\316\275\275\324\357\265=\212H\247>\000>2\277N#f\300d*\036=\323\347\006\277\350H\027\276\331p\237>\026\305R>\221/5>\007[\001\277j\367\t>g#\207>F\250f\276\273\356\\?\355v!?\242\346.?\026R\236>\246\313\343>%\246U\274\210i\265>WR\244>\013\t\234<\364\375\033=q\r\202=\216\276\263>7\231\r\276\n94\276\035\317\374>\225\205\211>\210\274o>\336s\037\276\260\n\247<\214\375\021=\246\346\022\276JO\034\2760\200\022\275\274\0308\276\026\271.\276l\342]?`\325\210\272\271\211L@`T\317>\030IH\277\312v@?\211\317\302>\013\212\375\276\216\255\215\276\311\360\345>\313\253\324>A\027\367>[R\177\277\311:\203>\314\356\005\276\372s1>\272\330\304\275\362\006\360=Nma?\374\023\005=4zV>\307\261\321\276\250\376k\275\235\344r>\223R\351?\261<>>\217\356I>\274\330*\276\224oR\276D\360\253?\035\304\221>\274\024*\274\361a\361<K\363\035?vt\304\277\274\3171>\223D\t\276<\\&>_%&=\357\362\247>\233\346\242=\235\034\335>\330%\220>\225\007\242\276`\305;==\342\273\276CH\016\275\262\271\370<\317\007\310\275_\273\317>j=W>\245e\t=0v\311\274\331\265\023?\325o\315>\036j\363\276\273\270\237=#\307\022?GP\320\275J\3128\277b\266v\2779\264\206\277Ik\273>g\361g?+\236<=No\215\277\275D\217\276\223m0\275w\304\263>]$@\275\3778a\274ia\027\276\364\237\371\276\023\232\307>\222_[>4\023\230<t\352\000\275t\037\315>\334+Z\277t\023q;h\n\237\276,\223\304<\277\234\306=\270\262\212=\223\321\'\275\213\360\202<Gg\025?\270$\330\275\200S/\276\221\345\037\2777G7?\344o\275?\240^b\301\321\350\360>\014\367\355>\\\374\357=\003\272\232\274\224:<?\010\213\234=L\"4\300\263\270\200>\217}\314>\331\325\007>\201\225\276\276\013\274\254\275\002\265\262>\rE\263\275\246V\316\275r\033\357\273]\347\'?\365j%\277|\244\264\276\014\265\217?\310\326\310>z\351\331>\356\340\253\276\'ui\275K\221f\275\340\377\212>|\217\205>\212@\026>4\233O>\306L/>9\235&\276\331\325\254\275t\306n\275p\\\321=\010\223\236=\213\201\261\276\315\347\261\275\244\305o?\232tJ\276\255]\177>V\000+\277\261SU\276\324q1\276<M\355>\313\361\246<O-\037>\"\270\231=\335fX\276\225\333\242>AB\026\2766;E\276H0\221\276\360\216\301\2764\3566\277\202\000!\276\250=\013>X\243*>\252\341R<\214?\010?\222Z\t?\341 \035?\346L\037?\202\340\022?;\351\001?w\305\222?\326\221\274\274|\304)?!W\255=\204\310]\277\0350\310=\213\272B\275\362\255\303<j0\323\274\000\261H\2748\371(?bH\030\276\313\303S\275{\342\227>r\265\240\276L\214\227>y\341\024?I\232\260\275A\022\365>\237\364\326=X-\260>\253\302\314=\305*7\276\231\221t\276\026\206\202\275\266\311\343>1A\017?FU\344>\327g\267?\255\201\333>\354<\024?W\337/?dD8>#p\003\276\373\351\314\274\030\307~>\310\022\014\300\303\362\006\275\022$\221>\036\317\220\276m\002\035?\247^\210\277\355\365\'\276\024\346\265\275M\207=\276\361^\002\275\216\335\236>\277\275m?\022%{>\256\355\030>{\230I\276\314e\254\277<Q\003>\243\305\261\275C\326)>\332+e=\240\214U=@\276|\275b\351d>\240\311\353\275\t\271\353?\334\017\305>>Z\227?^\215\273@1\2243>\202\301\010@\324\254\006>\034\216P\276\352\344\374\275 \346\203\275\222jh>\013\034\001\275AK\352=]qK\276\014\367\243\276l\266t\276\360\013\262>\364\346\316=\262e\315>.\353\246\275\014\240\016\277\231S\247>\203O\032?{\365\352\275b\266[?\277~\335>B\331\034?\331}\211;?9\267>K\233\007\277\275D\001>(3\027\276\204\027\004>\020\022E>\007E\341\275B/\243\275s\207\004\276^\372E\276H\2433\276\333\263\226\276\035\303\313=:\"\r\276;\307I>\375&\300>q\266\351=?\033\336\275sH \277<7R\276\271yh>\021*\317>\3547\330=\323c\234=y\016\215;3\246\024\276\256\330\302\276\334\024,?w\177\271>\tx\034=\311Z\215?H\317\014?\224m\271>\267W>\276\376(\023=\226B\006?\325r\336\274W\214\332\276\343\347\325\276\277&\237\276\010\310\262>Z\314\314\276\264Y7\277_\001\204>\374\374\241\276\335\253\247<X\214v\276\375-\235\276\003>\010>/p\214\275)\251\003\277tF\271\276\203\324!\276:\345\267\2741A\353>\\@\230\274\372\273\271>PR8\275|K&>Yv\277>\306V\017?\236\211\345\276(\213Z\2769\002\376\275\253_\373=\2031\000\277\177\021\375\276\006\021\"\277e\221\343\277\365!1?*{n>\032#\300>\246\302\030?\363\305\261\275\254\n|>F\037\364\275,\317\227>\236(\r=m5\226>yQ\373\276u\010\220>\030\256\'\275\037\200 ?\020\000_>#s\223=\010\"\023\276\2760\241\273\364{^>\365\236\320\275FzF>\335\232\243>\333\320\240?`%t;b\274\257\275if~>\204\216\240\275\2634>\277|\020\210\276Y\210\027\277\264\275\303=Z\032\036>\243\310W;\266\033\213?C\333I@,\320,>z\242\'\300\230kk\276\356\032N=\373cW?\305Ny>\007\364N\276\226\212T\276-s\210\275\200\355 \276_#\255\277/u%>\324\\\217\276\021\315\005\276\243d@=DKu;RG\243>\216}q\276\300\035\235>\330\215\021\277$\306\261\276P\275\326\276\215|\335>\224\247C\276\021\021\035?\366\275C>(n\330>\274\336\306=\200\312A>\000\206\273=\300Ic=\374Q\">\034\233.\276\240\267\273=:h\">\364X\343\275\245\277\275\275zm\032@sr\203>a}\020\276\270\320L?\235\312\237\276[\320\377\276\247\243!\275\364+\026?\206\257\356>\217|\375>\364\344\330\276y\367\313>\316\020)\276\374\363\025?)\273I>^O\377=J#\241\276\301d\253>\346Qa>,\275Q>\237J\'\275\303\"\235\276\324\262\341\277aA\201>\265B\323\275\014-J\275\255w\350>\201\216\252>?\374G=\036R\207\276o-\000>\031\216\366=\273\373\031\277\003C\327\276:D\345\275\035\263\303=\003\371\312\275K\207S\2762\227\303\276g\032\277>\343!\306=\331\325\002?\306\243\234\276\243i\221=\233\2653\276\214\307\250>\010\031\350=\3642[>C\226\366\275|+\210>\360\276\341=\341k\001>\242\216\n\277^y\261>.R{\276\305r\264\276J\331m\276\275\376\234>GR\335?\243\204\222\276\333\304\021\275B\030!\277\001\260x=\246\366\320\276cx\211?d A?\227\236K\277\312\313V=a\024\303=9\017\013\276\217*\351\277\301\317\t\276\033\321\016\276\314\364\216\275,\330\205=\321\2501>~\276n>+\325\216\275\016\300f\276\234\250\324>\033\037\311<\207\305\261\276\3471\217\275w\336U\276\371\346\347\276\303\025\347\275\200\200\022\276Y>\214>\377\243\271\2750\344;\277\035J\266?\230\200\027\275\301\203S\277o\215b\276\370\345n?$\261s\2762/\215>$\240Y@\\\003U\277s\035z\276\223\260\"\276\273I\212\276\203\201\002\300\302\232\035\277M\016\376\274\344\222\247\275%\243r\275p\'\201\277&\002\201?\312\343\t\276 \324\253\275q\377\035\275\362\037\321>\005{P>l\006\014>C\332N>\022\266\220\277\036\032S\276\204a\023\276py!\2758:\272\274\204\034\236=\346\325\010\276\310h)=\220\013\241<\302R\316\275/\377\001\277\"\247\013?=\346s\300\305R=\276T\302==\377\364!\276\256\202\006\277\235KX>o\005N>\003\301\277\276\000\325\252\275\276\371\205=\304u\272<\005\302\376>\017\240:\275\006\036\310=m\265\310<{\210\324\276\364eh\276D8X\276\317`\017\276Pf\375=\377b2=V-?>(d,@|\r\253\275\267\200\237>\250\226\201\275\001:#>\22522\277b0\003\276\233~D\275S\213G\276O\361\265=h!\310\276-E\225\275\315h\351<\307\365\020\277\202Y\252=}\215\177>\331\245\330\276\244z\'\276\265\266\200\276\377\224\331\275\334\360,\275_\202#\276\241\253*\276\207X\027\276\252\310\315\274\376\3239\276,\204\330=9y\235=\205_\204=\235\205\353\273\200\216B>\0061\242=/r\223?:\335\235>\r\025\024=\3771E?\307\376\207>8g\371>e;\322>\206\234W>\377\2135>\3311`\277}\275T\273\302+\317\276_4\377\275\211\235\266\276:v\020\277zO\223\276\313\350\317\277\354\377\260\274\305x\301\276\177\236z\276!\322\245>L\\\000\275\372\275\204\277i)\000\275\347\334?>\362\035,=\000\270\216\272\306\253\267\276\366\331?\276^\202`\276\230*\"\275*7&\276\2327\036>vY\204>\302,\027>@\332t\276\302Z\203\300_\234\364=\363\036\253>a\261\205\274\336\264\r>\301\366\342\276\355\311_\276\033\345I\300\200\341\351\276\025\'x\276\260\333V\276\204\366\223>\315\241\235\277\245A\224\276\177%\211\276i\245\330\275#Z\233\275\302:A\277`G%?n\257\327\276J\3511>\265\264\215>j\246\031\275\322\030X=\360\371\020=\353q\177\2759\226\247\276E\003\025\277\206\246%\276\000\200\001=p\367\320<\366\315-\276\014\017(>\264`\211\275\021u?\276\t\031\365\275,+6=\024\026\367\276 \0171@N\024\267\275.\237\231>\322\256\212\276\204UX=\224\207\201=\336\340W=\223\342\306=\206g\276\275\'\234\206\275\251\013i=\021\t\355\276\361}\344\274`8\013\276\275\202m=\2142\317>M\311\257\276f\032\001\27583\214=\325\277\323\275NL!\275\233\202)\275\014i\177\300\362\361Q>SG\271\276V!o>\247\002\r\273\200jM>\004m\205\275\330\224D\275M(\010>\256\305>\274\2178\001?\274\226\260>e4\265\276\257\316\265=U b<\215\301\372=\331^o>\367\247\343\274@S\217=x\302\333>\266\276&=\266\322\033>\306\266\004\275\312U\005\276(\217e=\324\231s\276\344\220\244=O\004\261=\023\367\207\276\373\273\275\276{gJ\276\276\266m>\273c\266\277\266\177\211\277\244\007\036\276W\243!\277\267\306\005=\305\020C\277M\264\'\277\373\302d\277a\373\256<r}\270\300H\273C\277\365h\324\276\027<\245=\270\270\2107Ew.\277\030=K>$V\325>-[\274=E\312(>%u*\275\367v\237>\213\255!\275\336]G\277\374\341\204>\324e\033>\037\251\224\274(\233\002\275\276/\237>\375\340y\275.1\226\276\225J\215\274\241Z\333>\027\031!\275V\374\013\275I\213\274\276vX\225\277\275\004\017>\207E\303\276\004\227\210\275\233.7=\330k\231\276\363\003|>\211s6\276\232\374\327\300\376P4?M\317\013<GE\017=\240\035\"\277y\372\352\275\022\245\203\275\241F\225\275\2330\303\275\251=\014=\023\223\341>\211\275f\277b\327.\276\261\025\t\277\236\347\270>\031%\335\275\245\016V>w\2066\274\343\271#>\222\214\326>[\237\034\275\366\333\'\276\317\202\014\276\000\317\235\2758%\014=\310\263\207\274\350\315*\276\322!?>\004r\003=U\211\\>\034\262\331>\331t\017\277n4\343>\223\254\242\275?.\263\276\264?\206>\366\010^\276\245s\344\276~\030\246=\270\025$=\030\030\322\274\236\267\374\276^%\242\275\367\262\243=;\364\017\276\027\261\361<\327\362;\276[\266\210\276\351\3604\277_:]?\262\220\252>\327\247\332\275w\250;?\221\370\306\274\367/\001\277?s\321\276^\260\247=C\313\240\276\237\221\327\275\266<D\276\245?\037?\220\247\300\276\307\231\324>\263\274\252\276\274G\374>L\023}\277j\322\236\276\245\253n\276\"\365I\276W+\024?x\014\305\274\264\207\273:\021~\237>\374\361\001>\270\r\031>E\231O:\353\2323\277\224Y\372>\005\247\221\276\252|\322>\253\2360\276\210<\022=\334J\251\2760\336\272\276\257J\222\275\330)\242>E(M?\3756\336=/\267\233\276\357Y\301\276\033_\263\276aH\027\276I=\007>\263\031\360\276=x6?\220\031\241\275\324\272\346>Q\241\025>\354\207G\272.\3273\276\355\357\361\276/\350e<e\217=>\032\340\367=\276\177\333>\001U\346=(;$\276\375p\225>x\330A\274\305\206\230?\357Q\321\275\213\341\035\276^\"t?x\0162\276cI,?\321g\226\275J\301/?\013\344\t\276\374\374_?\211\366(\276\376\277\272\277^\342\231\300Q\326\255\276)N\243?JN\035>\311\211\210\275\014B\273\276xc\337>B l?\266\332->\242N\037\276\217\023\214\274r\302\024\276\035X\245>.\377H\277\036*\233>\202\252\315\275\"}\321:n`\212\276\330\301F\276\177\372\274\276w\014\255\277\331\224\220=\026\346:\277\210\026\207\277N6\200;\035}\020<{Y7\276\314nR\277l\003=\275\030E\354=\001\203\024\2764f\204\275\344\003\003\275\254\177\236\2750\215\006\276^\307-\276\220\007h\277\234H\206>\020\222\003?\262\240\334>\250\203\005?iQ\226>b\254\023?\304\326\243>\022\203\243\275\007\370\355<\221\310?\276+.-\276\003\315z=Z\262\335>.\276J\275\250\214X=\006\270\335>\216\372q\275\330\2316\277[W\304>\036\262P>\357\002f?=x\372\274\014\037\255\275\032\353\227?\017\307\034\277\366r\237>\236\214\023\276\200\353\234>\247\247\325=7c\r?\244\244B>L\371\342>S\002\235?\276\277\244>\264\231\345=\260\010\217>gwA\277\210\256\365\2752\2043\275\326\027\372\275\350*\031\277c\266\205>TR\366>\231\235\007>\321q\204\273\367\230z=\246\207`\276\203\370\352\276\360M\t?j\251\223\277\254\232\355\276\334\225i\275,\266\n?\373\357v>\246\3721\277di\016\277\301\037\231?\2065\207>\231s*?Nr\016\275\033\327\320=F|\033>\3530\004@\374\253V\275\213\303\237?\324\222!>`\2612>\207f\250>\343\004Y\275\024\2045>\334\212\227\276\253{\270>\364\316\022=4/l\275O\323_>\271\222\207\276\231\331\231>\367V\346\276z\023\262\275\263x\273\277g\013\253\275I}!\276\320:\275\276\204\'\010>=\373\204\276\331\243]>\306\221\340<A\255F\276\330\270\232?g\321Y\275\261\037!@~,\205@\321\216\327>\007Y \277\334\226I\276\225\266\320=Vg\r\276\3379\243\275s\010\'\277\023\254\033?\321\022\261\275\210y\262=\307G\222\276h\031\213\2731Z\224\276ijg\276v\020H\276\366\336z\275\236\301g=\253\0100\277\222n>=}\022\002?\366\371v>W ~\276\320\233V\276`\273\025=\345\216\327\275\323W\332=\216\r\334\275\230B\t=\220\010*=\307>J\2768b\241<&\357>>\000t\'>x\217\302\275\016{/>\3557\235=\\\201\217\275\246\210\240\275\241@\321=t\177\006?\t\301\204>O\000x\276\373\207W>\325\325V>8}\212>\351f\250>\264>\351=b\356\273>:S\251=m\275\370\275\327\002I>\361\025\036>\262Jo\275[\350y>\251\263\226>8\201\232\275\344\371\260>\272\231\234=0\026w\276\367E\233=\002\307\356<X1\377>\324\230N;7A\027>\207TB\276\272-\020=v\211\331\275\3238\306=\034\366\246>\271\246\335>\n\352\263=Z\344E>\365s(\275\215e\205=g;\235>4P\231\275\366w\020>\025\036\006\276\347L\235>\360;\326=\311d\013\276\204\000\350<\371\216\375=E\256i=|\3610>X\215\032=2\275\352>\036|\005>A\252\022\276;Z.\277/o\275>Z\021\320<\361GN>\003\225L>,:\025?\256\225\027\277\211u\010?\376\214\026\276[\357\\\276t\204?>\227b\242\276\347\237_=af\212=A*\007>\177:D=^\331P>}I\345=\2760~\276\266\244\374>%\271\005=\213\361(>X\266/=}\214\004>SEe\276\255\302\215>\014{\026?D\354\206<\236\307\020\276&\312\233>\224;\034\276\033nI=\376&\332\275\017\260%\275E\005\006\276\177\006!?\214y\361>/\341\\\277\274\277\025\300k\031\205\275\0255A\277\253\315\311\275\341\274\323>Uf\331>\330D\016>\316\004\316<z[m=\204\326\025\276\267\3249\276\202\224\001?\263\246\310>{\365\344>\026IO>\364\021\315>?%\026\276{\004\355>\247\340\367=\372\010\224=\326\353Y\276i\023\214\276\257\353\362>\352\275\023\2757&\341\274\301\304\236=^\302Q>\220JV>@\200A\276\272\232\005\276\320\310i<\270\027\200<\272=9>bz\017>\350Y\037\276\270\222\220=\371\224\255>\362\235G?\014<\036\300\303Y\207>\342\264\013\277\0342\207\275\036\331\030?%\366\277\275J\034s\276\024\016\341=\206\267\215\276\242\006\226>d\243k\275\352\237\263=\307\3566\275B\005F\277\273\374w\276yu\274\275V}\307>\336\355\274><N_>\311\256g\275\241\026\227\275\345\345\244>\336\261\202\277=^\017>R\\\225>Z\274\n?\344XT\276\320\347\301>\370\273\202=\334\370p?Wh\037\276\200\034\276=\215\364\337\276\343]\323=$\227\237>\360\202G\275\324-\362\275\241aN>\"{\'\275\210\322\\\276\214\376\251=ku\247\276m\312{>\014u\237=\230\344k\275j\260K?E[\310\276\204\242\321>\224\265|\277_+\242\276\264\246\215\275?\272\233\275\367\023\005\277\257\\g>\252\257\024\300q\210\017\277\034\342\327\275\346\227\351\276\217\3701\277\213\264}>\341\216u\277Kq\036> <\233>\'\3412?G\273\245>$;\314>\214\204\326>\333\300\267>\330g#?C\023\022\2768\273\261>6A\242>\333\245\r\275\270\375U>\264\217\352\275\017.\356>t\253\002?\221-\266=\303Nm\277-\345_\276\323}\316\275\326}\033\276bf\013>e\204\n\277=\262\317>\021\230\223=$%|=\355\277{>O;\220\276v*1?\0373\377?\023\237\354\276kP1\276\025L9\276m,\220=\261\315\t?(\351\024\275\332\253:@\345c\254\276\210\274\231>1\234\001\276D\233~\276\235\253\276\274\367\320\374>\344\277\375=\r\212\316=\211<-\276\335\370\243>\2175\352\276_#\241=\005_\275?\275\313\205>\245C\250=\377\000\356=\256\021\242\274+1\364\274\"\270\277=\344/(?\202f \276\3263\226\275\214\252\306=\270\266\003\276\354_\034>\234\265#>\334\337!>\320\346\266\274\032\n\233\276n\216\227>\246\342\246\277tW\204\276\241\315\223\276\261{\275>\035\241\253\276\342\224^>\027\373\216>\204\317\211>\031\035#\276\033\007\342=\023\346y>%\220Y\276\247\202\304=\306;p>0\224\240>\250\337D\276\325\216G?\0332\334>~\010\217\275\342R!?\014\207\213=o\335S\277\330\235p>\315\213h>o\215t\276\310\367\323\276\332\341\214=\265\024\233?\343\266K?8\227\326\276>\327\272=mE\007\2754\231/\275\313_\324\274s&\304\276\016\r\240>\264\261\334=\013?\312\276\007\224\'\275!\212%?\220\222]\276\245\024\034>\243\215\200=GZ\353\275\371{=\276\331\364B=\010\037\023?*m\241\276\226\271\333=\017E\234>\335\276\270=\343(\177>\223\263B\276ef\224\276\303\364\242\277qA\233?0\312\370\275TN#\277\233\266\302>Y\221\202\277\213R\024\275\367-\013\277\024\226\326=\030bP?\020\233\020\272\275\257b\276\252~B\277\245\363=>\351\367\315\276\371\374y>\321\341\013?,\244\275\276\377\303\r?\342U\242\274\277\tM\276]pm\276\356\n3>/3\267\2750x\317\277\346\246T>^\336\362\275\221W\234\275\322\200\373\274l4\217>\247\0330\277\242O\334>x\372;\276\r\317#?\"L\014?O\231\315\277:\216K@\263\025\032\276\017\032\252\277\303\327e\276\014\213F>\262\003\007\277\341\237\263>[D\007@Y\204\336?H\320\247\275x#-\276\343%\234\275\3111H?\312E\243\276\305\225Y=s\327\221>[F\213\275#C\030\276\303\265\005\277Oz\020?XM\343\277\276\217\001>*[\233\277\202\270\r\276qX\312<\267.\250>\n\277\336\275\220\306\333=o3\035\276\220,u=\210N\001>*`A>\240lt\275\220A\003>p\t\035\276N\3610\276"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "5\237\004\276\213\020\343\276I\331\010\300\364\001\214\276(\337\311>\n\271\255>\204ec\276q\035F>\317C\001?\306\200\352\274\026Hr>(s\213\275\030^\004?1\222\201\276\242\010\327\2745\354\257>j\214f\275\246a\345\275\253#\354>\247\307\272>\232\260p=`\253\257\274I\241/\275\242tU\275\030\340d\300f\322\212?\250Y\036?7\334X=]\375\021\274\341\241\037\277\236~\325=\207)%>\322\251\273>N\031j>\3516Q>3!\365\273\272)\306>\245\271\243>\264\246\316\274\030\031\302>\214\235\334\275 \345\250=kc\000>\233\373\202>\332?V=\226\214L\276\257\025>\274-Pz>Ie\256>\000\267 \276\035\356\240>\tL\313>1M\360\274\026\263_\276\2547\227\276]\310T?\334\253\2429t\"\303\276\026w\214>\310dJ?\325\361\314\277_T\021>B\024s\275Z=\032\275\254\330X=\037\231S\277\\\322\177\274\230\310\233\275\313\346\t>\306\261\233\276\271\220\033\276+C\212>sDX?0`\230=\354\270\243>s\"G>\\T-\276i\245\377>\300\330\332\276\r\014\022?\337\226\204>\2013\000<\370\315\312<\332\356e?\263.U\275\001\224\013?\366\344\253>\306\262\\=\2035\235\274\306\213P>\331[\237>\353b\353\276\025\213h\300j\003\200\276/\343\030\277\343\266\016\275\250\001\374=C)\n\277\221\261\237>Q\025H\276{l\273\276d^r?\302O\334\274\200O@?Rj\001?W\366D?\225\234\004?\034:\021?\017\'\001\275\200g\213\276t\255\223>x({>v\302\267;}X\t\274\200W ?\350Q\357\274z_\007\275\021\202\334>\322r\225>\377\230\362>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "c\204Z\275\014\256\020>\376\020d>\324$\211>i~\261=\331k\222\274]\376\221?\222\326\344>\347?\335=zB\000\275\202\337z>E\177M>\203\257\200=]L\352>$\271\327\276\253\037\272>\355\253\005\277+\276u?\270\222:<l\230\266\276\203W\227>\247\255\024=\213\362.\277`\233\233\2769\231\n?\n\203b\276\222\3024>!\226N\276\3635o\277\272vE?\311bE?\326-\245\274c\235\324=\376\376S;\"\336\n\276\2077a>5\373\373>E\\!?\276N\331>\350\321\204?t\306\014>\003\203\270=\306\"\372\275\211\344p=\323\245\n\276\277\256\027?a*\204>\243C\020\276F\267(<\370\016\227:\025\277\207=j\326\347>!\243W\275l\201\325>\364\366{\276\244h`>A\345\273<b\227\006?VL\353\276\326\324\230\276\227\024\242>\224_\031<t\364\031\277\261\360\234>\227\r\274>\254\306p\275\236\"\273>\020Ee<\016\355\220=(zz>\035\353\027?|\347\'\276\257B\206>\220U*>\202w\243=F\204\262>\304g\333<\327yO\275\235\300\370\273q\374W=z6\260\277\333\233\336=X\366\344>u\344\023?\227)Z>\245\001\341\273G\007\246\276\'\306,\277z\260[?\377Y\004\277I,\213>r\277\">\216\026\314>\350\367\256>\351\250\231=\306\232c>\374\234\331>\275\207h>e\325)\277\215\314#\277*\332\337>\360/\366\276\273\374\325>\330\263\210=\031\315\213<\344\236\265>\307\324x>\003\353\322>\270\267&?\276\244,\276D\274\016\276\235uM\276-\242+<o\350\300>\214F\001?;{.>\330\002\t\276\232\034\000?\263\030\007\277\210\r\220\276\203\347n\277\361,\\?\245\326\204\277\016\325\273\277\350\340\263\277\200\372\365\277\270\233W\277\203\026t\277G\260\347\276\364\010\206\276\005\354\211>v\311\253>\303`\214>\\=\260>;\215R?%=\354=\374\266\335>\257M\r\276\311\"\253>\215I\r\275u\301\203\275N*e\276\205\365\013>\371\235 \275\263\332#\277\224)\360>\375\014\270\276\026\263N\276gWs>\005\253\356>\010#\235\277hj\251\276r\010\312\275\211\361\001>wg\305>\210\024\016?gQ:>4\236\333<\0015\037\277\225\306\002=\321\032\233\276<!]\276\337[\254\276r>\r\277\360\'`\277k\343`\276\007MT\276\216bi>\277\016\236\276\237j\202=\326r\260\274\321\212F\276.\355j>X!\202>\265\'\252\275\207\317\263=\'0H>\263\2036\276\307Sv\275\024\234w>\254K@\276BW\300\276\265G\245=Nq\"\277\260\204x\276\026S\332\276\247\024%\276\233\215:>R\203\005\276Ln\350;\224\351O=\\\326\316<d\304\212>ZMX>\tV\223\276._>\275m\000M\277\334\372\206\276\310fr>s\303\264\275\341\324\350>]\350\003?\n\215C>nl\037\275_\321\276>\376@C\277\352^m\277\031o@\277\033\301J?\343\330\263\276H\305\331>\355\240@?\007\235o\275\365\221n\277\247L\356\276\201\272\031\2776b\333>\035d\373\274\025\213\237>\n1?>\223\031\022\277T\333v\276\213\000\262>d%\371=NV^\275\336\226\004?\021u\000<&\233\311<h\363\003\277~!\301>\307\023\305\277x@\030\277\"V\333>|\365/>f\351\267>\211s\371>\305M~>`\371\350<d\335\262\276w\t\'>g3\244=\313Fa\276\377\206|\274#\221\211\276\226\3001>\346b\257=\331\036>\276K\257\375>e\0131\277@\024\304>\233\376\000\275\324\353\227\277 ?\306?\210.\200?R\016\274\276!\317\016\2771\017F?M\360\213\276fFh?\266y\247\276\177&\246>\353\371F\276\300\031k\277\0004\021\274\305\002\204=P\365\322=\3640\212\274\205\227\204>\232\340h=\353\300F=\303K\013=p\204\"=\365\312\\\277\312\233\275\276B\232r\275Y\307\231>\335H\021?j\326\216\276\211\262\361>\346@\231\277\3329u\276\tGA\274\220\233<\276\037i\016\277\262\331\215\2751\214\016?\233\264\246;\214\034\346>\204\333F\277_\226\371>e\334\301\276\035~\241\275\332b\033?\251Ll\2771\272|\276\354\014\'\276\022\013\202>)_\215>Q\214\023\276\325\234\001>\252\227V>\223\355\206\276(\315\"\276\306\273\254=\241\236\202>j\013#>1\3374=\n\020A>S\244\217\274\231\276\t>\264\353\271>\311{\204>\261\327{\276\027\245*<\306\344\216\276\267K\010\276BDT\276\306\177\025\276G\214\301\275>2\177\2750c\343\276\305\024\001?\224\261_\276\301\202@?\332\321j>\277\237\257>\233\333\362>\266[\250>\356\3664>\347\275P?l8\223\2779\275\243>b\001g>AaD\275<^;\300\264\260z\276z\022V\277\356-\221\275\"s\304>\231\276C\276\265}8>\203\177 >\032\241\251\277\'\217J<\232\2315\276\375\226V>\336\335\341>\027\367\330<\226\007\366>Zf\t?\361Xl?\216b*\276\301#!\2779\242\031<\n\034\221\277=\3222\276\\\355p>\324\354\210>\315\331#\300q\337R\275\333\272\341\276\240\205\225>\224B\316\276\323sb\275\253\253\376\276Bw\255<4~\204>\223\241\371=(\366\n?\000\257\224>\025\366\r\275\263\366%>\177\260\226>n-2\277D\3404?\3021/>\331\216\r?\017\207X?^3\214\275I[;\275\220\333T>iJ\233>A@c\276\242\206.\277JU\356=\225v)\27636\000\277\323\200\314\276\345P\243>?r\030\275\237l$\277\347s!?*\261\353>\372E\251\276\316\252\211\276\211\014\214\2766\317M>\270\322q>l\235+>G{,\275G5\241\276\367Q\304=&]\355\275\274\232<?4<?\277\307\tU\275\301\200p\277h\003\310\27405\n?\260\230\030>u\222\354=u\016\301\276\213*+>\353)+\275\230\374\035\275\201\003\364\276\362\371\221>7\201\036>H\361<\274\322H\r\277D)\263>l!\017>\336b\273\276\007)&>\212\0067\276\236\311\007\276\317YQ<\245^{>\001\360\360>n\227g>+\254\016<vd\301\276a\371\025\276Y\207;\277o:\243\276\017\265\213>\254\272\026?W?\222>\355\327;\277\245\031%\276\032f\017?)\002J?\327\367\376\276\372\345\021>\214W\317\275o\025\177>\312\260\340\277\271\360\362>\301\206\246=\337Y\204\275\177\003\r\277]3\221\275\240i\017?;\323&\276\352\216\322=Q\275\260>\233\036\321\275n\366\234;\032\010\342\274-\264\r=o\025\"\274T\315\354\272\222\246[\276e\300/\274\317\232\263>\354\r\212\276n\324\245>\232h\'?\3144C>\245\221\263\276\"\261\275\275\r\332\020?\336\r)\277_\331\252=\"\036\226>\225W\211\276\356\235g<\260\210\267\276\252\353?\277?\237\271\276|\322\220\275\206\342;?\305\314\005?\221\035\326\276\214<%?\255\306\253\276\361\324\346>\347Y\314>6Yl=\250\316f\273g0#\277\022%\302\2760ir>C\234\360=\253\215\323=q\371\223\275\017\342\201>\032\325\330\274!\277N\276\033\227\275\275\017\223\177\273R\330\305>`\272\356\276\037\314\232=m\263\250\277r\373F?\225I\257>3bS?)*\233\277\031*\177\276\312\212\001\277O\323\245\277s\242\212\276\221\\\233=\273\247\340\276\340\376\215\275\272\317]\276g\014\337>\366\001$\2767\"\026>Wl(>\271\204\360=\320E\226\277,\340\236>@\223\n=[-\031>\264\225-\276;0\376>m\367\244\275;<\221\276\264\270\"\277\366s\313\276b\343\271\277\357\310\300\275g\230>?\324R\035\275\026\214K?$\2630\275\003\275D\276\rB\004\276\313\026\221\276\242\363#>\021\226\001?\267\n;\2776hB?K\025\354=\216\033\031?\274c\000\277\323g\344=z\267\003?\001\031\306\276\222\211\301>\306\251\250\275\"\227\360<\310\262\030\273\272\223$\277=x\002\275\330h\271=\362\252\017?\262^t>\216\226{\275l\206\241=N\345\306\276] \202><s\025\276+\371\344>l\265\370\277\'\375Q>QYG>0O\204>?0\254\276\224\336\236>g\322\270\275\017\3638>\217E\243\276\210D\023?"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\320l\317=\227\037\007>\376\\\215>wu(>\254z\305>\343\244\225>\313\231\311=\256\311\332\275"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\260\032\025<\344\266\t\276\037\033\245\273\360E\'\277\207\324\363=[\004%?D+\026\276\016\361\326>UC\325>\351r\225\276O\300i\275P\014g\276\321\203\004\277]$\252\276N\177\312\276r\231\t?\354\263d\276\350Gr>^\313T\276\301\210\267\276\3651\006\276\202^\337\2769\321\321>\305\001\334>\007\262\250\276\021~\225=\217\033\377<.m\270\276k\032\353\275\365{\303\275\2451\003\277\361\216\034?\256\330\235\276\364\207\322\276LM\311>\362\321\233\276Q\034\036\277.\366k\276\"LW>\230\257=?\230K\272\276\363\200m\276\317\351t\276^\216\220\276*\376\356\276G\331z<1\340\362=o\007\005?\371*\352\276Sa\264\275\250&\017\277r.\024\276\306\"\332\276\025\340\013=\360m~\275i\267\232>H\005\245\275d\260Z\276\030\306Z\276\303\376\007\276\322-\252\274\224\371\207\276P\272\325\2767P\026?\277\002\036>\251\303!\276\003R\026\277\375\376\232\275Stj\275%X%\274\3706\000\276Y\210\003?"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.23464806377887726
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
