node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\021\367k?\344\223(\275\264\365\'\277\263\254h\275\233\200(\276#\230\367\275\232\325\364>\350\270\215>\376%}\276p<\323\2751|f\274\347^1\276\240r\233=\n\263\007\275^ad\276\261\274\034>\202\226\217>\374U\350=X{*>_M\203\275m\320\321\275\347~F?\217\230\333>\274\330]><\r\226\276=\261b>d\262p<r\371l?\024\354\214\275\276\002\377\274\267>\345=\t\236J<|/\013?\031$\023\276\342\213i\276yN\025?\371\0275?\023\354\267\275\"T\037\277\231\327\360\276m\360T\276b\303/?}3`>\304\301\033\276\253\305\347>>\362\250>\3548\215>\325\357u>\342\003\277\274\355\336f\275\312t\361>6\231W\276ZN\330\275\342\233-\275\322\354#\275\274\314!>\357U\321>\010\377\027=~q\332\276C3\373>\360$N\277#\320b?\014Q\316\275\272\376$\273\315\230\355\274\032\2021?R\313\210?PLs\276\021<\307\275\031\301\273\276\020\2757?\254\211\207\275\326E)?;\215%>\351\317@\275\276`y>\315\224\375\273O\343\347>\352\305\220\276D\362\317\276Yvv\276\211\333\215\275|\363\300>AU\210>f\000\260=\366\203\326>\304S\030>\265\346\027\277\200\230Y\277\026_\337>\241\263\242>.|\212\275cX\024?\356\363\250\276\341b\231=3\371B\276\366\260x\276W\234_\276V\230\204>j\264\347>J\205\203\275\303\271!?Z\313T\276\2655\032?\273=m?\252\322\n>\0339\202?\360\200\243>G\002W?\301\324\004\276{\300\270?\003\313\212\2751\213\262<mH\307=8\353\314=z\267\003@H/\014?F\322\273?C+\306=h\\\306>\210\360\340\274\224\002\t\276\320\037\n\275\344\253\225=\230\006\265=H\343A=:\006(>`s\231\274\007\246\031?\266\310\001=\302\2140@\317\215v?\302\340B?\344\177A\276\353J\212?-\004\273=\370\327\020;\374\271\276\275\374o\340>\376*\240?P\006\'\275\203\335\214?z\306\003\2764\020y>\355 l>;Kg\276<\216j<\025\324\355\276\025&\223\277\207\276\252>\345\3105?\217*\255>R \242\276h%g\276\347b\223\277\302l\216>9\222\251\276\363\245\007\277EE\215\274&\356\354\275\347\026\307>h\264\005\275^\350\326>\320\352;\276C\343\216>A\206\201>9\356\014?6\215\037\277\366C\351\276\336\227/\275^;\345\276@JC=\307S\324>\236\0209?\034\'\360<\216\231G=\334J:<\236\3519\276\206\374\350\2757\301e\276\031e\037\277p\237}\276\004~\334\275\007\203\267\276\231\307\207>Y!\207\276m\360\262\276\263\322\202\276J?\201\277\357\351?\300\t\033\251\275\222\266\256>\352\006\305=\271\010\321\276]\270\334\277u\375\254;\203.\274>~\206\024>\202Y\004?\303\004\217\276\006K\001\275~\312\231\276\261J\325\275\312J\350\276$O\340\274\300j<\277\r\210\177\276v]u\276H\374\322\277\032\207\255\275\205\350\031?\226 \013\276\222\033S\276c\325\036?\030\254\031\277\367\222\000=\201G\206>\340\023\304\276a\031\020>\327\030s>\312\277\343=\316\244N\277\273\233\266\277\345\273\354\275Ey\350\276s;\003=\307\223\235\276\265\204\323=\306%\254\276\350|\017\277r\221#\276S:\315\276W\213\000\274\213s\021>\371:\267\276\033jd\276\264\326v\2766q\005\276G\207\226\277\220\212\216>\0251\r\276\025[\207\276\354|\314\277=\333:?\177n\"<or]>\261-%?\236\036\230?S\313\260\275\220[\241=L\350-=\273\226@\276\224\274\316=`\'\003>h\"\226=\3406\350<7\366U\276\273\307\032\276\231\213\245>\030\022=?\202Z\335>le8\276`\334\003\276\211s,>\321\241\305>\341Q\036\276\360\336\350\275\355?\253>u\266:\276N\3647?\220\353\024\276\345\247\240;\'\243\252=~8\317\275\177/\312\275\360 \330=t\370\202\276\\j\300=o!\027\275{\223\t=\355\245\366>Xfd=_\246\203?\2731\031\277hjI>D~\235>\204[\366\275-\026\334>*q\304>-Yf\275r~\246\275h\024??\236\371\234>\0365R\276c!\243>\256\307n\275\021s\020>\377\216\020>DL\263\276\337I>\276\021\355\203\275\272J\021\277\022xY\277\345\026)?\037\005\313=,\347 >+\353\373\276\213\320\365>\373\264\340>\266\232\314=\007\2719>\235\020\371=\3738\313=DlX\276\366/\253>\250\263\n\277\223\367\266=cW\036?\273c\002\276]\303\000\277\365\2171?\200\212\n?\021mQ\276G\261%>W2d\275\373\315\270\276~kN?!\303\373\276\234\366q>\332\321%\276\225\370\275\272\010\037\020\277\351\372\200\276\352\033\r=+$\332\276\210\305R\276\336\305\322>\241\326v\276NI\013\277\350\252\024=\2514?\276\207\024\276>\\\210\225\277\310\030C>\341\362%?;\264\263>d\322\252?\251,\253\277ACD\277\217{\234?\271N~=\361\024:\277\367\311\274=VL\240=\345\323\314>\215\333\030>d\n\354\275\234]\035?\303\273;\276\227\326\'\276\375\301>?A\232H\276\234\231Y?\351U!?\024=~>\033X\333\275\304\020\274>\371\256\r\277d\250\216?:1<>s\345&\300\306\n\007@\371=`?!\272\373>\303\305B\277\234\234A\276\35601><\267\342\275F\316\'>4]\324\275\032\203\037\276\316\3229>DZ\032>L\234/=\223\\\233>z\036\316\275H!=\277\216\372R>\003\305U\276q\023\350=\361}\030\277\276\347Z\277\245\010\230\277\0359\230\275\242\330a>o\345\211\276\204\341\322;\217x5?\244\205\371=\376iR?\232\033\314>\013x\254\275\332\030<=t\r\247\276\\0\037\276\327\252?\277\354?\314>>q,?\310Q\273<a\276\235\277\007-b\277\210\312\347=%\227\265>\347\205\200?\324\341\001\276\227\240\235\274\207\315\354=\346\377\341\275\201\n\221>8*Q\276\311\212\273>\r&D>\037\035v?\\\242\300?\362\336\366=E\230\002?\3560\026>w\262\215<\252\314>>_\262\351\275\270\237\343>5\023\337>4\032\010\272P\221\205=\235:\250>\215\031\001>EB\203\276\245\3674>F\221\332\275\247\234\236\276!\341\341>\257\355\243\273\373\373\233\276\207\000\266?tB\231\276s\316\301\275\276\021\325;f\3219?%/;?)\304\243\2768vu\276\212\227\261\275\223*\024\277\324ii\276\220\354\271\276\264\241\265\277\024[\n>f\377\341\275$V\222\275z\263\372\276^\252\200={\212\201?\305u\026\277W\r*\277!\\=\276\231^k==5\035\277\254\370\351>\240\271d\276\235\204\372<\220\211\215>-\242\231\275\214\232\245\276\251\300.\300\224Q=?\273\016\020\275\317\352%\277p\342\276\276\275\337\252=\337\240v?\304\243n\2760\262D<W\330\321>\276`\265=y\217\010\276\004\022\340=.\260A=\341\213=\277|^g\276\274OJ\274\225\374a\276\316DZ?w\242<>\2118\241<]\\i\277\241\036*?[\037\202>\267e\253\276\266$f\277\317\277#\277\221\215\361?\323c\371\276!=\003\277\225g\215\277\022r9>\356C\205\275\316dK\276(^\345<\202\260\271\275\300z\006<\231e4\276\000\236\214\271K\314@>Rt\270=\275|\305>b\251\360>{\244\310\276~\340\037>t1\371\276ndA>\210\3268\277\202\033\026=\250\234W>\375#\277>\251\010\224\276\302\307\000?qF\025?\211J\035\277\377\326\021?\303\014t<\372/\322>\243\021\227>SN\252\275\345\215\006\276\273\265W\274\313\205\002?~p\276>2<4\276\325\365\267>3\232\306?\030G\240\276\206\225f=\312H\205<\316xJ\276\317\333\314=\303\'\014>\360\267!=\350NI>\331\352[?\220(\320=x\224\001\276\303\231\310<\270l\'?6\355f>\212\320o\275e;8\276\231\000\227\276\355\210\232\276\261\364\357>ZF\'\277\025\031M\276\'\257\010\275\265\316\277\276T\310F\277\210.\213=\212\246\213\276X{\002>\332Q\352><D\221=\314\205\375\275W\317 \276\3476\212?e\264\232>\356L\021?\237\003^\276\325\225\000?\036\226\230=\324\021\250>y\305%\277\030\357\210\276\234\250\034>\031p\017>\231\345H\277\322\302\372>\240.\217>\3405\247<\266\270\363\2768`A>\2143\311\274\332v\010?\002\0139?\270.\014?L\033\"\273\246\021\231\276\340\t\231=\213\361\331>l\207\337;\221\027X\277Rh\261\276$1\227>\210#:?0\230\272\277\327A\311?\363A\023?\332\034u\275/.\301?\016\254\264\277g\333\377\276\"\002\262?M\362U\276\246\306\363\274\324\305\207\275\332\371\361>\003`\031\277\314\234$>\240\274N?\014\317\227\276\3017\266>\031a\302\276\202\323\025\277\336\276s?\316q\025\276y\275|?\224\347\002?\025b\253>\247\2712\276\362CF?,as>\347\037\223\276\372gq\276WZA\276\371$\310?\032AO>\220\275j<\243@\265\275L\342\010>\276K\215\275\324=\243=\306R\003>0\312\254\275\341&\013=\327s\350<\031\260\030@\321Z\215\276|H.?\363\323\340\275G\003q\276\225\030\242>\232\000a?nT\222\276\204p9>\253\374K\276P\365\357=\016p-\2770r\265>\'/\237\276\3672\270\274\251\322\247=\t\333\241\276J\004R?\274\306\330?\001B\027>d\244\026\277!\275\356= \201\323\274&t2\276\307V\272>.\013\270>\277_k\276\006z\202>[\371\300\273\203\363H?\257d =\343\364V\276?\2777>\357\000\023\276h\244U>O==>\013\271\034\277\320%\273\276\244\022\210>b-\230\276\373\221\352\275\310\362o<\022&7?b\233V>\264\255%?d\030<\275\251\360\266\274\231\340(\276\261\377\032?\243ZA\276\3003\r?\010\210C?W\246\240>x\304\351>\352\"\274\275\224\265\361=\204\246f>\206\212\300>\217F\221?\003o\215@%\274O\276\361\032\'=D\\\314=\271\324\247>\272\000@\277\260\033\022>=N\243\276\316\220\013=ht\007?\031\215\335=B\206\352<*\345S=S\211\235<\253)\206>I\"\200\274\331e\346\276\277\001\276\275\001X\313\275\215\020\272\276!A\227\273\266\\\217>+\356\302<_\027\310\275\2133A\276~\346\226=\212K\350<\250\n]\277\235\307M=\000\220\017?N\027\204?\257Cs?\365|^?G\'\272?7\234\016?TB7\276\351z\273\275\264\362\267=5\271\270>\266i\362\275\302\354\246>n\214\333\275\324\020\355\276\321\227\211;\246P\237\276\362\031\217>\340\027G\276\035,w\276O\023\345;\302{Q\276\362\340\256\275\2540\021\277`\377\200\276\356\202\300\277\204h;?6!\250>_\244\224?\333q\260>=\001\276=\230\n\264=\"m>\276\210\342S=\374Mh\275\214\255\203=:3\372\275\030U\323=t\357\336\275\271\307/? \323L=\253l\202\276\323\227\355>\314\217R?S\370h\276\377\306\032\277\317U\363=\302\323x>\355_f\276\005\223\014\277\355\010\005\277>\276_\276\337!w>\263x\030?6#-?\322\352N? \370\375\275\373\352\370>\037\376\203=&\316\273>\251\211\233=j/\235=&!\344>E)\252>x(->\324\244\231\275e\325\002?\025\362\332=ot\013?p)p\274e\226\255\277\254\337,\276\213Oc\276z\236?\277\026\022\036>\311\201\255\275\350c\330=>\240\245?\220a\346=A \270\276\230\253.\276\0276\014\276\263\337Y\276\000R4\276]\327\030>;\0006\277\217\266N\276\3205\\\276\200\013\023\276S\337\235>\343D\017\276h\213\273<\225\236\377>\23656\277\310\340\231>\302c\251\274\311\354o<\032i\376\275bd\236?\324\261\320\275\362\221\'?\031\277\017=\325\316\007?\2013\221?\302(i\274*\266!\277t\205\005\277\033\323@>\266\013[>S\030\214>\361\233\321>c\307j>I\026\006\276\273\034N\276\312d\020>F\000g\276\227\201\031?\364c\241=4\323n>\213\315\022\276\030@~=\031N\206>2\221M>\272\352{\275\345\262U\276\256;=?\245.\034\275\3240\205\277\363\201f>\031\252\275\275\316\'\221\276\247\305\253>\\\037\351>\307oM?\227o\262\276QK\202>\346q&\276\025\337o\276\231}\375>/pp<\221<\005\277I\223\235\275\371>\333>\253\325\300>*\247\240=\333\2570\275\244\376\377\275:\000\273>$2\332\275\340\313\223<z\326\264<\353\374\024\277\340\331\245>\333\245\363?o\331\214\277b\255\266>\334\033\374>\354\027\251>R\2208\277nX\013>\270jz=\311t6\276\341,A\276P<w=\260\263+\274\252\203\320\275\200O\271=\2404\203<a\034J\276\275@5\274\340X<\276W\376%<V\246I>\205\266\221=<\323\231\274^\326\353=4\213\035\276.p\243\274\205l\000\276\r\245\263<\223\336\322<\344o\345<\214J\226=\316OA=\360\2600\274\363\236\030>\264\031\262\275)\220p\275\272\256H>\n\3552\276\204\305\340=JN\354\275\312}\264\275\235\307\227=\322c\037>q\271%\276\241\371F>@P/>\274s\254\275:\256\"=\0055\221<\022n\352\275 \356\317\275\345X\265=u@&>\204\266\350\274m\311\354\275\200\207\221\2750-J\276\331>,>\177\362\246\275\235k!\276Y\277^=\255Q\017<\343\262\036\276\335\324\006>\201U\271<A-\267=\016I\032>\314C\310\275\247p\021\276\226V!\276\275\321E>\364m\222<\000\253\n\2769\260\367=\026\255\262\274\254\243Z\275\207\356;;`\305d\275\330\202d:?`\022\275UQ8=~\032\003>\001U\302\273\200\t\370\275\036\237\025\276\303\330\275=\255\342\022\276\026\230\250\275\310\260O\275}\224_=\341\325\320\274\326\037\032=\371\032%>\362\332Z\275\214R\204;\\\361\267\275\010S\023\27646\002>9\310\325=\000{\200=\022X\325\275\237\350H\274\315\253\377\274\222\332\221\274\334^\214=\016\261\373=]\367\002=\3329\006\2763\2679\275\020\375\232=F\2111;\314\270\022\276\035@d=\273c\251=\234\236\325=\261\306\310<,<\016\275\343\003\341=)\302\306=\241*t>\300\324H\276\336RK\275\024\300\027\276Pk\230<\205\336\306\275\307\302\236=\272g\'>\027\004\007=\341(\035\274\205\3617\276\252\253\022=#4\214\273\372\177`>\357\376\001\276f1\304\274\335\362\317\275\210YN\276\316\022M>\300\233C>^\250L>\326\256\220\2750\276D\274<=-=\021Z\303?gm\256;\370^\331?\n\217\273\275\260L\207?\002\303\265\274qP\210\277\304\367\265?U\243\321?\2758\231=\007\272\324\276\027[\304\277\t\331\221\275T\206d\277G\201S>3!A\277\271\360\271\276\211\032V\275\034\n\010\276\000*n=\021\034,\2764\033\372\276\264\273,\277[fc\277\211CK>~\004>?\014\256\263\275\341U\374>\301\372\013?\022\320\364;s.\300<<Jv>x\314e>\010\322o\276\033[\235\276\005.\270>k\262E?\'\034\210\276\203f\006\276\272\202\364\276\035\210N?\313\016\334=\2343N\276\t\264\203;\257\311\270>G\214\232=\332\263\247>\220\213\t=]\265D=\307\235?\275\352\376?\277\365\035+\276m\333e\273H\2676\276\373\314\276=\305\000\357\274\222\034\035\277\354)\335<\346\0316>\237\246\r\277\306\366\233?\032}/\300\002\352\t>\272\361\036?\306\346\232?X\210\371>\236\247f@\3041\342=C\317\307=\352\215t?,\033\204?\240\254\227?\'\375\341>\010\222\t>\377\r\375=:7\342>\254\354q\276\373g\373>\225\263+\275\372\316\354>[\212\213?\261T\266\274|m\270\276\014n\227<T\030l=\036m\267\277\326l\\?\036\307=\277e\246\207?\033\315\204>\251\277;\277\032H\201\276\356\025\311\277\336\350\024>\217\373\030>\277-\236?&\001\005@\277\224z\275\232J-?S(u?\353\254\255\275\023\t\240?5\244\013\276U\300\261>\000\366\265?@\207\225\276\374\035\362?\205\354\273>\031\257\341=\326\224}\275\235\n\227?\036\334\r<\322F\031?\r\364\217=\177\214.?\307.\021\276\335+\215\275\017\323\345>:\370\274\275\231\006\233\277\325\352I\276\314\366O>H\341H>\260\226\002> \215\212\275<\246\034>\354\322\236=`?\313=\374\233e\277\017\225Y\275\362\225T\274\304\237\225\274\014\362\361>+Z,>\344\345==\307\300t\276zW\227>n%\257<\366\316\320=\205\322E>\350\344\247\274u\236S\276_\'\006\276\3104*>\257\024s>\022\213\225=\374r\227\276\230\272\272>\017l\217>\023\3317>\214\235\271\275\337\227\341\276\034\r\274\276G\362\005\276\273\376\221\277\327\212 \277\264C\246\276E\357m=\342\251\203\273\340\203\031?\031A\372\276E\260\r\276\357\2027\275\030\335\224\276\373)\027\277\250a7>&n\201\276\257\260R?\362\377\243=v\372\307>\236\201\331\274a\334\367<X(\313=z\201\000?\003\344\t\277#\206\235\276\3254F<\365h\376=I\362\302>\353o4\277\375n\301\276\214\034\362>}\340\345\276A\232\215?\003`@>\325\034\322\275\336/\001\277GK\307\277 \227\252\276|)\314\276\373\357\020>\237\225\206>\2057\224>\004\305\267=6\265\375>\005[\335\276\251\377==2\324\270\276A\205\'\277\244\200\216\276\3140\214\274b\304/\276o\230\036\277\244\252\261>\225\020\\\274=Z\204?\017Y5?b\002v\276\n\023u>\341\321t=i\266\247>\t\003\346>\200\255\217<\335\212L\276/\nv>\032\375\275<\035\355\274\277y\000\275\276P\017\213?c\223~\277\240j\003?\264\365\037\276:\024\234>\273x\217?NfE>\002\227\364\273\276\342\207>\000\305\230\276<\333\007?\216u\341<\227,\214\275%\337\014?G\t\004\277\037k\220>\276>\237>\323\332}\276\016G\234?Xe\352\275=\337\007?\343|\177?2%9?\232\360\022?\201\031a?\352\343\227?\235Y\201\275\n\237\005?\274DE\277\364\213\207?\355=\266\275\230\214\211=h\030\033\276$\300\005\275\355T\352\275x\367\034\275b;\352\275\366\367\004\276eL\322?\321&$\275aM\340>7D\020?\367\276#?{\343->\t\263K>\224\214\336??n\213?\277\005\304=\354\353\226\276\300C\372\276m\261\335=\022\314\032\275zx\312\277!(\275\2767\234A=f=D\276n\375b\276\361\\n\276z:\024>\252M\272>\332<\206\275R\217\024\277\r\000\246>\022\344e>\367\002C?\016\315\310\276sO\342>q\340S=j`\034\276B\006\004?Z\037V>\272~\370=\355\232\233>\351\212\004\276\367)!>\r\377\251\276\\\221>\276e7\336<\256w\001\276]}8?\027\375q\2760(\016\275`C\033\276\002\2278>,\014\214\275y\205)\275\3737\266\273\232\211\335\275l7&>\016Y\370<\2223\264>C\324\034\276\'\262U>9\250\222\276\312\271\222\275\242.B=\204P\020\276\232\212\351\276\'5|\276[F\016?\023\206J\275;<*\277\257\370\325=U\365\330\276\211\355\021\277\037\245*?c<\365>i\242\330>L\007\244\277\377\2100\277fn\214\275O\222\321=\263To>\330\003Y>\267\253\013>\337$N>(b<\276\334)\004\276a\361\"?-\274\211\275\"n%\277\031\305[\2760\260G\276q\325X>\337\343\014>\014\301\n>\022\344->w\332Q?\373\310\377\276\323\357\301?tPx\276B\004\206\277N\245\221?\332\2465?\200\365\027?J\245\367<\305\266n=^\315\315>=\001k\275\237\007\023\277J$\211=kK\224>\3366\223\276\300\233\007<\207\277\202\277\337%e?\210\306Z>\274\217<\275\222\2144\276S\327\203?%\272D\276P24>\352\266??\247\342\234=\246\227\321\276\021\351-\277\265\231\351\276/\315a?l\236\272=(\374\027\276\014\324\246=\300\303\371\274\374,\023=,\006\023>\220\032\026\274\312\030\t>Y\376\221=zph\276e\236\254\2769q\345>\220\037\346<\372,S=\342U\301>)\310\000?t:\023=\202\207\002>.\n\312\276Q\375\222\276\213\ry\275;\2110?\241JK\276\273\375\364\275\276\tU?\267\034\317\275\246\301\204\276]1\024\277\365\263\302>Z\177\262=\235\363f\27650\352>\033\016\276>\270\013\014?\344\r\020\275\323\263\342>6}\252\274a\360\220\276q\301c\276N\362\305\276~\274\211\277\035\021\336\275\242~\232\276\227o:\276S*,\277\312&w>\177^!\277\252G\367=\352S\275\276\025\244\356:\232A\220=\200<\350\275t\275X\277\354\345g?\202\374\301\276x\013\023>\255\276\331\275?W\024\2763;\352=l\205\013?D\2366\276o~\207:\374\221\354\276\264\274\244\277Ch\306\276U\320o\276Hn\037?S\035\022@4,??\234\207\231\2768\360\335\274\223\216\376<\246\376\375>\373\372\373>\311\010\006\276\376l\t?\3774\364>\220\257\371>kYz>u\021H?\243\220\025\277w\344,\276\253\305q>\360\314\213>\375%\231=$\222h>\263w\342\273d6<?\271\364\037?\346\200\360\275\351\371\224>\251\224\215>_\364.\275\302\022\006\275+\023\231?\367\234\032=\221h\024>\256q\226\275Q\323\224\277&i)\276<%\314=+\352\350>\331\231\367\276$\312\217\276+\022@?Y\267\304=\347\021\307=\374\350\300\276S\353W>\361\375\233>\362G\020>\226\270\026>Uy\004?1\326\271\276\253\344\246\276~\350\343>h\377\221\276\337\353\024\276\177.\013\277\235w\036\276q\352!<(\261\\\276MhL\300\330\2724\277s\205D?Z\327\314?\326\t\254\275\263:\311\277t@\t=\335\345\370\275\360G\006>\331Z\373\275t\270\300=X\250\300=\264\3572\276\350\225\343=\276\317\371>\377sO\276\372\t_\277\014\005\215\276\256\261\203>q\310m\276\272q\362=\316\257\232\276.\030X>;\325\360\275_\374}>\rgv\276@\223\257<\235\033{\276\305\214r\276\357\271\233>\322\026\002\277q\n\242\275\222iQ\274\300\300\200=q\002_\276\213\364O>\310\356\004>\333\374\232>?\273D>\265O\300\276\273h5?\207\250J?\206\233\230>\234x\025>-i\212\276(\242R>\320\023%\276\227K\263\275\326\242)>\232\314\257\276\375\314?\276\245N?\275*L\'\275\316\242\221>\356\232\205=\236\246\"?j\345P\274J0\240\275>yx\276\255\2766?1\216\n\277z\371e>d\303\355\274^\310\005=\231\252G\276\013i\254\276\212\331%>\241\372)\276=\276\230\276\004\033\350\276\022\000\346>m}\372\275}\001\257\276AmM?@\326\314\276\302\217\270?\313\006\257\275\344\267\371=\213kv?\315\332\017>\370\001\244\276\252Z\244>\217\265\001?`\201\006?\375\256(? _\256>l\344\236\276\026\253\344\272h\373v\276\241\210|\276\035\273H\276\346y\225\276Qc\221>?\241\007\276}\243\225\276\363\305\032\275\317ZP\276\007*\367>Y\347I=P\031\212\276m\tM>\241\207\311>\204\214P\277\002\332\217?#G\352?R\to?\255&q\277\235\0139?\tw\206\276\317\031\356>nZ\222?\335\346_\276\303\210\006?q\013\277\276\251\343\177<\266\217\376>\025)\212\275\216\313Q\277\300\353#>Ujx\277ZXM?\230\372Y>\231\271\356\274K\232C=\365\215\316\277}v\021?\035K?>\367(\002\274I\317w\300nV\355>e\016\014\277\304\313\014?\005#\274>w\242\314><\3101=p\221\\\274\363\272\270\275N\020.\276\\~\025>\352xK>\313\372H\276(,\341=~%\362<<i_\276a(\206\2776\360\016\275\347q\000\277y^s\276\213\217\257<\312\276\226<QY\362\276\375\324\024\2767\n\353>\337g\000?\314\324\214\276Zd\220=\303\244\212\276\177\276\t\276U\222\030?Xr\300\276\271\315\204\276\357>\267=?\031\235?h\261\260;\004|\207\276\344\240\325>\356\202\227\276\232iU\277\010\244&\277Y\327;?\276\303+\277L\023\331\275;\275\013\276xG~?\321)F>p6\232\274.\223\361=%Q9\276\027U\354\275n\254\364\275\254\270\336>ix\227\276\317p\000?5\227\026?-\212\355=\2653\223\276\223\275\222>`\311d<\236\240b\274d3}\276\2362\203\276\223nb\276H\356\r?]\235\274\275\270\335\033<|\254\023?h\220\350<g\342\221>x\227\032\276\230\310\273\275\r\312\322>\340.3?\222\244{?\266\036\013@kCp\276\023W\340>jo\203>c\342\372\276\317\314\305?2!)=W\250\221>\340\252\023?\010f\246>\250\212\001?@L\264>\025\216\017>\332\373\210>\010\0178\273\\\364:\276\3613\206\276u\225\316\276J\204l<K\347A\276w\313\030=\214T\327>i\264-\277sa#\274\t-\216\276#8\263\276\004\335\263\276g\201<=u\021\262\277\035\002a\276\316\304\004?\312\376\252?U\303t?&r\303\276\237-Z\276|\245\310=\023\016F\275\357\327\010\276\361)\201?\231\330\357\276zK\t>\363k\003\276O\331^>\344\004\037?\024\323V>\344\207\t?\346$\205\276\241- \277\034J\031\275\0145\252>R6\345>\327\272\210?\270\205S\276\250\272N@\010\367\215?\343\364R\276j\374\241\276\331\004\323=\200\r\177\277\340E\252\273y\3340\276\312\362\001>nw\003>(C\034>\201\324*\276 hP\274,x\272=+\205\270\276\254\244V=\005\255(?)\237;=TbK>\337\231\002=\307\371\271>\212\241:\277\2007\371\274!D[\276H\323\357\275t\224\200;\355l\221\276\325C\211<\312\347\234>\342\374\311>i~o\276\356g\234\276\232z\367=\000D\353>k2\253\276\346\246\033?\245\330\222> \225\274>\035?O>\336\242\326\276\027\264\265?t\017E;\257\335\343>D0X>\270EY\276<K\006\277\267\r0\275\344\252\253=\271\233\235>>\002\204\276\202C\216\275\234\323k>\330\243\325\275_\337\233>+|\000\277\362b:\277\347\347\225\275\346Ud\276\223\245\265\276a\237\224>\254K\365>\031\022S\275\301\026\256\275\325\020\277\275\202\255\201=\311$\235>\2459\352>\253\376\232\274\024u\306=\033\2608>\364qQ?h\033(=\177\347\022\276\3744=?\355\030<\277\3373\364?\221\232t\275\362\307\034\277\363\373\370\275\301\310\367\276$\255\205@\357\276\004=\326\t\002=\267\010\323=\231z\365\276\257\226\037>\206%\336=\263\335\376\275\203)\273\275\241H/=\207\202\345=\330\017D?`\007\">\253O\014\276\342\204\213\275\305\343\376\275\251\213:\2777?0>\247w\005\276\'*9?Y\\\n?\327$\333>Q\025\227\276\304\274\376>wk\376\275\340I\320\276\020\232\263\276\253\347\342>\376\255\335>\034\346~\277*\0347?zs\350=\360\336\026?\326~\344\2720\020\354<\354\234k?>%\345\275\365\344\010\276\302\223\262\276\337PV?Q\333\256?\344\274\036\276\341\215F\275~I*\276\336\375\223?3\325\225>9\252\232?#\024\305>\230\0017@V1:\276\320-\353\277b\223\304\277$\364Y\277\217\307\251\277\020#/>@#\355<\214\305!>0\226a<\340\370\023>\251;\036\276R\220\007\276\301\301\250\275\254\310\273\275\263\324*\275(&\273\274\032\300\177\271\026\223\"\276\325\261\276\2752\\t\275*\010\371=5\325\207=\260\213\275<\321\310\211\275h\024\311\275\013[\370\275\370\272M>kQ\032\275-\351\004\276\362S\260\275U3!>\265b+>\013i\341=\320\340\325=\333\262\344\275g\313\313\275\335\033\016\276\204\020\000>\037\3460\276\\*S\276\3279\024>\035\203+\276y|\371<\341\002\245\275bl\204=\317\022\340\272(\207\376=\244\243\001\276K\252\364\275!\004\240=\250\034\014\2764e==\271\2155>8\352\022>(\3433>*\361\302\275\014\217\245\275\2766\376\275\217\'\351=\317\267!\276\233\323\327<\205u\373=F[7\276\250\335=\275\355\275[>\rC\013\276\357\223\325\275\350N\n>a\033\025\276P\311i\275,\227\036>r\246\000\2767\031\254\275\217#\023\276\312\367K\276\224\200O\276g\\\321=\252\261s\275\335\225(\276l\003\275\275\206f\276=\210dY>\036\357\265:\302\214\037>\030S\270=,ky>\225\334\327=\221y2>\201\251\345\275\003\201Z\276UR\342\274o\005\316=mY\001\276 K\217\275\373\232D=D\362\270\275\313\264\344\275\226\276\226\275-\214C>(V\005\276=\310\014=\214\337,\2755\256\034>\300\332\007=Di\242\275\343.\307\275\304\251\241\275\272s\325\275 \\\014>9\302\316\275\277&:\276\227\305(<\000R2\275\005\334\354\274\\[1\276 \322\236<\271Gt\275\262/R=\272i1>u)]=\030\231\215\275\354 \356\273\000\362\232=\356\\9\276\374\t \276/\243L>t%\377=G\335Q<_\360\253\275\203\332\375\275A\307J=o2\343<\356\034\327\274t\326A\276\326\n6>\205A8\276\234}\027>`\260N\276\000\377\207;PL\360=R\034\256\275"
      }
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\262\253\343\277\315\'\020\275\335\\\315\300eV\'\300\201\035\020@\232T*\275q\221\261?a\276\025?,%}\277\256\362v\275S\226\222?!\313n>\207\222.\275\323\332\027\275+z\212=PF\207?\336!\334\276r\325\024\275%o\037?a\210\213\277Q4\r\300\031(\212?\003\034\222\275\214\201\024\300\223\272z?\016@\260\276\025x\274=\177\277\013\300\212SE?\366\205P?w\213\"\275\207\201\253?\322\302{?\303I\036\275\225\254v=\243\271*?\001\321a?\260\322\371\276\'\250z\274\254\253l?Y\335B?gL\034\277F\204\232?\313^l\274\213\266Z?\361\257\230\277\325\364U\276P\271=>5\220\027\275\t\236\022\275\242\371\236\277\0327\300?\267\023 \277\325\233D?n\311<?!$\032\277\323Z~>\320R\206\275x\362\316>\331\231\231?o;#\276\320\246\032\301\213Z,\275\327\215\264\277\014\031A\277\003\213\314>\370B\310\300\231\2222?\315x!?pr\304?mM\353\277\376\034\207\277\211\265\010?m:\373\275EO\207?\225\331\225?\263\\\231\275\215\030\241?\202\313N?\"\336\022?\030\037\017\277\221\277\030\275\317\013\002>\004\0307?WC\306\274M\016\251>\021\367\201\277C\222w>\301[\320\275ra\000\276b\306\233\277\231\341I?q5\202\277\214\035\235?\224:\003\277cA\323\277\006,\r\277\t\013\004\275\350\270\257>[t\251?\005o\274>qa\007\300\341n9\274\212f\227?\252\334 ?\372<^\277\341\023\240\300n\373\321=~f\244>\363\177\304\273\221S\354\277#\232u\277\243\277\252?\207\"\203=\260\\:? q\321\277\2740\211?.mf\276\330 9?\307\027\327\277\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\377\010.\277I\221\274\276W,\332=\271l\323>\034\270\211>\\\216\325\273\247\312N?\211`\316\276\371\006\242\276\376\307\356>B\216\375\275\371G\365>b\260\277>\277\330y\2765\314\006\277\274\317\002\300\205\344\357\277Y\344B?\200^\223\276\001M\301\276.w\321\275!\336\301?\376\367e\277K\"\016>L\322Z>\321\033!\275\364\2233\275\311\360u>|\027\226>\354)\207>\365\376\273?\202\307^>\207_2\275\033\342\230=\311W\033\276!z*\276UJ\016?\257\\(?\250\2703=\327\033K\276\006\347b>|u\347\276\233+<?\276f\274\276\202`\211\276L\256T>\031s\227>\332\211\222>\364\3676?\361\210R>>\032\337\276\221\363\037?,\270\n\276G\222B\277]J\000\277\344b\252>\247\262\032\277\r\376r\300\365U\204\277o\3045\275\305\230\177\277\303\225\n\275\270\r\265<l\352\t\277<l\340\276j\200\300\276\031\263\370\275\013F\\?yK\220>(\2764?\206;\207>\205\367\233<\251I\234\276*\321\033?<\313\255\275\235\2251\276u\330S?\321\304\341>R^\276>\342@\326=\251\355\032\277Xf\236?2\352\276\277D\010\\?5\257\202=B\031\034\276\262\027\034?\304\242~?\2247\t\2777]C\276\013\227i?e\213\234>\245\255\325>7,\350>\347J\256>\333yZ?U\262\337==p\250>\017\027\026\277?32>\220\250-\276Q\310*?\315\233\233\275a\037\375>\215R\203>\364H\244>\233F\031>\312\310\005\275:\3474?9\022(?\265\227+?5\227\205>\205/??\273LW\276\364\032\225>\321\215\255\273\223\234\222\276r\313\001\2777\024\321\275LL\244=H\005\307>\255B\031\277(\325\203\275\3059\030\275x\204\224?1\037\002\275\036\022j\277\262\r\335\277z\333<>\025\"\004\277\300\225i?\305\345n>\371\320\224\275:\341\317<1\006\220>\370h(=\251\213\021?\026e%\274AR\222?\373)\206\277\270\265\361>\353s\023\276\217\023\201\275\304PH\276\343\211\216?\346w\003=\r\212R>M8\021?\205\217\275>MQd=-\353\347<Hvh?\242\t\006>\210\370\331\274\326(\241\275\034\251\000?\305)%\276\322\247\256\276u\217\232>==\361\276Hh@\276\025i\025?)\213{\276oT/>:\355\307>tVq>%\013`\276\027\255\330\276\327\210\303\275\330\254\030\276.,\207\275o}\277>q\314f\276 \263&?4\',?\006\251\022>T\3469\277$\331\265\274\324R\006>e\226\343?:\227+?\307\277\272<4G\204\276\357K\264\275\221\243\376\274\213}\260\276x\200\232\277\265d-?\246\177\243>\035j\033\276j\364(?\347\232\000\277\316\230\360\274\340\237\n\277\016\222!>\357\002l\274\263\251\341\275uT\272>\n\036`=\267P\265>\246@\362\276\273\326\017?\220/\361\275?U\033\277\r\260W\277q\362\027\276R,x?i\007)\276D(\242\276%\336\234\276\232\322C\276\247\267\350>\222\006??R\2513>\330Rh?)\362\303\274O\302\217>\000\225\'\277\227\005\316>\375\366\013?\230~\254:\252\356\356>\217<\372>\212\305\271\275\326\205#\277\342\313\262\276Z\362\034?]\212\236>\373\365\023?qVA?\375\226\034\277r\351\246\275\247\311N?\rk\207\276k\231\242=^\034G\277a\001\207\276;\316\347>\237S[>\021#_\276\346u\271>x\245F\300Q\243[\277\341VY>\024\211\016\300\257L\225\274]\326D=\000ce\274G\247I\277a\\\006?:\262\224\276\372\300\332>\206\214\320>\242Q\014?\216\330~\277\307\224%?\350\377\313=\304\341\010\300\257\333I?\211?/\275\353\227\241>ue\357>}\037\026?\331\371H>\260D\t?\356\357\270=f7\324\277t\351\016?\244e\035\277a!9\277M\317\004\277\177\334T>\371\305\016?R\326\003?\332 \206=\366`\341><q\034\277%\373\037?\336\025&>\370O\211\275[\214\277\274\301)\032>Y\300J?\220\354\206\276\224\350}>D*\374>\310\266\316\276T\316J\276\272\336K>1W\203>\363W\r\276] \003\277\216\375\255>\367\320J\277\033F\214\277G\013\333\274\020\353\225>B\251\312\276\343\346\017\277Af\270>\253G\257\273\363\036\326>\3640\311\275\027^<?\216\233N\277\360l\236\300\262\200\205\275h\367I>\316*\034>{\257 ?\306\340m\276%\210\362\275\031d>\276\231e\006?1\374\237\277&\361Y?\236\351\006\276\253[=\276\006OL=\333y\262=+\362\305\275\270\2460\277)\022\342>8\334Z?\320\241\315>\362\3028\275\345\345\335>\251\214\323>\227\3514?\343T\266>\022\014V\277\002\376\224>@\002\221\276J\363\203=^\340X>G\356W\277w\267\376\274\033\237\007\277\273\330\'?\215R\n?\324\020\207>\235:\226>,3\022?\273i\335\276Az~\276\002\301\222\275;{\277>\3779U>V%\236>K\263\007\277#\235 \277\005-\202>\254h(\276\340_\252=\023r\366\276/l\034?\354Hq\276Q\021>\276\250A\326\276\360\034\006?\371t??\200\323r\275E\360\'?CE\002\276\315\325\262\273#!\001>U\245\336<\351{\037\277S\256,?]\256j\277\331>\010\300!\300\312\2763-\210>\252`\'\277\224\352%=x\376\035\277q\211\315>\260\256\222>\302x\016\277\207\343\027>;\003\005\277\362\026\274<\225\034\216\273\260\222\344>\214\005\367\274\343\220\253>\2339Z\275C\265\024?\364-\276\275\222-T>\365\315&>\271\310<=B\020\222\275g\216\261>|a\273\277e\276\240\277\370\307\234\277\346\346Y\276\030:\211\276\345\344\022\275i\250\246>\345,J\276\233\3571>5\006,>\322\365\021\277\357;\216?\325D&>?\306w\276\321x\341=B_\342\276\331\212\255\275\202\0326\276:B\203\276S\237\203>\353a=>\377\340\032=\'7c>\'\200 \275I\311\233>PD\315>\257\017\031>\343x\010>D\023\033>\001\200\272>\220\262\263=\332(\225\277\3538\007?\006\207\001?G6\320\276\276X\225>F0&>\334pW?\3479\257\277\255\256\344>m\304L?\037\237\003\277\'N\n?\277b#=\324\032\320>\325\226f>P\224F\277\315h,\300m\245c?\277L\323\275b\267\231?\357\370u=\362P\370\276\215$\263\276\226\310\377\275ii\335>\002\276\315\276G^\365=O\305|\276\316rr>\021}=>\341\275^>\226T\214\276\327\026\202\276\363\2348\276\r\231\351\276E*\300\276\302\334v=3\003\023?\n\314+>\356\227\307>\212\007\317>\035\010\354=\376\027.?\252\233O?5y0?@\370\245\276\355\223\304>w\222\335\2759\330R\276K\234T\276\022\021!\277\242#\211=\235\316\223\276F8+\277(\260\332>\007\204K\276;\020*?\334O,\277\306*\217=~gA=\234\226\322\275_\330\304>f\024\346<&\024H?\363\260\024\276XV\n?[\337\200?M\246\344>\267\030\265>{\362\312>\374@\204\276\347\361u\276\362\027\301\277\'\264P<8N\r\274\026\316\250=C\377\347\276\001\317\303\276d\035Y>C\211W>\351Z3\277\017\356\310\2778\264\273\275\257\345t\277\006\351\237\276\276\376\272\277\334\241\355<\273\246)>*Q\360\275z\376\006?\271-\205\275`q\"\276J\214c\275\374\341]\275&\002{>U~Z?\034$P\277kHM\300KJ\304\277\214\242\205\276\360\364\376\300\200Y\306>\207\303\207\277\221\266\346=\276\263]=\032\205)\277\021\353J=\211\231z>\362\276\204=Y\346\202= \243\'\276G\374T\276\240PY>hu\303>\305\010\'\276\226\367S\276\214\205N\276\305&\362=\021\377\033>\245\221\216>=\344\312>Mi\001\277\260\244\337=n\225\010?\374IX\277S;\300>\242\201q\277qp\356\274\257\262L\2769p\n>\016r\360>\305\001\003?\343\273\005>:\373\027>J\203\026?\213\264\265\277\332R\252\2770`\217\300\tR\223\300h9\021\277\365\346\241\300t\223\r\300{y(\300\375\260\007>h*\323\276\343\036w\277\375\320;\301\222\367k>\036\212N\276\350kj>\035U\211\277"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\014S\354\275:\212\226\276\303\001\225>\312\265\032\272$@\375\276w.\243>}h\327\276\274\331\372>"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\215\322\035\277\213\014f?\330\221`>\003K\210<*,I>\355\216V>\326Cg\277\030\217/\275\337 \253\276\365\246{?\307P\320\275\221B\360\276\257\225\037\277?N\307>\340H\017?#\243)\277u\214\325\276:\233t?C\367\037\277\327\265\007\277\320\200?\274\310sC>z\201\210\276\221\226\346\276\260\361\220\275~4\005\277\221\000>?Q\303\006\276\373t\366\276D\206\244\276;3.\277\037H\232?|\2375\277A\355\201\276\321\235_?u\377T>\267\014&\277\374}\362\275\304\343X\276stK>\246D\265\276)x\002\277\324\260\013>\310&\024\277w\266\202\276\215,\370\275?\342\336\276-b\253\275\243\007\020\277\236r\205\276\031o/>d\337\344\275\321\031\351\276\265\264\024\277g\313\321\276\311\032S\274RO\355<\345\233\257=\033\311\013?4\013\336\276\365\032\252\276]\t(\277D#\366\276\t\310\210\276D\005\300\276\013\262\222\275\334{l>_\342r\276\230\217\240\276GO\035>\344G\300\276\212\204\225\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.8114301562309265
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense/MatMul"
  input: "decoder/dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense/Relu"
  op: "Relu"
  input: "decoder/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/reshape/Shape"
  op: "Shape"
  input: "decoder/dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/reshape/Shape"
  input: "decoder/reshape/strided_slice/stack"
  input: "decoder/reshape/strided_slice/stack_1"
  input: "decoder/reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/reshape/strided_slice"
  input: "decoder/reshape/Reshape/shape/1"
  input: "decoder/reshape/Reshape/shape/2"
  input: "decoder/reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/reshape/Reshape"
  op: "Reshape"
  input: "decoder/dense/Relu"
  input: "decoder/reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Shape"
  op: "Shape"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose/Shape"
  input: "decoder/conv2d_transpose/strided_slice/stack"
  input: "decoder/conv2d_transpose/strided_slice/stack_1"
  input: "decoder/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose/strided_slice"
  input: "decoder/conv2d_transpose/stack/1"
  input: "decoder/conv2d_transpose/stack/2"
  input: "decoder/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose/stack"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose/conv2d_transpose"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Relu"
  op: "Relu"
  input: "decoder/conv2d_transpose/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/Shape"
  op: "Shape"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose_1/Shape"
  input: "decoder/conv2d_transpose_1/strided_slice/stack"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose_1/strided_slice"
  input: "decoder/conv2d_transpose_1/stack/1"
  input: "decoder/conv2d_transpose_1/stack/2"
  input: "decoder/conv2d_transpose_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose_1/stack"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose_1/conv2d_transpose"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_transpose_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "^decoder/dense/BiasAdd/ReadVariableOp"
  input: "^decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
