node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "Y\336\003=\251c\264=\016u\323=h\263\272\276S\307+=\375\030\347\275\215\334*>\332\306G=\004\030\246\275{\242\206>\247}\244=4\323\250;\332\351\025\277\"8\266\277\267b\323\275\3720b=\265(\203\276\372\235d\276\332s\245\276\201e\313>\022\200P\275M\231\007\276\256\005\020\277\201?#?\017\317\307\274\212\333\000?\017l\025?\305\231\365\277\034\241\034?\265\024%\277\243\331\205=\302\371\034\277p5\221\275\022\3370=B\002\031>\243<\272>\\\351Q>1\216\324=2\275\216>=\013\307\276f\031\262;\n\224k\276u \216\276S\316\020\275\257>\270\276\325=*?\357\253\221>\265\027\270>!\037\236?&\231z\276pZ\211>Q\032\365=5n\201\277M\247\275\276R\032\353\275\206\000\357\274\274\241D\276<\207\211\277\211l\313>!\343\031\274\306L3\276\367\252\204\276F\262\226?\275r\006=\266;\206?\207\214+\277,\351\001\276\241\031\025\300\n\301\247\276\313\366@>\331&p\277\244\342i>2\r\001\276\r_\014?m\3158\277\024^\030?\340\022\363=P\'^\275\021\000\263<\037\312\211\276RjD\277\263\230\346=.^\347\272\327\343 \277V\370^\277g\246\256=M\207.\276\215\035\375=\"a:>\t\311b<\210\233\211>\337H\'\300!\315\351>1\320U=\021*\\?/d\246?\030W7\277\010p\266\274q\300;?\017P\007\274\232\032\027=H\2639>E\311u>\n_:\275\2009\352=\250\024\037\2755K!\276\354\3643=,\023W>|\265\232\276]\257.\276\t\232\367\275O\003~?\036\227\350\276v#\\\277e\321\032<Pc#\300+\311L>J\350n\276[\360\304?@\014\273\274<\036D>l\251\212=\3674\035\276\210M\250=\004n\256=\003f\022\276\240\271\242;@\273\207?w\277n\2738h,>\311_W>\241Ma?#R2\277\310,\334>\256\331\345\276\300\332&\277\355\360\256=\026\206\270>\025\r\007\275\375d\243\277;69\275\215IA\276#\320$\276\217\331\343>\237H\317>F\275\004\276\253F[>\016\206\032?\365/\204\276\364\024 ?Y0\270=\2245\003>R\250N>s\266\352>Q\230\277\277r\240\331\274\216\267\213\276\3254g>0\310)>\370\271\365=\305\312\371\275)\243\333<\254\344\220>5\225\243>\255J\362=\"HV>[b\244>\320,Q>k\356\275>p\256\255>\367\006\245=B\375\212>\235\313I\276H;=\276A\247\200>\210ZN>\242\247\002\277\357L\203>d\234\330>\017\373b\277\372a\256=\322\223[\276\354\357\326;\305\355\346\276<\324\374>\0203\360>\207\305 >G\231\034?\272\"\253?\263\227\232= +\344\275p\327\256\276J@\177>\037\n\225\276\033\014\205\276\331\025\001\277\203\022>=\355\347F=\035b\220>\263%\025?\271}I\277\n\272\313>\225\215J\277wP\273<\027\030\000=\n\317\253\275A\230\014\2767%\351\276&\207\204>DU\307>P\366S>v\347\211\276:\231w\276\014\003!=\0055\250>M\"\303>u\005V\276\024\037\262>&\271Y\277h7\311\277n\265:\277\334\235\263>5\271\n?+\364\036\274\235\301\232\276(\256+>l\030\225\275\310\236v>\252[)\274\247\206\242<]t\r=\331\326\257>\317Z\321>\017\324\266>\316\2414\276\362w\321\275\213\2338>\020Vu?\232\005\204\276\246\031F>\301\214\233\2764\231d>\344E\t>\013c\246?]\344\006?\246\005\025? \364\356>\240\347\035=\3358M\276\354\237\272=\366\316\320\275\030\251\347\274\342\271?>\306E\000\276\000\200\2449Cg\016\273\242.\025\276\311\247\230>\325\333\r\276]\227\206\275b\266R\277\324O\217\275\240%B>\333\222\254=\247\311\r\277(\215O>\211Lx\273\013\347Q>\346Z\204?\317S\253>\030+\270<\tk\324\276aW:>\375\2567\276\352\320\013\275}61?\3315z>w\350\231\275\rD~>J\351\203\275\245\261\364>u\350I?\300CL?\033\376\202?\242\212\036?J\366\323\277\323\234\226@\322\030\226\275S\236\000\275\305\276A>\217\226\215\276z\270!?\017a_\276\263\376 \2761\325\300\277Lj)>\3468\232>\007\037\003?\365\n;\276\216\3218\275O\355\356\276\261\346L?\257\037\261=x_\r?4\216\303\277\267\326\276\275s\262]>\223\3639?\300\236\341\276\242!\255\276\341L2=\177\246(?\"\273F>\027\354Z\276\301A\267<9\215\305\276\\\274\335\275\2772\r?^/8>2\222\236\277\306\247\325=j\251U?\223F\216\301\0268\327\274\227\202\034\276\213\2628?\307\277\234\276|\023C>\030\241\325\276h/\315>\212\371\n\277\202u\026>\364\274\260\276\310?T;\314\252M=bJ;?\260\300\226>X\3226>\241g\307>,\n\000?\345\214\321\276\201\006\032\277\233\261\307>\244\2311=e\022\241=\217\026s\275\276x\016?\320A\205\277\252\036\355=\021W\214\277\316a_@\327\370\337\276\223m\207\275\230n\002\277\020\341\231\276\370\275Q>q\240\274>o{;=\030i\372\275 V\246>\321a\355<\214\247\014>N.\262\275S^\246\276\256\022>\277\273\270\030\276\236\005N\300\034L\023\275D\377 \2770\024\322>X\250\326\276\022\300\024?/\302B\276\214\274\r\277_\370>?\312\223\021\276\261\307\375\275\236\032K\276\324q?>\354\3217=\344zj\275,\363<>\200{S\273\262\321\022>\003\0140\276\370\nB>\376\354\345>\031\001=\275\021\375\347><p%>\031\243[>S\336\220>\253\364\256\273\302\367X\276\033\313i>\263\267y>%\024\n\277\3112\n>JN8\275\253\214!\275\264\213E<\261n\225>\360\020D>\270\210\232>\321<X>i\'\242=(8\025>iE\362>\374\004\304>{\014\022\276/\243\246>#_\375=\307\001\304>T\260p\275U\250\035=z\003\263\275\311\332\314>\005\t\316<\317\277\342\274\362\305\234>>%K\276p$*=&\355\240=\006\356@\274jH\255>\321\006\034>j\260\000\2766\262\315=\230\253\273\275B\317A>g\356\311\275\020\021\261<\033N\306<\003|U>4!~>\2451\241\275y(\264\275\246\336\'\2767\276\334\275g\r\276><\324o\275\356\200\250\274\2150\245\274LE\263=\2162\357=\246\224\224=\357\242&\276\207\215\213>5q\270>B\016\261<\350G\350>\177\314{>\342\360\361>\025\003\006>\250\345\220>\331\270\210>\035L\306\274E\026\254\275,?\340<\244\276\t\274\036\332\201>\276\341\324\275<\006\203\275\376\207\013>A~X;\nd@>\302\220\373\275\336\212\272>RJ\246>\257\321\351=%8\023>\363\240G?\274+\223=\265t#>\013\257R>\207\361\321=J\0002?\010\210E<\371\305\317:f\271\252>\360\223\330>\231\355\323<\374\344F?^\324\212=(,\262>\352\306\211>\016\333\310=\020\276S=\251]w>\026H\277\2748\r\377;\351?&\276\341c\235\274\034\265\266>S\314\244?\224\226\305\276\263\350P=o|\373=\372\0236?\372\033\002?\303r\036?\262\352\'\276\360\211>\277\030v2=\314\252\223=h\376\360=hTM>\336\247\233\275V,H>\200\255`<\224\347\375=h\372\000\276\017\250\016\276\010\232S=\255\235P>\234\036+>\237\220\311>\007\236\022=\260<\204<\274ag\276\325\327\334\276\024&V\276.;^>\245(\340=\211\332\005?#Y\322\275\370X\205=`G\255>\370n\205>\237t\320\276\266\334\247\276\033\t\000?\240.J\276[\375\336>w\265\204>\207|\030\276\253*\321\2761\261;?\210\032\314\277\374\221\025?\231|\212?\240\357\244>p\205~\277\247\315\035\275\215\021i\275\236\351t\276\324\210x\275\313\212\211\276\272\234K=\275\261\207\275U>\247>\341\241#>\010\213\\\276+\220\035\275\005\353\034\276\363\264.=G\027\007?3 \217>\240\264k\276\375\322\202\275\307\372\207\277\255\"\010?\276\246\000>\330\220\246\276m\275 ?\204&\037>B\255\">)\365\274>\022\013\252\276*\334\003\275f\005\236=\225\336\001\277\004\3276?\321\033\r?\312\331\265\275\221\357\t\277\036z\020\277j\220\024>\205&\237\275\251\365\014?\206xo\275\206\210\273>\337\315/\276\302\210H\276\030>\230>\221\304(?\255\250\006\277\257i\304>`\365c\276T\216\020\275\357\001\321=\211\353\006?\010g\024<+XD>\236\220\311\275ga\234\277\030\000,>6\026\024\277-\2323\277r\003/?\266\323\344=\207z\001\277\025\315,=\016h\246?\240\334\372>\245\n%=\377\301\005\300\000\016E?Em\350\275b\231\354=\313\325\014\277y\217l=\3254n?i&\241\276\316\t\207\275\224B\267>\023\255\010?\321Eo\277\337\314\250<\367\361\372\273\037V\333\275+;\222\276d\222\251\277\301\261l\275..>>\201_\240\277%\245&=\366\r\367?\371F{\275!9\323\276\257 \343\277\240i*=\307T#\276Z\3533\276\340v@\276\225E;\276,\206\351=z\242\214\275\\s\014\276\372\244\251>y\365\002\276\360+\232\275\354D\027>\270r\002?\304\205\360>\'\3622\276I=G>(+\027\277\014\372\241\276\211jh\276\005\236\344<9\273\330\2761\205\312=\026,\272=)\352\333=\263\322\365\276\000`%\276\255\001E=\306@\314\276\251\315\270\276\352\007\213\274\3202J?\370X\223\276\370Z\226\276i\313\024?JU\302=v2 ?\256\363\032\273\036\370\023\277\331L\374\276\242\352\222\276\272\205\263>\230I\224>\201\227\313>=\037\016\276\364\325I\277_\332$<j\363\021?\317\300\341>;\226\331\276A\261%\273u\241\257\275d1\376\275\2573V\276\360\035u?\330\304\005\277`\225\310<hp\\\277T\363M=6+\375\276\205\345\325>\025g\253>\003\206\277=t\206$\276\036\254\325\275\371\317\220>\006\036\210\276\022\\\217\2763S\275\275\251\035-\276Wh\330>-d\217\274T\313\226\275\205\336\000?\320\251\003\277\271\373\305\274\t\275\263\277\312\030\024>\2354\207\276\342\314\324\275q\205\263>\263\232\021\277s\034\271>(@-\276;z\211>\360B\016\276\270\022\177=\234\300\263\273\242iV<H\376\301\2752\362<?\326\313\034\276\330\317\005@\005\271\263=\271\206\331>\025xw>\300\230\323<\322\000\013?r\275\003?\304Dx?\207\353$>j\372i\277$^\241\2760\364\003?\346\304I>\255\207\"\277&\366\224>\026j\256=\202&p\276`)\001>\227\313\334\276\0166\363<\315\213\323\275\2751f\276\200\366\262\275\361\324+>\306^\263=4o1\275\251F\021?\231\211$\277$P*\277\272\177\267?\323\253\237?\371Ev\277q\316\257>\010\013L\277x/\377=\021\346#\277Z\356\340\276@M\036;\000\315\362=\0009\334\273\224\247\337=b\250+>\374\215\263=>\343\023>\252\376\017\276/F\031>\001W_\276F\3556?E-\n\276)d\375\276r\277\036=\2230\002\275=\370D\276\316 A=\271i\236>u\005|>\016X\215>\365\240\036\2762\000a>J\254\256=9\344\234<\001\2153?\032\214\340\275p\245N\275\034\211\376\276\325\014\346>\302\310b;\"\216\205>\004L\330\276m\346\233\273\343&\310\276\216\016\250=\264\374\201=4\375r\276W\252\002?A\014w>V&\270>\233%\240<\'L\232>1db>\263\323\020?o\375\230\275\235\351,\276\250\036\016>\037I\"\277\2114\363\274\271V\221\274uy\223>,\\&;Pi\315>\270\231\016\277\242\367\236>\346\001P>\314\276U\2779\363\315\277\2049\007?=\227\273=\275\214\365>X\203\003?u\334\332=j\206}\275\226\222\002>_D\217?\'J\240\276\302\361\266\275\206\353\231>\360G!?c\370R\277\255\224\002\276\213W\247?\345\366\203\277|\243\036\277 \013 \300\375XK\277\366&S>7R\r\277\354\210\253>4\343\024\273@\311\221>\264\271W\276\001t\223\276\275\375\356>K\224\257>j\347\010\276\371\352\215\275C\205\014?~  \276\032\217g>\330R\216>\211?A\276\367\227S\276\333\257\304\275\353\3531\277\340l\023?(\2352\275\220\323\334\274Z+\366?\360\200\345\275\262\307\330>lM\000\277\210!R\277\237\345 \277\205P&\277\232TY?[K#>\275\254\275\276B[5>\335\264|>\322!\342=p\351\000=N\n\303>\260\327<\275\\\254<\276\277\235\277=\315\022\311>\261\006\272>\306\255\006?\3547\301\276LV\231\276\373\234\021\2778ke?U2\300\275\270\363\267>\000\271\351>\216\275\034\300%\2171\276B\306\010\276\010\3449=\342\220/\276\014)\234=$R\333=HZ0>\360\220u\275bH\013\277\262\272\327=\304\237\240\276\002~\300>\325\222\236\276:]`>\366\222\376\276\\\237\354<6B\357=\20426=e\204\246\276\242\223\033\275>\355\266>\357\250}\277\3063K>r\203\r=E\242M<\023\177\007\277\265\177\340>\003J ?\335\006\305\276\223>\264>V\350\320\276\307\373\350=\377\227\316>\376e0\276\007\205j\277 $6>5a\206\277\024\226\366\276Uq\210=\242*_\277\205\305\347=\262\234R=\331v\217\275v\262\010\276\354\326\234\275\002\\\221\275\010J\031\276\231\033\324?\354\217U\2745s\364\272\317[\244\275\257r\356\275UN\210\276I\341\336\276\325\000]<\r\354\006\277\220\r\000\277\201u\361=A\220\377>\rD\031\276m\246]\276\005\255[>cL\366=\327e\032\276\014\350\252\276\366\323\267>\371\232\000>N\235B\274\346\230\323>\032\213\265\276\337<\027\277v.L\276\r]\260\275\210>\273\276\310\002\253\276\n\013\252\277\353\332\372\276\272\342\213>\033H\344\275\311ye>Ft\351=\246T\230\277\002\273\321>>\033#\275\331\211\026\277\263{\003\277x\031O\276\304&\360\275x\324,\277\010\"$\277\321\334`=>\251\216\277\373\2635?c:\230>\354\211\004?c\266Y>@\307\r\276\312\361\r\277\212+\032>m\005I>\033\346=>#\001\220>\252l)?L\253>\277x\007X\277\246{\201=V\032\253>\227\372\265\275\245\274q?t\365\031\277u\230\210>\2007$\276f\222\253\275\345V\244\276b\302C?0F\241<{&\321\275\330\351\n\276\026\251\216>\267\302l\300>\356_>v\240\237\277\342\303->\243\010\031\276J\336\230\277\335\340\353\275w\240\013\277\343<\027?\000\234\257<\330\203L\276\250-\306=\200dt=\320\205[\274\263\215\340\275\200\207\322:\324R6>\007\030\014?\376\021X\276\2322\213?{\200V\276/\tc?$z\224?k\245\252>\225\244r\276S\204\314\275v\230\261>\233\024q\275xkZ=\251R\226>\267Jf>\367\226\013\277Z,\007\276}(\302;s\362\312>\376\370J>(\033\210\277\3173?=\336\260+\274\267~\263>\235,\277\276%\345/\277\337\351\260;W[l>\375I\003\277\340<\273>\207\031\325\276\315v\366\276G\304\001\300)\370\021\277 \227)>J70\276Ev\020?\266\003\273=x\351\017\274u\346\221\276\233\\x\274O\375\251\275\217+s>D\334\241\276\367\326\017=4\3124\276a\357\217\276\016\211\t\277\t\300\264>\024\224\340\276Tw)\277\"c\311\275\314\370\021>\245>\336>\256\001\014\277\303\021\257<|v\005\276\035\276\246<\263\2612\277\240\014\277\276|f%\276\340\326e\275\205\036\210\276?\215\211=\364\3316\276v\225\010\277vS\225>\331\256\237=\024\202~?i\020(?Rv\347\276w\227\266>&\313c=\345[V>:\303\024?\361\327\022?@\203D<\357:\364\276!?Q?|,%\274\023\237<>\303,7?;\270g>9\234]\276\002\373\t\277U\206\355>\306\\\004\276\271#\303\275\317\027H\276\024\257X\2742\217\306=\314\262:\276\017c\\\277\322\361~<0\265\207>\333\255)?aG3\300\267\233\275=Z\033\363\275\2000h\277\212*\026\275\257\246W=\305\357)\277\242\264#\275\263a\323=\355~\267>\240s8\276,=\r?\251\341\n\275\354\357\204>\221\361\361\274\345R\326>q\366\204>\243\252\277\276M:5?G\242\004?U\033\311<C`\225?\364\226;\276d\020\230>q\203\001?T\335\231\275\320\315\243\275\360\332j\274\\\336\201=\2703\357\274V.;\276\354\261\331=\000\036\315=GG!\276eZX\276\351\304+>*\372\315>\223\202\224\275Z9r>\361\343D=\021\246\\=\315.}>\032<O=\262\026N>U~\255>\352\004\336<\230\334\270\276\242j@>\226Q7\276MG\023\276\255\230}\276\3506\211>\201\226t\276\251\310\212>\266m\365=H^}>\353\271\263>\267\310\007=\236\376\273>\032\267\206>NG\267>\224\360\244\276\357z\273>(\350\257\276\305+y\277\363\326:\274\340\314\034>\354\321\352<\203\343\010>\231\263;<\027\"\375\275\204\273T>36E\276)uA>\346\"\207=Za\322\275\00680\276\214\034l=LKS<\374\376#>~\315\014\276\316\334\350<\230\341\362\275?z >\304\310\215>\354\016\210\274\371t[\276i~>>}\323\250\275\250\002\325=v\375\035>\"\254}>\237\351\034\276X\371\243<\204\005\310=\323N*\276\265\332,\276T`H>i\223\013;\016\3437>\323R\310>C\t\203\276\207z\006?3\323\351>\370\352\007>\231\302z\274\022^5\276\335\037 \275\260\321\">\237\037\345\275^@K\276R\317\007\276\257\256\205\276\005\3311>\035\317^\276\264\033C\275\265\265\243\276\034\035\305>\252\023m>\232\310/>6\370y=%4\021?\221\024\204\276\347j\261<<\rK\273\240\333$\276\265\264\373>/\330\370>Yx\216\277G\000\232=\276\330\312\275\211\336V=0|\202>\252qc>\205\301\277>m\374M>,k\255\275v\247\255>U\343\225\275\302\211\231=\375%\336\275\377\326\013>\267?\251>\373xa>\375\036\226\277X\274\t\277\022\224\261\276\345\322\204=\342\206\001?Z\361T?\343\374\\>\326\257\345\275\2102\364\276>\004L>\320B\221< \344\251<\330\364\323\275\036A\255\275\020\0229<\304JO>S!\366\275!\207\205\276\361\206.\276\314\350w\276a\302\013>\204\217\027\277\330u\275\274\230j3?\366\334\016=r;\231\276\214}(?Rv\257>.\340\033>_\203A\275\351\361:\277wY\242>\217WP=\345b:>\313P\377>g\313\327>*\244\234>\326hR\276t\'\340\276\321\005/\276TLF\276\267\317\037>\230\026a\274\177]\332\276\002\223\313>\254\253\267\276\351*\336>W\307\324\275\037\350\232>\242\201,>4AI>\226\235\365\2760\177K\275\224~\330=\301#L=[G]\276\212;\330\275^t\252=\033\330\332\276\n\337\272\275_\204,>\010\220\213>:1\316>\3736\023\277<\032e>\212\240\006?\177\326\000>\016FR\277K\243\306\275\027\207\n>\202\321~>\t<_>\016\204Q\274\340\266\241=\'v5\277\005\311\302>\370\201K\276#E\313\276\236v\013\276\366t\267>DY\254\275\251\032>\277\271\316\351\275\213V\273>\2470\226\277o\205\">\233\024\263\2772\252&\277\016\374\366;e\357@<\330\343\217?h\363\022>\312\t\007\277lS\365\276.\306&?R\026\232=\030\2360=\226\376K\277\353\274\r?n\207]=`\346\365\275\336\005\t>\337y*\2775;h\273^\335\332\276C\340\314\2763\026\007\276\020+\333=\212S_\276\344\332\020?\377\246\010\277\272\231\347\276\241\226\013?\202\001t\277\023\337D>\252R\265>\027\2172>\222\tf\277\276\362C\277m\027\230=\032\273\021\275\346.3=$5F\2762>\277<\030\311A\276b;\361>\17737?AI\215\276\302\3627\276\220}\357\276\027\334\220?\371\360\255?)\277\305>\310\025\360>T\240\243\277\r\315p?\271T\304>\331\215/\276\360 ]\275\010<\014=\260\357,<\014A\304=s\327\357\275,\242\035>|\205\r=cY+>\210/\324<2_=>\367\265?>\303\214_>9\'\035=u\316\207\275\250\351\027>xQ\344=\007\034\004\276\232\004\260\275\262A\273=\357\\z>\221\345\013\2771g\'\275rG\016\275\355\350G>\242\305\006\276\306\306j>X\321\232>\235\035\237>\313\261.>A\337\206\275u\376\217>\320\212\242>\226\rY>h\310\013\274\3517\203>\276\271\210\274\036=Z>\034\312\352\275\206<?>\311\032\231=\206\330\253>g\366\222=Sl\013\275AT\215>\226\t\026\276\367>\225\275\367\222\261>t\007\004>dj\211=\251\005==)\227\263\275\223K\236=\223O\t>x\342\\>\271\274\033\276\334yA>\323\007\022>\026\2756>\240\307P>;-\274=yi\371=\327\007\004>M3H\276M\375\271>\216/?>q\2240\276\273@<\276\200\0339>\266\241\336=\363\362\207>\322\356\005\276N\037\261>T\320x>\022\033\327<\341\362h?S\363\007?\365q|>\263l\265>\334\311\035=D\230q=\353&A\276\323\243\331\275\2303<>K\005\221>\367\230X>\024\014\343\273\360\030E\276\353\230/>\351\347\323=\016\201\020\276vO\237\276\257=\325>[|\245<\212 \017>H\221\260\274\335@\377>1\037\367=\n\224W>-\002\303>\322\302)>\365\033!?\350\361\001>;6\254>o\235\347=\3665\037>\2206\017\275\312\337\003?\326/Z>\376_\030>\315\t\200>\005N\364;\001\307\230=\360\366\203>\034\000\377=9\037\356\275|\013[>\221\200\261> \360\211>\261\356\032?Z((\277\020\231\332\275/\351L\274\006\205\320>\302\362>?n^\246>NS\n>BR4\277pM]<2\256(>\350\2542\276\005\367\021\276\235U\252\275Xt=>\034\037\255=\255\030\243\275\005+/\277p\2123\276\242:\352=}v\032?f&\274>`R\273>&\274%>\025\371R>9\357q\276\342n\022>\205\022\372>\026W\251\275\337\316{>\314\331\326>\037U1?\371\362\232\275I{\330\274\303\331\n>\3160\214=\351\270@>>\245U>x(&>\020\363\330=\355\204\241>;\212\371=\032\304\261\276\345\204\263\276l^\030\275\317k#\276\322\027\353=\247?\322=E-\003>\033jX<\367\216\264\276F\246\260>O\026\376=bwD\275`C\260\275Y\001\006?L\364)\276h$\031\277\373ZS>\222B\027\277\352\373\021\276\363\027\'?\027\260\001?\234?\252\275\216Q%?Y\330\246\276\'k\300=Vh?\274\3779\337\275\034\004\247>\'\367\261>\212\032\314\275\311\200\023\276\025\241$>X\314\242>T.\037>\271Y7\276$\241w<\335\020\024?\301\\\254\275cD\374=\377`\256\277K\334 >\224D=\276M.\212?x^\315>\232\361[?\213v\027\276\320\2106>W\"0?\005\276A\276!\265\350>\333yu?\212\347\323\276\2033\226<G\000\036\276\350\274,>\375\316\253\275\375\2514\2760\003\260\276\251\367\210>#\307`\277k\177\201?E\215\033> l\355=F\340\254\276\355\376\036\276\255\004\376\276x\023t>i\3204\274{V\n\277rn+\275\030\352\037>]P\024?\027\251\357>\024J\270=UR\210\276\277\250\027?\367\250\367\275t\245\014\277u\262\255\275\354\264\223\276\356\255\'\276\3371\027>\233\222\n\276\240\332}>m_F\276\261\262\221>\025\322U?Tf6?\330I,\277\235\010\036\277\273\340\306\275\345G\031\277?\221X\277\315\226\332=a\242)\276\350Us=P>\220=\326\033(>\370mI>Td\266=\373\016>\276\270\017\215\274TU\207\275A|G\276@\254p\275\272\355]\276Wn\001\274\253\034S\2769\006\233\277\002\014\231\276).\205>S\371\273\275\341\343\360\276\026\271\236\274\205x.\276\223\345\212>1\324\"?\003x[?\037]\361\275\206C%\277\003\032\311>\306\324\330>\277 D\277#pX>v\366\r?({\023;\374$d\276\304^\361\276\254\234\224<\247\347\">sW=\276\276a\301\274\276\207\226\275g\217L\275\232\0134\300}\321\001?\314\234U>\230\332 =\017\232\374\276v\310\311>\351}G\276|\355\371\276\010\360\341\276\253u3\274\324y\321=\246\303y?M@\351=\016\"R\276\313\276\320\276(\237L?\322\242o= \\\025\277\361\2326?\241\356\254\276v>\250=s\234\374;\317\t\347=u\016\177\276\233\263\354\2746\325\241\275\224\317\234\277yK\251\2754\342\351=\226d\263\275\031&\305\276#\262\325>c\212\235;\321\276v\2767`\343>p\r\374\275=\377\004@f\037\016>\377g{\276\244G\221>\335\244|>u\253&>\330A\037\2770%\013>\354q8\277\036\265\370\274B`,>\234L4=pb\026\276\242\333\365\276\231B\333=\244B\014?\340\375\371\275s\211{?\201P\033\277@] \276,\341M\277\254\267\333\276I\216\365=\235\260S?P\212g\275xu\235\276%\343\001\277\222\366+>\372\t\'\300YfB?(u\326\275\023\230\305\275\r\273\256>\37675\2764\374\030\276d{_\276\232\242b\276\355<}=\262O\236>\2343N\275\317\016B\276.y\211\275\270\240\350>\373p\322>\3217\351?\017b\361\277\343i\220>\373\321=?h\225B>R\367\244?\244\202\227=\243\341\024?{F+\300p\002\032\276\220\337{=\210\275&\275\353\202\245\275|z\363\275\340\305\304<\210\020\316\274\353\227I\276\366\214\304>\250\244\036>\347\\\224\276#\213\244;\316P,\277e.\224>\270\035)=\204\006\020>\332\364\017>j\273N\277\237\372\002\276\327)\224>\304\230$\277\347i\017?\345\220\361\276\0204 \276)\257\025?\220\001\333\276\352_1>\251\346|?\340B\014\277\306\330\306\276U\355\324=\274\310\211=\246\377\031?,!+\276|i\200\277\003\220\233\276\326\342\241\277\233yt\275\307w%?\365K\345\276\323sw=\306\375l\276\344\316_>\243\3413\277#\372\215\276\r\254N\275\'\321\221>\323BO\277\005\206\323>\221\356\321\276c\313\277>\312|\'\276\363\356\302\273ASa>]\373\037\277\033\270\227\277\310\371>\276)\332\251?A\336\333<\225\351j\2768]b\277\210{\263>\225\365\271>\215\261\246\275S\275\001\277l\234\352>\345\t\226>F\340\356<*I\006?\031%\252>\177B\336\276 @5\276\274<s\276\364\253/?\266S\353=g\201q?\323T\371>\023*d\276g\236\020?|A.\276\274\365\252\276\007O6\277Y\360\333>7\366z\277\206p\007>{\302\005\277&\252\014=$\270\201>\301\214\014\277D\205\275\276m\377\200=\0337k\277\340\210\240>\313\251\265\276\345\213Y?s\365\035?:\020\032>\307\022s\276\025-i\275H\314\225\276\'\216E?\"E\033?crm?\353\330\307>M\271\206?Hk\\>/\340&\276:\031\017?C\177K\276N\242q=\030\204\346\275\302\211i\276\316I\374\276x/_>7[\350\275\245\3079\2747\370V<g\257\266>y\262\264\276\311\334\035@O#\236\277#\\8?w\"4\274\276\272\335\276]\261\242?(\211\025?%\325?\275\306\313~\300$\005\033>\240~\272;\362\375\014\276\320\010\010=\224\033A>\230\307\327\275`4\"\276p\322\356<\236\203L<d\311\267=$O\004\277\320\201\037?\222\224\213\276\031ej\276\336\303\266>\354\034\002=\231\222\357>\222\366\370>\220\247\271>\207\350\326\275\227,\020\277;\033[\277#\203o\275\245\250\000\276\216\022\265=\360\002Y=\010\331$>9rN\277\352\363Z\275\374\273\263\276y\310 =\216i\223\276\032\226\357>s\345\223\276\032\272\234>7J\n\276\314\220\314\276\262Y\246=\367\201\244>\310wa\2774\3475\276YtG<&\022\250>A\213\004\276\214G\274=\335\367\003\275Ag%?\305\245\232>\202&c\276\364\240\324>\351\373\370\276\356\352%>\256\231\031?\250\371\306=\332\304#\277t\010\205>\340\002\214\276\265Z >/h\213\275\226\305\276\274\311\353C>\262\027\323\2764\255\037>\200\026\210\274R\315\233\274\256a:>\326\024L=\nfZ\276T\235\313\276t3Z\276\324\336\"\2774\335\016\276\2654\330\276\373q\251>\271&p?X[$?\300\367\337\276\351G\347>\\j\254=0C\004\277;\354Z>\242\343\010?^\315,\277i\3078?\025\256\341>\372TS\276\276\320@\276\032\325W=\337\352\355>#\243\001\2763\372\006\277\026\272\233>g\356\300>R\376\263\274\027z\324>X\030\252\2773s\200\276\371\030k\276b\207\273>\224\261\021\277I\215\214>q\275\271\277\235\257\235\27700#\300\367\206\205\277\274\0260?.\263\370\274\256\035\010>\357\004.\277\240\217<?\315\376P>\314\026\226\274\225\211\231\276gD\240\276\357\r\223\276\205n\207\274\343c\"\277\242\355\272\276\351\261p\277\251\300\031>\351\253\\>\231_-\277N1n?\355!\335\275\255\350\364\277\336\276,\274o\270\\\276\257\000\355?Xd+>`\333\324\275\270|\223\275AeF\276\330=\301=\3719:\276\200\260\377<\233\332\262\275"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "249\275\350\213\243\274#\032\316=\272\333z>\314\367\330=C\363\273>\277|\264=e\375\364\273\335|{>\237\221\335<\312\273:=\261*\225>Q<\255>\204\257\315\276r\207\013\276\327\220\261\274\226<\025>\311(\322;pv\342\275>\365\267>\036\340\332>\307l\t>\260>\325\275\242\rr>V^\314>0A\317>\206\370\225\275?yS=\265:\267>\372\225\241>\374\252|\276\300\322\326>\366\221F\276\004\230>>T\267\376=\250\364;\275\351\254\345=1e\215\274Kv\252=\332\270\311\275\377\214\021>\3053\027>\262\2174\275\"k\353\274\244\004w=PS\365\275\206\350\224>\317\3745\276\323\332\240;\n\262*=w\346V>$\2103>\245\243\377=\206\013?=\200\364\244=%s-\274>\376\202>\2722J>}\265A\276\365Ig\274A\370|>\210\210H>\301Nu>\343\314u\274\023\252u>\177\313\366=\013U\221\275\266\257\251>s\310\307>vC\220=\305\277>>j\267\236>\232\242v>\271w\243=\013\361\017\276\367\t4\275\221\201t<\024\344\352=ksE\274\013ZN=P\232\327=Q\000\231=\330w\003\276xzq\275\325W\356>\235\377->\346\n\244>f\300\225=\227\346\032?\263v\254=\337\0251>\330\214b=,\323\225>|1,?R\321\240\275y\273\013>\315c\257>\221\006\207=\253\202G\275-\276o>\2569\324=\006p\212>\276\317\367=Q\324\034\275\002\271\003>.\321]>4\2111\275\017\217y\275>9f=\266$\n\275\360nM>\350\350v\276k\3216\277\016H\224>\243LT>\217\0039?\347\302\261>\225\222\031?\252\256q>\336\356E\277\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "[\244{>-1\300?\224\320:\276ue\303>?2\267\276\270\247\022\276\362\257\177?\034Y\232\276\366Y\033?>\203?>\265\331\213>\'\372\347>3&\022>\302\'F\276A\376\262\276|U\031\276~\3516\2773\036\222\275G\321\237>\341y\230>\003J\343\276v\205\276>\355\350\267>/\376\257>)j!?\351~\206>\304\277,\276\025\340\275=8\255\031?\303\250~\276\343\n\216=U\325\333\276T\366!=s\351\236>\241\340\227\276\375E\037>(\223\364=\364Jw=\036\336W>\250\353+>\360\251\231<\262\244\362=uFx\276\222r\021>M\374j\275\315\217V?\234\266\025\276&\024<\277*\344\310>6\324\224>\236\361\210=h\007\"\276\312\317\\>\221\276J>%\327\014>\246c*?\017\234\255\276\267\201[\275\367\236\266?\347#\335\276\001Ug\276\240\003E>3\326\316>z\302\025\277V2\264>{\347\"\277HB|\276\331\304Q\276wj\311>\361\206\327>\267\322=>\346\023\321\276r\245\370\276Cw\001\277#\033\227>KZ\n\277\202\234\347\276 \274!?\267]\273>\337{\224\276\245f\027>\233\207\324>Yc\265=m\014\272=`\013\020>\240\311\227>B\307\022\276|u\272>k\331\003\277\301GO=\207z\244>(:\233\276\255\216+\275\243\242\375=\234_\032>\261&\370>\027\216A>\364X\037=\273\013K\276\215\240\303\275\317\302\306\276I\313\036>\355\326Q\276\340\345N?*LF>\033W0\276[\030h\276\001\273L>\216d\311\275\276k\005<\273\316\253=\310\200\247\277\270\205\000?\034<;>\237>p\276\r\355\002@\020e\3629\"\267\003>\267N4\277f\022`?JY\014?|^\003\277\202\347X\276\013`\230>[D\016\277k\235\020\276/B\223?\366i+?\022\333\005\277\223\255!?\033\333\237>\367\261\245\276\020\265Y\277\214\n9\277d\306\034>Z\004\355\276\306m\034?\\\234\306\275\343\313\303\276\371\227\203=3\267\244>2E9>\312*\210\276=\313\375\276\235\336\'\276\257\277)\276\267c\264\276\005\273\321\276\320\327\037\276\230\354\302>R\361\001?\272<\001\276TN&<\276Q\225=\247\267b=P\343W>S.o=\316z\273\276h\374.>\206\364\357\275\270\216\241=\256\272\203\275\025\346@\276x\305\001\276\355\326\225>\211*\272\275\270\004H\276\327L*?M?\272\274\233$\264\276R6<>/i\241\2761\237\257\276\3034\016?\007\353\255\275\n\335\377=\253\245\222>%G\362>\347\033G\277-\315\235>\203\327\300\276\027\303\206\276\346\250\334\276\033\032E?\306\034|=\317\2454>\320Gg\276Zk\275\275d5\227=<\373\357\274\360\021\'?\216\317\177\276\215\036|\276\204\214k>\253C\326>\363\337E?\030\316\021=\245\253H\275\n\241\276>\014\230>\275\340\021\307>\330`\301=\302r\212\2728\212\220>\317\374\330\275\007\250\323>\037&\227>\204\324);t\nW\276\360\344\n\277(\366\243>\203f\270\275\242\000<?\202`\'\276i\227\337\275\033\277\317\276\312\3217?D\t>>\220\000\332\276op\266>\325~\033?aR\021\276r\266\336\276\253\330\352>\273w\r\275\264\213\313>\245\233\313<y\017-\274\204q\204>2\034j\276\014\341\260\276\016\373\374>\023\377\005\276\237\241\031<y\202\375\275\016(\316>\300\274t?|\312\">\3505\303<\277h\277\276\206%\213<,\3204?\211\357\223\277\226#\351>\225\0015>\240\243S\277\006\177\'?u\300=?\254\366C\276\200ql\276\177Q^?\nWM\273\000\204\310>\260p\r?6\016\222>\231\250\315\276t\213\304<\320\002\n>8\347D>\035c\016=\250\267\305=\255\231\304\276\314\345\324\275\255\204\035\274\213\010p>\242D\224>w+o=\303L\227\275`U\362=\277\351\020\277\367\177\">\352\320\231>\244\373\333\276\336\304\017?\214\255\023\275h\323m;6]\203;\301\264H>\327y\n=\203\251\t\276\036\344-\275\004\276\026\277\232\356\034>\312\010A\275rt\201>\333aI?2>{\275\014;\212=&.\353\275>\352\372=\330\3048>y\022\240\276\371\307u=I{%?_\260J\277\212\013\245=\357\031\332=S]\223\275\357\013\304=\250\344\312=\276\337)?G\271\r\275Vu\276\275]Hq=\335J\220>\007\306\005?d\002d\277\361\231C?\205\275/>/\347S\276-\347I\277\0070J?\261\007Y=\230\370+>\034x\220>`*\224>\016\333\260>\037\201\233\276-d\354\275\273\245T>3\037\265\276\364:\362=%S\310\276\201\345\203=!U\267=\366\346\350=\177\223\252<f\271-\276\262\374\243\276g\307\243\276\022+\255<\300\245\033=<\231\017\276\200\366\376\276\001\205+\274\333\221Z\277p\027\325\276\nb\331>D\'\335>A\304->\276\202\007?G\245K\277,\304\031\277\033\327+>\242m\374>[>\n<(\270\327\276)\330\020\275\245H!\276}\254*\274\226\260\320\276\344\\\\>7\232l\277\225\360\016\276\272I\343\276\227\005\351>\312\034\013>\364\366\372\274\3644\315>R[\243\276\0026\006>\211\250>>\214V\317=\314s\203\276\\\305\252>\010\204\201\276\223\363\345\275\r+\350\2755\2161>\375\013\007?LE2\277&\346\264>\036\225\313>\262-\200\276\221\337(\277\273\370\330\275\343\013\347\276\201\255\231>p\372\314=\255\002[\276VZ,?\311$\201\275\350!n\274\2548\211>\035\264\032\276[\231\211>p`K>H^\032\277w\367\032\271\234`\033>4\306\226=7m\220\275\372\242\201=\275\024\212> \177\200\275g\366j\276\301S8\277w\2350\276\372\244\374>\317\267\371=\177\305\217\275\326\225\257\276W\332W>I\246\276\275\343\356,\277\t\014\242>w\3006\276\222R\272\276\351\263.\276U\376\267\273\016\3123=KY\234\276\231\331j>\036o\332\275k\n\324\275\0065@\276\220\006\264>\252\227%\276\014\311\206>L\230z\276\2301\010\276\370\227\252\2764b\210\276(\366W>\337ed>\215\353a>T.\006\276\370\3107>$6\336>\371\233\022\277\362\355X\276_\266\257\276\342\365\036\276\343\021\205>&\205\317<\226H\352\275\201\017\352\274\375\342\340\276\215L\200>\016!\204\276~\017\345>\024\3232<\027\202y>\346\3153\275PR`=\330C\316>B\223\220;O\\\376<o\336\326>x\266\327\276S\002\017?\247\340\024\274q\360\351>D[T\276+\323\203>L\250\232\276\352\026\276\276\312Qh<\372z\342\275\034\333\315>\273\216\"\275\000\016#\275\027\243\202\276\024\314\377>\351\317\273>\030$\202>l\222B\276\251\233\253\276\020\323^=\3021\">\035{\014>\025?m\276\301\\\334\275\2516i\276\360\327\231>\003\323\n\276|\n =D.\323>xG\362\273\272\254\223\276\\{\306>\316\233\007\276$\024;\276\277\3542?\365\'\200\275^a%\277\357L\376;`\355\226\276R?a\276\346\024^\276\226UJ>\325\257\203\276C\334I\276\257\310\t\275\352\216\367>\271aW>=!\266<h\236v;\006\310\221\276vI\245>/\243j=\273^I\274\340@\323\276\346\276\341=\232\004,?\263,\227\276]?\255\273\357\352$>eA\335=6\256\032\277\222\357:?\360\016\213>\272G>\273!\037:?\246\n\344>5_\275>\022\324%\277\361\343N=3:\265\276Z\260\210\276\331\362\347\275/zV=\317\200R>\361\202\031\276\014\024\363\276\346Uc\276\022\352k>\265\232\252\275\350\270\350>\r\032\222\276BV\\\276T\213\014=_\262-=\364Z&\277G\'\242>I\034e>\351\202\021?)\261C\275\213\224\204>\020R\223>\200\367\020?\270\235\n?\334\"\270>\321\232\253=\026p\325\275\350\205\222\275\320\227\323<\325\361\245=\331\277\212\275\226-\252\276\305#\304=\324\215\366=,\376\216>\361s\026\277\204.\230\274\205\317\302=\'\232><0\212\372=\246\301\201\275.\343\225\276|F\205\276\217\347F\276:\014\361\276\2340#=GG\003>j\247,=_!a\274\274\020\246\276\330V\255>\355\307\257\274f\327\313\274E;\351\275\233)W>\t\262c>\220\220\n\276Y!\322<"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "h\256\342>l#C>\326\256\030>\323\221\302\272.\246.>\242\026\035>\311\351\304=\2165Z\274"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "D\340\027\276\014\010\371\276z|\310=#E\227>\255\242L\277\265\334\370\276\206\341\030\277\343+\202\276y\274\245>\037U\200\274\260\343\254\276R\3546\276$\252\201\276\0262E\276S\007\360\276!l\330>\2138q>\321]\223\276Bd\017\276\347i\276\276\177]e>\"N\022\276-\336\272\276/\177\370\275\333\007(\277\313z\231>\020\315\303\276ta\270>\202\n-\276.\200\013\276\267\017\353\276\'{\200>A\331=\276&9+\277\224\'H\276\256\207\344\276@\202\016\276\217f\366>Z\264\342\276J\372\301>\276,\365>N\241\231\276fF=\276\014\331\235\276\240E\206\276Q\323\257\275\343\244\252\276t\007\017?\t=1>\2273P\276(\324\260=G`\030>\254\356\020\277\022\316\r=\274\351\212\276}\335{\276\032|O\276\376\234\025\276\256\237\311\276\305\357\030\277>9\277\274\264\037\306\276\340\311\275\276\023\370Q>!X\211\276A\243\215=j7\270\276\002(\274\274\370\212P\276%\2534\276\340hc=\252\266\014\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.13976432383060455
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
