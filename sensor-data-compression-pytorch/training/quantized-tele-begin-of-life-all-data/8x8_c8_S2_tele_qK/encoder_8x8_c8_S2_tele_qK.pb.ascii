node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "encoder/encod_qa/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/accum1_qa/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 512.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/input_qa/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/input_qa/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 511.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -512.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 512.0
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content`?\000\000\300>\000\000\000?\000\000\000\276\000\000\000\000\000\000\000?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200>\000\000@?\000\000 ?\000\000\000\000\000\000\000>\000\000\000\000\000\000\300>\000\000\000\000\000\000\200>\000\000\000?\000\000\000\000\000\000\000\000\000\000\200>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200>\000\000\360?\000\000\000\276\000\000\000\000\000\000\200>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\300>\000\000`?"
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 16.0
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 15.0
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -16.0
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 16.0
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/ReadVariableOp_3/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\000\000\000\276\000\000\000\276\000\000\240\277\000\000\000\000\000\000\200\276\000\000\000\000\000\000\220\277\000\000\000\300"
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 16.0
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Pow_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Pow_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/clip_by_value_1/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 15.0
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/clip_by_value_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -16.0
      }
    }
  }
}
node {
  name: "encoder/conv2d_0_m/truediv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 16.0
      }
    }
  }
}
node {
  name: "encoder/accum1_qa/Pow_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/accum1_qa/Pow_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/accum1_qa/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "encoder/accum1_qa/Cast_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/accum1_qa/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 11.0
      }
    }
  }
}
node {
  name: "encoder/accum1_qa/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/accum1_qa/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/accum1_qa/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "encoder/accum1_qa/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/accum1_qa/truediv_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/accum1_qa/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
      }
    }
  }
}
node {
  name: "encoder/flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\200\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 16
          }
        }
        tensor_content: "\000\000\000>\000\000\000\000\000\000\300\276\000\000@\277\000\000\000\277\000\000\200>\000\000\300>\000\000\000>\000\000`\277\000\000\000\000\000\000\200>\000\000\220?\000\000\000>\000\000\000\276\000\000``?\000\000\000\277\000\000\200?\000\000\300>\000\000\200?\000\000@\277\000\000\300?\000\000\000\276\000\000\200\276\000\000\300\276\000\000\200>\000\000\300>\000\000\300>\000\000\000\276\000\000`?\000\000\000\276\000\000\300>\000\000@\277\000\000\200>\000\000\200\276\000\000\000>\000\000\000\276\000\000\200\277\000\000\200\276\000\000\000>\000\000`\277\000\000\200\276\000\000\200>\000\000\000\000\000\000\000>\000\000 ?\000\000\200\276\000\000\220\277\000\000\300>\000\000\000>\000\000\000\276\000\000\000\000\000\000\000\000\000\000\300\276\000\000\200>\000\000\000\276\000\000`\277\000\000\300>\000\000\300>\000\000@?\000\000\000>\000\000\240\277\000\000\200>\000\000\000\000\000\000\360?\000\000\000\000\000\000\240?\000\000 ?\000\000\000\277\000\000\000\277\000\000\000\000\000\000\200>\000\000`?\000\000\000\276\000\000`?\000\000@?\000\000\000>\000\000@?\000\000\300\276\000\000\300\276\000\000\000\276\000\000\000>\000\000\200>\000\000 ?\000\000\000\276\000\000@?\000\000\000\000\000\000`?\000\000\320?\000\000\000\000\000\000\200\276\000\000 \277\000\000\220?\000\000\240?\000\000\200\276\000\000 ?\000\000\220?\000\000\000>\000\000\000\000\000\000\000\276\000\000\000?\000\000\000\000\000\000`?\000\000@\277\000\000`?\000\000\200>\000\000\000\276\000\000\000\276\000\000`?\000\000 ?\000\000 ?\000\000@?\000\000 ?\000\000\200>\000\000\000\000\000\000\200>\000\000\200\276\000\000\200\276\000\000\200\276\000\000 ?\000\000 \277\000\000\200>\000\000\000>\000\000\360?\000\000\000\277\000\000 ?\000\000\000>\000\000@?\000\000\360?\000\000\300\276\000\000\300\276\000\000\320?\000\000\000\276\000\000@?\000\000@?\000\000\000\000\000\000\000\277\000\000\000\276\000\000\260?\000\000 ?\000\000 ?\000\000\000\000\000\000\200\276\000\000\300\276\000\000\200>\000\000\240?\000\000\000>\000\000`?\000\000 \277\000\000\000?\000\000\000\000\000\000\000>\000\000\000\276\000\000\000>\000\000\300>\000\000\000\000\000\000\000>\000\000 ?\000\000\300>\000\000\240?\000\000\200>\000\000\000\000\000\000\200>\000\000\000\000\000\000\200?\000\000\300>\000\000\300\276\000\000\000\000\000\000`?\000\000\000\276\000\000\000\277\000\000\000>\000\000\000\000\000\000\000\000\000\000\000\276\000\000`?\000\000\200\276\000\000\000\276\000\000\000\276\000\000\000>\000\000\000\000\000\000 ?\000\000\000\276\000\000\200\276\000\000\220?\000\000\000>\000\000\200>\000\000\260?\000\000\220?\000\000\300>\000\000\000\000\000\000\000\000\000\000\000\276\000\000\000>\000\000\000>\000\000`?\000\000\300>\000\000\200>\000\000\200?\000\000\000\000\000\000\200\276\000\000\000\000\000\000\300\276\000\000``?\000\000`\277\000\000\200\276\000\000\200\276\000\000\200\276\000\000\220\277\000\000\200>\000\000\200>\000\000\000>\000\000\200\276\000\000\000>\000\000\200>\000\000\360?\000\000\300>\000\000\000>\000\000\000>\000\000\220\277\000\000\000\000\000\000`?\000\000\000\276\000\000 ?\000\000\000\000\000\000@\277\000\000\000\277\000\000\300>\000\000\000>\000\000\000?\000\000\300>\000\000@?\000\000\300>\000\000\240?\000\000``?\000\000\300>\000\000@?\000\000\300>\000\000\000\000\000\000\300>\000\000 ?\000\000`\277\000\000\000\277\000\000\300>\000\000@\277\000\000\000\277\000\000\300?\000\000\300>\000\000\300\277\000\000@?\000\000\300>\000\000\000\300\000\000\340\277\000\000\200>\000\000`?\000\000\360?\000\000@\277\000\000\300>\000\000\000\000\000\000\000\276\000\000\300\276\000\000\260?\000\000\200\276\000\000 \277\000\000\000>\000\000\000\000\000\000\000\277\000\000\200\276\000\000@\277\000\000@?\000\000 ?\000\000``\277\000\000\300\276\000\000\000>\000\000 ?\000\000\000\000\000\000\000>\000\000\200>\000\000\200\276\000\000\200>\000\000\200\276\000\000`\277\000\000\000\000\000\000\200>\000\000\300>\000\000\300\276\000\000`?\000\000\200\276\000\000\300>\000\000\000\000\000\000\000?\000\000\000>\000\000\000\000\000\000\000\000\000\000\200>\000\000\000?\000\000\000\277\000\000\220\277\000\000\000\277\000\000\300\276\000\000\300\276\000\000\000?\000\000\000\276\000\000\300>\000\000\000?\000\000\300>\000\000 ?\000\000\000\276\000\000\200>\000\000\300\277\000\000\200>\000\000`\277\000\000\300>\000\000\000>\000\000\000\000\000\000\200>\000\000\000\000\000\000\000>\000\000\200>\000\000\000\277\000\000\000>\000\000\200\276\000\000@\277\000\000\000\000\000\000\000\000\000\000 \277\000\000\360?\000\000\000\000\000\000\000?\000\000 \277\000\000\000\277\000\000\000\276\000\000\200\276\000\000@?\000\000\200>\000\000`?\000\000\000>\000\000\000>\000\000`?\000\000\000>\000\000@?\000\000\200?\000\000 ?\000\000\000\276\000\000\300\276\000\000\000>\000\000 \277\000\000\220?\000\000 ?\000\000\200?\000\000\000\277\000\000@?\000\000\300\276\000\000 ?\000\000`\277\000\000\000\000\000\000\000>\000\000\000\276\000\000\200>\000\000@?\000\000\000>\000\000\000\276\000\000\200\276\000\000\000>\000\000 ?\000\000``\277\000\000@?\000\000\320?\000\000\200>\000\000\200\276\000\000\300>\000\000\000>\000\000\000>\000\000\000\276\000\000\000>\000\000\200\277\000\000\200\276\000\000\200\276\000\000\000?\000\000\000>\000\000\000\000\000\000 ?\000\000 ?\000\000\240\277\000\000`?\000\000\000>\000\000@?\000\000\000\276\000\000``\277\000\000\300>\000\000\000\000\000\000\300?\000\000\300>\000\000`?\000\000`\277\000\000\300>\000\000\000\277\000\000\360?\000\000\200>\000\000\000?\000\000\200>\000\000`?\000\000\000\277\000\000\000?\000\000\220\277\000\000\000\276\000\000\000\276\000\000\000\276\000\000\000\276\000\000\200>\000\000\200>\000\000\000>\000\000\000\276\000\000\300>\000\000\000\000\000\000\200\276\000\000\200\277\000\000\300\276\000\000 \277\000\000\000>\000\000\000\276\000\000\300>\000\000\000\000\000\000\000\276\000\000\000>\000\000\000\276\000\000\000>\000\000\200>\000\000\000\276\000\000\200\276\000\000\000\000\000\000\000\276\000\000\300\276\000\000\000\000\000\000\200>\000\000\000\000\000\000\000\000\000\000\300>\000\000\200>\000\000\000\000\000\000\260?\000\000\200\276\000\000\300>\000\000\000?\000\000 \277\000\000\000?\000\000\000>\000\000\000\000\000\000\200\276\000\000\000\276\000\000\000\277\000\000\000>\000\000 ?\000\000 ?\000\000 \277\000\000\000>\000\000\000\277\000\000@\277\000\000\000\276\000\000\220?\000\000`?\000\000\000>\000\000\000?\000\000@?\000\000\200?\000\000\300>\000\000\000\000\000\000\200>\000\000@\277\000\000 \277\000\000`?\000\000\000\276\000\000\300\276\000\000\000>\000\000`?\000\000\000\276\000\000\300\276\000\000\200\276\000\000\200?\000\000\000?\000\000\240?\000\000\000>\000\000\300>\000\000\200?\000\000\000\276\000\000 ?\000\000@\277\000\000\200\276\000\000\300\276\000\000\200\276\000\000\300>\000\000\200>\000\000\000>\000\000\260?\000\000\000>\000\000`?\000\000\200\276\000\000\000>\000\000\300\276\000\000\200\276\000\000\200>\000\000\200?\000\000\200>\000\000\300\276\000\000\000?\000\000\000\000\000\000`\277\000\000\000\276\000\000\000>\000\000\300>\000\000\000\000\000\000\300>\000\000\000\276\000\000\200>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000>\000\000\200>\000\000\000>\000\000\000?\000\000\200>\000\000\000?\000\000\300>\000\000\200>\000\000\000\000\000\000\000>\000\000\000>\000\000@\277\000\000\000\000\000\000\000>\000\000\000\276\000\000`?\000\000 \277\000\000\000?\000\000@\277\000\000 ?\000\000\000\276\000\000\300\276\000\000\260\277\000\000 \277\000\000\000?\000\000\000\000\000\000 \277\000\000\000\277\000\000\000\277\000\000`\277\000\000@?\000\000\000\000\000\000\000>\000\000\300\276\000\000\200>\000\000`?\000\000\000\276\000\000\220\277\000\000\000\000\000\000\200\276\000\000`\277\000\000\000>\000\000\000\277\000\000\000>\000\000\000>\000\000\000\277\000\000\000?\000\000\000\000\000\000\300>\000\000`\277\000\000\000\276\000\000\000\276\000\000\200\276\000\000@?\000\000\200>\000\000\200?\000\000@\277\000\000\200>\000\000\200\276\000\000\000>\000\000\000>\000\000\000\000\000\000\000>\000\000\200\276\000\000\000\276\000\000\000>\000\000 ?\000\000\000\277\000\000\200\276\000\000`?\000\000@\277\000\000@?\000\000\200\276\000\000\000>\000\000\000\276\000\000\200?\000\000\000\000\000\000@?\000\000\220?\000\000\000\276\000\000@?\000\000\200?\000\000\200\276\000\000\000\276\000\000\000>\000\000\300\276\000\000\000\277\000\000\200?\000\000\000>\000\000\200?\000\000`?\000\000``?\000\000\300>\000\000\000\276\000\000``\277\000\000\200>\000\000\220?\000\000 ?\000\000`\277\000\000\000\000\000\000`?\000\000\300>\000\000\240?\000\000\200\276\000\000\000\276\000\000\000?\000\000\200>\000\000 \277\000\000\300\276\000\000\000?\000\000\000>\000\000\000\276\000\000\300>\000\000\000>\000\000\220?\000\000\000?\000\000\200>\000\000\200\276\000\000\000\276\000\000\200>\000\000\200>\000\000\300>\000\000\000>\000\000\200\276\000\000\000>\000\000`?\000\000\000\276\000\000\200\276\000\000\000\000\000\000\000>\000\000\000>\000\000\000?\000\000\000\276\000\000\000>\000\000\000\000\000\000\000\277\000\000\000\000\000\000\340\277\000\000\000\000\000\000\260?\000\000\000?\000\000\000\276\000\000\240\277\000\000\200>\000\000\300\277\000\000\300?\000\000\300\276\000\000 \277\000\000\300>\000\000\200>\000\000\200>\000\000\200\276\000\000\000?\000\000@?\000\000 ?\000\000\200\276\000\000\300\276\000\000`?\000\000\200\276\000\000\000\276\000\000 ?\000\000\000\277\000\000\000\276\000\000\000\000\000\000\200>\000\000\000\000\000\000\000\277\000\000\200>\000\000\000>\000\000@?\000\000 ?\000\000\260?\000\000\000\277\000\000\000?\000\000\200>\000\000\000\276\000\000\000>\000\000\000\276\000\000\300>\000\000\200>\000\000\200\276\000\000\000\000\000\000\200\276\000\000\000\276\000\000\000>\000\000 ?\000\000\300>\000\000\000\276\000\000\000\276\000\000\200\277\000\000`\277\000\000\200>\000\000\000\000\000\000\000\000\000\000 ?\000\000\000\000\000\000\300>\000\000\300>\000\000\220?\000\000\000\000\000\000\300?\000\000`\277\000\000\300>\000\000\240?\000\000\220?\000\000\000\000\000\000\240?\000\000\300\276\000\000 ?\000\000\200>\000\000\220?\000\000\300\277\000\000\000\276\000\000\300\276\000\000 ?\000\000\300>\000\000@?\000\000\000\000\000\000 ?\000\000\000>\000\000`?\000\000\200?\000\000\200\277\000\000\000\000\000\000\260?\000\000@?\000\000@\277\000\000\300>\000\000\000?\000\000\000?\000\000\220?\000\000\000>\000\000`\277\000\000\200\276\000\000\000?\000\000`?\000\000\200>\000\000\000\277\000\000\000\276\000\000\000\000\000\000\000\000\000\000\200>\000\000\000>\000\000\300>\000\000\300>\000\000\000>\000\000\000\277\000\000\200\276\000\000\000\000\000\000@?\000\000\000\000\000\000\000>\000\000\300\276\000\000\000\277\000\000\000>\000\000\000\000\000\000\000\000\000\000\000>\000\000\000>\000\000\200\276\000\000@?\000\000@\277\000\000\200\277\000\000\200\276\000\000\200>\000\000\300\276\000\000@?\000\000\300>\000\000\220?\000\000\200\276\000\000\200\276\000\000\300>\000\000\000?\000\000\320?\000\000``\277\000\000\000\000\000\000\000>\000\000\200\276\000\000\260\277\000\000\320\277\000\000@\277\000\000\260\277\000\000\000\000\000\000\000\276\000\000`\277\000\000\200?\000\000\000\300\000\000\000\300\000\000\200?\000\000\240?\000\000\000\300\000\000\300\277\000\000\000>\000\000\000>\000\000\000\276\000\000\000\000\000\000\000\000\000\000 ?\000\000\000>\000\000\000>\000\000\000\000\000\000\000\000\000\000\000\276\000\000\000\000\000\000\200>\000\000\200>\000\000\000\276\000\000\000>\000\000\200>\000\000\300\276\000\000`\277\000\000\300\277\000\000\300\276\000\000\000\276\000\000 ?\000\000\000\000\000\000\200\276\000\000`?\000\000\300\277\000\000\200\277\000\000@?\000\000``?\000\000\000?\000\000\300\276\000\000\200\276\000\000\000>\000\000 \277\000\000\000\277\000\000@\277\000\000\000>\000\000 \277\000\000\000\276\000\000\000\276\000\000\000>\000\000\300>\000\000@\277\000\000\300\276\000\000\000\276\000\000\300>\000\000@\277\000\000\300\276\000\000\200>\000\000\200\276\000\000\300\276\000\000\300\276\000\000\200>\000\000\000>\000\000\000\276\000\000\000\000\000\000\000\000\000\000\200>\000\000 \277\000\000\300\276\000\000\000>\000\000\200>\000\000`\277\000\000\000\276\000\000\200>\000\000\000\277\000\000\300\277\000\000\300\277\000\000\300\276\000\000`\277\000\000\000\276\000\000\000\000\000\000\200\277\000\000\200?\000\000\000\300\000\000\000\300\000\000@?\000\000\260?\000\000\000\300\000\000\300\277\000\000\000\000\000\000\000\000\000\000\000>\000\000\000\000\000\000\200>\000\000\000?\000\000\200\276\000\000\000>\000\000\000\276\000\000\000>\000\000\200\276\000\000\000\000\000\000\300>\000\000\200>\000\000\000>\000\000\000>\000\000\000>\000\000\000\277\000\000\000\277\000\000\220\277\000\000\000\277\000\000\300\276\000\000\200>\000\000\000>\000\000\200\276\000\000 ?\000\000\240\277\000\000\240\277\000\000@?\000\000```?\000\000\200>\000\000\000?\000\000``?\000\000\200\276\000\000`?\000\000\240?\000\000\000?\000\000\200?\000\000``?\000\000\000\277\000\000\000>\000\000 ?\000\000\300?\000\000\000\000\000\000\000>\000\000\000>\000\000\000?\000\000\300>\000\000`?\000\000\220?\000\000 ?\000\000\000?\000\000\000>\000\000\200?\000\000\200?\000\000@\277\000\000\000>\000\000 ?\000\000@?\000\000\000\277\000\000\200>\000\000\200?\000\000\000\000\000\000 \277\000\000\000\277\000\000\200\276\000\000@?\000\000\200>\000\000\000\000\000\000\200>\000\000\000?\000\000\000?\000\000\000?\000\000\300>\000\000\000\000\000\000``\277\000\000\000\276\000\000\000\276\000\000\000\277\000\000\000\276\000\000``?\000\000\000\300\000\000\000\300\000\000`?\000\000\240?\000\000\000\300\000\000\260\277\000\000\000>\000\000\000\276\000\000\000>\000\000\000\276\000\000\000>\000\000\300>\000\000\000\276\000\000\000>\000\000\000\276\000\000\200>\000\000\000\276\000\000\000\276\000\000\000>\000\000\000\276\000\000\000>\000\000\000>\000\000\300>\000\000\300\276\000\000@\277\000\000\220\277\000\000\200\276\000\000\000\276\000\000 ?\000\000\000\000\000\000\300\276\000\000 ?\000\000\260\277\000\000\220\277\000\000\220?\000\000@?\000\000\240\277\000\000``\277\000\000`
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 16.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 15.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -16.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 16.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_3/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "\000\000`?\000\000\300>\000\000\000\000\000\000\000\000\000\000 ?\000\000\360?\000\000\000?\000\000\000?\000\000\300>\000\000\220?\000\000\300\276\000\000\300\276\000\000\220?\000\000\300?\000\000\000\276\000\000\000>"
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 16.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value_1/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 15.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -16.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 16.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Pow_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Pow_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Cast_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/encod_qa/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "encoder/encod_qa/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/truediv_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
      }
    }
  }
}
node {
  name: "encoder/input_qa/Neg_1"
  op: "Neg"
  input: "x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/mul"
  op: "Mul"
  input: "x"
  input: "encoder/input_qa/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/Pow"
  op: "Pow"
  input: "encoder/input_qa/Pow/x"
  input: "encoder/input_qa/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/input_qa/Cast"
  op: "Cast"
  input: "encoder/input_qa/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/input_qa/truediv"
  op: "RealDiv"
  input: "encoder/input_qa/mul"
  input: "encoder/input_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/Neg"
  op: "Neg"
  input: "encoder/input_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/Round"
  op: "Round"
  input: "encoder/input_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/add"
  op: "AddV2"
  input: "encoder/input_qa/Neg"
  input: "encoder/input_qa/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/StopGradient"
  op: "StopGradient"
  input: "encoder/input_qa/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/add_1"
  op: "AddV2"
  input: "encoder/input_qa/truediv"
  input: "encoder/input_qa/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/input_qa/add_1"
  input: "encoder/input_qa/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/clip_by_value"
  op: "Maximum"
  input: "encoder/input_qa/clip_by_value/Minimum"
  input: "encoder/input_qa/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/mul_1"
  op: "Mul"
  input: "encoder/input_qa/Cast"
  input: "encoder/input_qa/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/truediv_1"
  op: "RealDiv"
  input: "encoder/input_qa/mul_1"
  input: "encoder/input_qa/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/mul_2"
  op: "Mul"
  input: "encoder/input_qa/mul_2/x"
  input: "encoder/input_qa/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/add_2"
  op: "AddV2"
  input: "encoder/input_qa/Neg_1"
  input: "encoder/input_qa/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/mul_3"
  op: "Mul"
  input: "encoder/input_qa/mul_3/x"
  input: "encoder/input_qa/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/StopGradient_1"
  op: "StopGradient"
  input: "encoder/input_qa/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/add_3"
  op: "AddV2"
  input: "x"
  input: "encoder/input_qa/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/ReadVariableOp_2"
  op: "Identity"
  input: "encoder/conv2d_0_m/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/ReadVariableOp_1"
  op: "Identity"
  input: "encoder/conv2d_0_m/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Neg_1"
  op: "Neg"
  input: "encoder/conv2d_0_m/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/ReadVariableOp"
  op: "Identity"
  input: "encoder/conv2d_0_m/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul"
  op: "Mul"
  input: "encoder/conv2d_0_m/ReadVariableOp"
  input: "encoder/conv2d_0_m/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Pow"
  op: "Pow"
  input: "encoder/conv2d_0_m/Pow/x"
  input: "encoder/conv2d_0_m/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Cast"
  op: "Cast"
  input: "encoder/conv2d_0_m/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/conv2d_0_m/truediv"
  op: "RealDiv"
  input: "encoder/conv2d_0_m/mul"
  input: "encoder/conv2d_0_m/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Neg"
  op: "Neg"
  input: "encoder/conv2d_0_m/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Round"
  op: "Round"
  input: "encoder/conv2d_0_m/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/add"
  op: "AddV2"
  input: "encoder/conv2d_0_m/Neg"
  input: "encoder/conv2d_0_m/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/StopGradient"
  op: "StopGradient"
  input: "encoder/conv2d_0_m/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/add_1"
  op: "AddV2"
  input: "encoder/conv2d_0_m/truediv"
  input: "encoder/conv2d_0_m/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/conv2d_0_m/add_1"
  input: "encoder/conv2d_0_m/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/clip_by_value"
  op: "Maximum"
  input: "encoder/conv2d_0_m/clip_by_value/Minimum"
  input: "encoder/conv2d_0_m/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul_1"
  op: "Mul"
  input: "encoder/conv2d_0_m/Cast"
  input: "encoder/conv2d_0_m/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/truediv_1"
  op: "RealDiv"
  input: "encoder/conv2d_0_m/mul_1"
  input: "encoder/conv2d_0_m/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul_2"
  op: "Mul"
  input: "encoder/conv2d_0_m/mul_2/x"
  input: "encoder/conv2d_0_m/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/add_2"
  op: "AddV2"
  input: "encoder/conv2d_0_m/Neg_1"
  input: "encoder/conv2d_0_m/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul_3"
  op: "Mul"
  input: "encoder/conv2d_0_m/mul_3/x"
  input: "encoder/conv2d_0_m/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/StopGradient_1"
  op: "StopGradient"
  input: "encoder/conv2d_0_m/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/add_3"
  op: "AddV2"
  input: "encoder/conv2d_0_m/ReadVariableOp_2"
  input: "encoder/conv2d_0_m/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/convolution"
  op: "Conv2D"
  input: "encoder/input_qa/add_3"
  input: "encoder/conv2d_0_m/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv2d_0_m/ReadVariableOp_5"
  op: "Identity"
  input: "encoder/conv2d_0_m/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/ReadVariableOp_4"
  op: "Identity"
  input: "encoder/conv2d_0_m/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Neg_3"
  op: "Neg"
  input: "encoder/conv2d_0_m/ReadVariableOp_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/ReadVariableOp_3"
  op: "Identity"
  input: "encoder/conv2d_0_m/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul_4"
  op: "Mul"
  input: "encoder/conv2d_0_m/ReadVariableOp_3"
  input: "encoder/conv2d_0_m/mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Pow_1"
  op: "Pow"
  input: "encoder/conv2d_0_m/Pow_1/x"
  input: "encoder/conv2d_0_m/Pow_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Cast_1"
  op: "Cast"
  input: "encoder/conv2d_0_m/Pow_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/conv2d_0_m/truediv_2"
  op: "RealDiv"
  input: "encoder/conv2d_0_m/mul_4"
  input: "encoder/conv2d_0_m/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Neg_2"
  op: "Neg"
  input: "encoder/conv2d_0_m/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/Round_1"
  op: "Round"
  input: "encoder/conv2d_0_m/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/add_4"
  op: "AddV2"
  input: "encoder/conv2d_0_m/Neg_2"
  input: "encoder/conv2d_0_m/Round_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/StopGradient_2"
  op: "StopGradient"
  input: "encoder/conv2d_0_m/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/add_5"
  op: "AddV2"
  input: "encoder/conv2d_0_m/truediv_2"
  input: "encoder/conv2d_0_m/StopGradient_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "encoder/conv2d_0_m/add_5"
  input: "encoder/conv2d_0_m/clip_by_value_1/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/clip_by_value_1"
  op: "Maximum"
  input: "encoder/conv2d_0_m/clip_by_value_1/Minimum"
  input: "encoder/conv2d_0_m/clip_by_value_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul_5"
  op: "Mul"
  input: "encoder/conv2d_0_m/Cast_1"
  input: "encoder/conv2d_0_m/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/truediv_3"
  op: "RealDiv"
  input: "encoder/conv2d_0_m/mul_5"
  input: "encoder/conv2d_0_m/truediv_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul_6"
  op: "Mul"
  input: "encoder/conv2d_0_m/mul_6/x"
  input: "encoder/conv2d_0_m/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/add_6"
  op: "AddV2"
  input: "encoder/conv2d_0_m/Neg_3"
  input: "encoder/conv2d_0_m/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/mul_7"
  op: "Mul"
  input: "encoder/conv2d_0_m/mul_7/x"
  input: "encoder/conv2d_0_m/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/StopGradient_3"
  op: "StopGradient"
  input: "encoder/conv2d_0_m/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/add_7"
  op: "AddV2"
  input: "encoder/conv2d_0_m/ReadVariableOp_5"
  input: "encoder/conv2d_0_m/StopGradient_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_0_m/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv2d_0_m/convolution"
  input: "encoder/conv2d_0_m/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/accum1_qa/Pow_1"
  op: "Pow"
  input: "encoder/accum1_qa/Pow_1/x"
  input: "encoder/accum1_qa/Pow_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/accum1_qa/Cast_1"
  op: "Cast"
  input: "encoder/accum1_qa/Pow_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/accum1_qa/Cast_2"
  op: "Cast"
  input: "encoder/accum1_qa/Cast_2/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/accum1_qa/sub"
  op: "Sub"
  input: "encoder/accum1_qa/Cast_2"
  input: "encoder/accum1_qa/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/Pow_2"
  op: "Pow"
  input: "encoder/accum1_qa/Const"
  input: "encoder/accum1_qa/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/sub_1"
  op: "Sub"
  input: "encoder/accum1_qa/Cast_1"
  input: "encoder/accum1_qa/Pow_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/LessEqual"
  op: "LessEqual"
  input: "encoder/conv2d_0_m/BiasAdd"
  input: "encoder/accum1_qa/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/Relu"
  op: "Relu"
  input: "encoder/conv2d_0_m/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/ones_like/Shape"
  op: "Shape"
  input: "encoder/conv2d_0_m/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/accum1_qa/ones_like"
  op: "Fill"
  input: "encoder/accum1_qa/ones_like/Shape"
  input: "encoder/accum1_qa/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/accum1_qa/sub_2"
  op: "Sub"
  input: "encoder/accum1_qa/Cast_1"
  input: "encoder/accum1_qa/Pow_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/mul"
  op: "Mul"
  input: "encoder/accum1_qa/ones_like"
  input: "encoder/accum1_qa/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/SelectV2"
  op: "SelectV2"
  input: "encoder/accum1_qa/LessEqual"
  input: "encoder/accum1_qa/Relu"
  input: "encoder/accum1_qa/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/Neg_1"
  op: "Neg"
  input: "encoder/accum1_qa/SelectV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/Pow"
  op: "Pow"
  input: "encoder/accum1_qa/Pow/x"
  input: "encoder/accum1_qa/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/accum1_qa/Cast"
  op: "Cast"
  input: "encoder/accum1_qa/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/accum1_qa/mul_1"
  op: "Mul"
  input: "encoder/conv2d_0_m/BiasAdd"
  input: "encoder/accum1_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/truediv"
  op: "RealDiv"
  input: "encoder/accum1_qa/mul_1"
  input: "encoder/accum1_qa/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/Neg"
  op: "Neg"
  input: "encoder/accum1_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/Round"
  op: "Round"
  input: "encoder/accum1_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/add"
  op: "AddV2"
  input: "encoder/accum1_qa/Neg"
  input: "encoder/accum1_qa/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/StopGradient"
  op: "StopGradient"
  input: "encoder/accum1_qa/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/add_1"
  op: "AddV2"
  input: "encoder/accum1_qa/truediv"
  input: "encoder/accum1_qa/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/truediv_1"
  op: "RealDiv"
  input: "encoder/accum1_qa/add_1"
  input: "encoder/accum1_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/truediv_2"
  op: "RealDiv"
  input: "encoder/accum1_qa/truediv_2/x"
  input: "encoder/accum1_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/sub_3"
  op: "Sub"
  input: "encoder/accum1_qa/sub_3/x"
  input: "encoder/accum1_qa/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/accum1_qa/truediv_1"
  input: "encoder/accum1_qa/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/clip_by_value"
  op: "Maximum"
  input: "encoder/accum1_qa/clip_by_value/Minimum"
  input: "encoder/accum1_qa/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/mul_2"
  op: "Mul"
  input: "encoder/accum1_qa/Cast_1"
  input: "encoder/accum1_qa/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/add_2"
  op: "AddV2"
  input: "encoder/accum1_qa/Neg_1"
  input: "encoder/accum1_qa/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/mul_3"
  op: "Mul"
  input: "encoder/accum1_qa/mul_3/x"
  input: "encoder/accum1_qa/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/StopGradient_1"
  op: "StopGradient"
  input: "encoder/accum1_qa/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/accum1_qa/add_3"
  op: "AddV2"
  input: "encoder/accum1_qa/SelectV2"
  input: "encoder/accum1_qa/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/flatten/Reshape"
  op: "Reshape"
  input: "encoder/accum1_qa/add_3"
  input: "encoder/flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_2"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_1"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Neg_1"
  op: "Neg"
  input: "encoder/encoded_vector/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul"
  op: "Mul"
  input: "encoder/encoded_vector/ReadVariableOp"
  input: "encoder/encoded_vector/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow"
  op: "Pow"
  input: "encoder/encoded_vector/Pow/x"
  input: "encoder/encoded_vector/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encoded_vector/Cast"
  op: "Cast"
  input: "encoder/encoded_vector/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv"
  op: "RealDiv"
  input: "encoder/encoded_vector/mul"
  input: "encoder/encoded_vector/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Neg"
  op: "Neg"
  input: "encoder/encoded_vector/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Round"
  op: "Round"
  input: "encoder/encoded_vector/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add"
  op: "AddV2"
  input: "encoder/encoded_vector/Neg"
  input: "encoder/encoded_vector/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/StopGradient"
  op: "StopGradient"
  input: "encoder/encoded_vector/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_1"
  op: "AddV2"
  input: "encoder/encoded_vector/truediv"
  input: "encoder/encoded_vector/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/encoded_vector/add_1"
  input: "encoder/encoded_vector/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value"
  op: "Maximum"
  input: "encoder/encoded_vector/clip_by_value/Minimum"
  input: "encoder/encoded_vector/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_1"
  op: "Mul"
  input: "encoder/encoded_vector/Cast"
  input: "encoder/encoded_vector/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_1"
  op: "RealDiv"
  input: "encoder/encoded_vector/mul_1"
  input: "encoder/encoded_vector/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_2"
  op: "Mul"
  input: "encoder/encoded_vector/mul_2/x"
  input: "encoder/encoded_vector/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_2"
  op: "AddV2"
  input: "encoder/encoded_vector/Neg_1"
  input: "encoder/encoded_vector/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_3"
  op: "Mul"
  input: "encoder/encoded_vector/mul_3/x"
  input: "encoder/encoded_vector/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/StopGradient_1"
  op: "StopGradient"
  input: "encoder/encoded_vector/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_3"
  op: "AddV2"
  input: "encoder/encoded_vector/ReadVariableOp_2"
  input: "encoder/encoded_vector/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/MatMul"
  op: "MatMul"
  input: "encoder/flatten/Reshape"
  input: "encoder/encoded_vector/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_5"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_4"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Neg_3"
  op: "Neg"
  input: "encoder/encoded_vector/ReadVariableOp_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_3"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_4"
  op: "Mul"
  input: "encoder/encoded_vector/ReadVariableOp_3"
  input: "encoder/encoded_vector/mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow_1"
  op: "Pow"
  input: "encoder/encoded_vector/Pow_1/x"
  input: "encoder/encoded_vector/Pow_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encoded_vector/Cast_1"
  op: "Cast"
  input: "encoder/encoded_vector/Pow_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_2"
  op: "RealDiv"
  input: "encoder/encoded_vector/mul_4"
  input: "encoder/encoded_vector/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Neg_2"
  op: "Neg"
  input: "encoder/encoded_vector/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Round_1"
  op: "Round"
  input: "encoder/encoded_vector/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_4"
  op: "AddV2"
  input: "encoder/encoded_vector/Neg_2"
  input: "encoder/encoded_vector/Round_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/StopGradient_2"
  op: "StopGradient"
  input: "encoder/encoded_vector/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_5"
  op: "AddV2"
  input: "encoder/encoded_vector/truediv_2"
  input: "encoder/encoded_vector/StopGradient_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "encoder/encoded_vector/add_5"
  input: "encoder/encoded_vector/clip_by_value_1/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value_1"
  op: "Maximum"
  input: "encoder/encoded_vector/clip_by_value_1/Minimum"
  input: "encoder/encoded_vector/clip_by_value_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_5"
  op: "Mul"
  input: "encoder/encoded_vector/Cast_1"
  input: "encoder/encoded_vector/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_3"
  op: "RealDiv"
  input: "encoder/encoded_vector/mul_5"
  input: "encoder/encoded_vector/truediv_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_6"
  op: "Mul"
  input: "encoder/encoded_vector/mul_6/x"
  input: "encoder/encoded_vector/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_6"
  op: "AddV2"
  input: "encoder/encoded_vector/Neg_3"
  input: "encoder/encoded_vector/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_7"
  op: "Mul"
  input: "encoder/encoded_vector/mul_7/x"
  input: "encoder/encoded_vector/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/StopGradient_3"
  op: "StopGradient"
  input: "encoder/encoded_vector/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_7"
  op: "AddV2"
  input: "encoder/encoded_vector/ReadVariableOp_5"
  input: "encoder/encoded_vector/StopGradient_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/BiasAdd"
  op: "BiasAdd"
  input: "encoder/encoded_vector/MatMul"
  input: "encoder/encoded_vector/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/encod_qa/Pow_1"
  op: "Pow"
  input: "encoder/encod_qa/Pow_1/x"
  input: "encoder/encod_qa/Pow_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encod_qa/Cast_1"
  op: "Cast"
  input: "encoder/encod_qa/Pow_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encod_qa/Cast_2"
  op: "Cast"
  input: "encoder/encod_qa/Cast_2/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encod_qa/sub"
  op: "Sub"
  input: "encoder/encod_qa/Cast_2"
  input: "encoder/encod_qa/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Pow_2"
  op: "Pow"
  input: "encoder/encod_qa/Const"
  input: "encoder/encod_qa/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/sub_1"
  op: "Sub"
  input: "encoder/encod_qa/Cast_1"
  input: "encoder/encod_qa/Pow_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/LessEqual"
  op: "LessEqual"
  input: "encoder/encoded_vector/BiasAdd"
  input: "encoder/encod_qa/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Relu"
  op: "Relu"
  input: "encoder/encoded_vector/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/ones_like/Shape"
  op: "Shape"
  input: "encoder/encoded_vector/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encod_qa/ones_like"
  op: "Fill"
  input: "encoder/encod_qa/ones_like/Shape"
  input: "encoder/encod_qa/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encod_qa/sub_2"
  op: "Sub"
  input: "encoder/encod_qa/Cast_1"
  input: "encoder/encod_qa/Pow_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/mul"
  op: "Mul"
  input: "encoder/encod_qa/ones_like"
  input: "encoder/encod_qa/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/SelectV2"
  op: "SelectV2"
  input: "encoder/encod_qa/LessEqual"
  input: "encoder/encod_qa/Relu"
  input: "encoder/encod_qa/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Neg_1"
  op: "Neg"
  input: "encoder/encod_qa/SelectV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Pow"
  op: "Pow"
  input: "encoder/encod_qa/Pow/x"
  input: "encoder/encod_qa/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encod_qa/Cast"
  op: "Cast"
  input: "encoder/encod_qa/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encod_qa/mul_1"
  op: "Mul"
  input: "encoder/encoded_vector/BiasAdd"
  input: "encoder/encod_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/truediv"
  op: "RealDiv"
  input: "encoder/encod_qa/mul_1"
  input: "encoder/encod_qa/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Neg"
  op: "Neg"
  input: "encoder/encod_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Round"
  op: "Round"
  input: "encoder/encod_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/add"
  op: "AddV2"
  input: "encoder/encod_qa/Neg"
  input: "encoder/encod_qa/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/StopGradient"
  op: "StopGradient"
  input: "encoder/encod_qa/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/add_1"
  op: "AddV2"
  input: "encoder/encod_qa/truediv"
  input: "encoder/encod_qa/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/truediv_1"
  op: "RealDiv"
  input: "encoder/encod_qa/add_1"
  input: "encoder/encod_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/truediv_2"
  op: "RealDiv"
  input: "encoder/encod_qa/truediv_2/x"
  input: "encoder/encod_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/sub_3"
  op: "Sub"
  input: "encoder/encod_qa/sub_3/x"
  input: "encoder/encod_qa/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/encod_qa/truediv_1"
  input: "encoder/encod_qa/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/clip_by_value"
  op: "Maximum"
  input: "encoder/encod_qa/clip_by_value/Minimum"
  input: "encoder/encod_qa/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/mul_2"
  op: "Mul"
  input: "encoder/encod_qa/Cast_1"
  input: "encoder/encod_qa/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/add_2"
  op: "AddV2"
  input: "encoder/encod_qa/Neg_1"
  input: "encoder/encod_qa/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/mul_3"
  op: "Mul"
  input: "encoder/encod_qa/mul_3/x"
  input: "encoder/encod_qa/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/StopGradient_1"
  op: "StopGradient"
  input: "encoder/encod_qa/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/add_3"
  op: "AddV2"
  input: "encoder/encod_qa/SelectV2"
  input: "encoder/encod_qa/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^encoder/conv2d_0_m/ReadVariableOp"
  input: "^encoder/conv2d_0_m/ReadVariableOp_1"
  input: "^encoder/conv2d_0_m/ReadVariableOp_2"
  input: "^encoder/conv2d_0_m/ReadVariableOp_3"
  input: "^encoder/conv2d_0_m/ReadVariableOp_4"
  input: "^encoder/conv2d_0_m/ReadVariableOp_5"
  input: "^encoder/encoded_vector/ReadVariableOp"
  input: "^encoder/encoded_vector/ReadVariableOp_1"
  input: "^encoder/encoded_vector/ReadVariableOp_2"
  input: "^encoder/encoded_vector/ReadVariableOp_3"
  input: "^encoder/encoded_vector/ReadVariableOp_4"
  input: "^encoder/encoded_vector/ReadVariableOp_5"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "encoder/encod_qa/add_3"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
