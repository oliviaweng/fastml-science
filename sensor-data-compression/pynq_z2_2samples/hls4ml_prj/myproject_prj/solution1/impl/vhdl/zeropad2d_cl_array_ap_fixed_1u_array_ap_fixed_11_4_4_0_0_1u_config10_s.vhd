-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity zeropad2d_cl_array_ap_fixed_1u_array_ap_fixed_11_4_4_0_0_1u_config10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_V_TVALID : IN STD_LOGIC;
    data_V_data_V_TREADY : OUT STD_LOGIC;
    res_V_data_V_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    res_V_data_V_full_n : IN STD_LOGIC;
    res_V_data_V_write : OUT STD_LOGIC );
end;


architecture behav of zeropad2d_cl_array_ap_fixed_1u_array_ap_fixed_11_4_4_0_0_1u_config10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_V_data_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln65_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln77_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_123_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_1_fu_135_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal j_fu_152_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal i1_0_reg_84 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal j3_0_reg_95 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln59_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j6_0_reg_106 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_0_V_fu_141_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_data_V_data_V_U_apdone_blk : STD_LOGIC;
    signal data_V_data_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_V_TVALID_int : STD_LOGIC;
    signal data_V_data_V_TREADY_int : STD_LOGIC;
    signal regslice_both_data_V_data_V_U_ack_in : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_data_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_V_data_V_TDATA,
        vld_in => data_V_data_V_TVALID,
        ack_in => regslice_both_data_V_data_V_U_ack_in,
        data_out => data_V_data_V_TDATA_int,
        vld_out => data_V_data_V_TVALID_int,
        ack_out => data_V_data_V_TREADY_int,
        apdone_blk => regslice_both_data_V_data_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0))) and (icmp_ln77_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i1_0_reg_84 <= i_reg_161;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i1_0_reg_84 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j3_0_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j3_0_reg_95 <= j_1_fu_135_p2;
            elsif (((icmp_ln59_fu_117_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j3_0_reg_95 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j6_0_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0))) and (icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j6_0_reg_106 <= j_fu_152_p2;
            elsif (((icmp_ln59_fu_117_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j6_0_reg_106 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_161 <= i_fu_123_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, res_V_data_V_full_n, ap_CS_fsm_state3, icmp_ln65_fu_129_p2, ap_CS_fsm_state4, icmp_ln77_fu_146_p2, ap_CS_fsm_state2, icmp_ln59_fu_117_p2, data_V_data_V_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln59_fu_117_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0))) and (icmp_ln77_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0))) and (icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(res_V_data_V_full_n, icmp_ln65_fu_129_p2, data_V_data_V_TVALID_int)
    begin
                ap_block_state3 <= (((icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0)));
    end process;


    ap_block_state4_assign_proc : process(res_V_data_V_full_n, icmp_ln77_fu_146_p2)
    begin
                ap_block_state4 <= ((icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, res_V_data_V_full_n, ap_CS_fsm_state4, icmp_ln77_fu_146_p2)
    begin
        if ((not(((icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0))) and (icmp_ln77_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_data_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln65_fu_129_p2, data_V_data_V_TVALID_int)
    begin
        if (((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_V_data_V_TDATA_blk_n <= data_V_data_V_TVALID_int;
        else 
            data_V_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_V_TREADY_assign_proc : process(data_V_data_V_TVALID, regslice_both_data_V_data_V_U_ack_in)
    begin
        if (((data_V_data_V_TVALID = ap_const_logic_1) and (regslice_both_data_V_data_V_U_ack_in = ap_const_logic_1))) then 
            data_V_data_V_TREADY <= ap_const_logic_1;
        else 
            data_V_data_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_V_TREADY_int_assign_proc : process(res_V_data_V_full_n, ap_CS_fsm_state3, icmp_ln65_fu_129_p2, data_V_data_V_TVALID_int)
    begin
        if ((not((((icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_V_data_V_TREADY_int <= ap_const_logic_1;
        else 
            data_V_data_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_123_p2 <= std_logic_vector(unsigned(i1_0_reg_84) + unsigned(ap_const_lv4_1));
    icmp_ln59_fu_117_p2 <= "1" when (i1_0_reg_84 = ap_const_lv4_8) else "0";
    icmp_ln65_fu_129_p2 <= "1" when (j3_0_reg_95 = ap_const_lv4_8) else "0";
    icmp_ln77_fu_146_p2 <= "1" when (j6_0_reg_106 = ap_const_lv4_9) else "0";

    internal_ap_ready_assign_proc : process(res_V_data_V_full_n, ap_CS_fsm_state4, icmp_ln77_fu_146_p2)
    begin
        if ((not(((icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0))) and (icmp_ln77_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_135_p2 <= std_logic_vector(unsigned(j3_0_reg_95) + unsigned(ap_const_lv4_1));
    j_fu_152_p2 <= std_logic_vector(unsigned(j6_0_reg_106) + unsigned(ap_const_lv4_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_V_blk_n_assign_proc : process(res_V_data_V_full_n, ap_CS_fsm_state3, icmp_ln65_fu_129_p2, ap_CS_fsm_state4, icmp_ln77_fu_146_p2)
    begin
        if ((((icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            res_V_data_V_blk_n <= res_V_data_V_full_n;
        else 
            res_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_V_data_V_din_assign_proc : process(res_V_data_V_full_n, ap_CS_fsm_state3, icmp_ln65_fu_129_p2, ap_CS_fsm_state4, icmp_ln77_fu_146_p2, tmp_data_0_V_fu_141_p1, data_V_data_V_TVALID_int)
    begin
        if (((not(((icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0))) and (icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            res_V_data_V_din <= ap_const_lv11_0;
        elsif ((not((((icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            res_V_data_V_din <= tmp_data_0_V_fu_141_p1;
        else 
            res_V_data_V_din <= "XXXXXXXXXXX";
        end if; 
    end process;


    res_V_data_V_write_assign_proc : process(res_V_data_V_full_n, ap_CS_fsm_state3, icmp_ln65_fu_129_p2, ap_CS_fsm_state4, icmp_ln77_fu_146_p2, data_V_data_V_TVALID_int)
    begin
        if (((not(((icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0))) and (icmp_ln77_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((icmp_ln65_fu_129_p2 = ap_const_lv1_1) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (res_V_data_V_full_n = ap_const_logic_0)) or ((icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0)))) and (icmp_ln65_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            res_V_data_V_write <= ap_const_logic_1;
        else 
            res_V_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_0_V_fu_141_p1 <= data_V_data_V_TDATA_int(11 - 1 downto 0);
end behav;
