// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_ap_fixed_16u_array_ap_ufixed_9_1_4_0_0_16u_relu_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_TREADY,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        res_V_data_5_V_TDATA,
        res_V_data_5_V_TVALID,
        res_V_data_5_V_TREADY,
        res_V_data_6_V_TDATA,
        res_V_data_6_V_TVALID,
        res_V_data_6_V_TREADY,
        res_V_data_7_V_TDATA,
        res_V_data_7_V_TVALID,
        res_V_data_7_V_TREADY,
        res_V_data_8_V_TDATA,
        res_V_data_8_V_TVALID,
        res_V_data_8_V_TREADY,
        res_V_data_9_V_TDATA,
        res_V_data_9_V_TVALID,
        res_V_data_9_V_TREADY,
        res_V_data_10_V_TDATA,
        res_V_data_10_V_TVALID,
        res_V_data_10_V_TREADY,
        res_V_data_11_V_TDATA,
        res_V_data_11_V_TVALID,
        res_V_data_11_V_TREADY,
        res_V_data_12_V_TDATA,
        res_V_data_12_V_TVALID,
        res_V_data_12_V_TREADY,
        res_V_data_13_V_TDATA,
        res_V_data_13_V_TVALID,
        res_V_data_13_V_TREADY,
        res_V_data_14_V_TDATA,
        res_V_data_14_V_TVALID,
        res_V_data_14_V_TREADY,
        res_V_data_15_V_TDATA,
        res_V_data_15_V_TVALID,
        res_V_data_15_V_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [15:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [15:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [15:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [15:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [15:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [15:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
input   res_V_data_0_V_TREADY;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [15:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output  [15:0] res_V_data_5_V_TDATA;
output   res_V_data_5_V_TVALID;
input   res_V_data_5_V_TREADY;
output  [15:0] res_V_data_6_V_TDATA;
output   res_V_data_6_V_TVALID;
input   res_V_data_6_V_TREADY;
output  [15:0] res_V_data_7_V_TDATA;
output   res_V_data_7_V_TVALID;
input   res_V_data_7_V_TREADY;
output  [15:0] res_V_data_8_V_TDATA;
output   res_V_data_8_V_TVALID;
input   res_V_data_8_V_TREADY;
output  [15:0] res_V_data_9_V_TDATA;
output   res_V_data_9_V_TVALID;
input   res_V_data_9_V_TREADY;
output  [15:0] res_V_data_10_V_TDATA;
output   res_V_data_10_V_TVALID;
input   res_V_data_10_V_TREADY;
output  [15:0] res_V_data_11_V_TDATA;
output   res_V_data_11_V_TVALID;
input   res_V_data_11_V_TREADY;
output  [15:0] res_V_data_12_V_TDATA;
output   res_V_data_12_V_TVALID;
input   res_V_data_12_V_TREADY;
output  [15:0] res_V_data_13_V_TDATA;
output   res_V_data_13_V_TVALID;
input   res_V_data_13_V_TREADY;
output  [15:0] res_V_data_14_V_TDATA;
output   res_V_data_14_V_TVALID;
input   res_V_data_14_V_TREADY;
output  [15:0] res_V_data_15_V_TDATA;
output   res_V_data_15_V_TVALID;
input   res_V_data_15_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op4;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    regslice_both_res_V_data_0_V_U_apdone_blk;
wire    regslice_both_res_V_data_1_V_U_apdone_blk;
wire    regslice_both_res_V_data_2_V_U_apdone_blk;
wire    regslice_both_res_V_data_3_V_U_apdone_blk;
wire    regslice_both_res_V_data_4_V_U_apdone_blk;
wire    regslice_both_res_V_data_5_V_U_apdone_blk;
wire    regslice_both_res_V_data_6_V_U_apdone_blk;
wire    regslice_both_res_V_data_7_V_U_apdone_blk;
wire    regslice_both_res_V_data_8_V_U_apdone_blk;
wire    regslice_both_res_V_data_9_V_U_apdone_blk;
wire    regslice_both_res_V_data_10_V_U_apdone_blk;
wire    regslice_both_res_V_data_11_V_U_apdone_blk;
wire    regslice_both_res_V_data_12_V_U_apdone_blk;
wire    regslice_both_res_V_data_13_V_U_apdone_blk;
wire    regslice_both_res_V_data_14_V_U_apdone_blk;
wire    regslice_both_res_V_data_15_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    data_V_data_0_V_blk_n;
wire    ap_block_pp0_stage0;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_TDATA_blk_n;
reg    res_V_data_1_V_TDATA_blk_n;
reg    res_V_data_2_V_TDATA_blk_n;
reg    res_V_data_3_V_TDATA_blk_n;
reg    res_V_data_4_V_TDATA_blk_n;
reg    res_V_data_5_V_TDATA_blk_n;
reg    res_V_data_6_V_TDATA_blk_n;
reg    res_V_data_7_V_TDATA_blk_n;
reg    res_V_data_8_V_TDATA_blk_n;
reg    res_V_data_9_V_TDATA_blk_n;
reg    res_V_data_10_V_TDATA_blk_n;
reg    res_V_data_11_V_TDATA_blk_n;
reg    res_V_data_12_V_TDATA_blk_n;
reg    res_V_data_13_V_TDATA_blk_n;
reg    res_V_data_14_V_TDATA_blk_n;
reg    res_V_data_15_V_TDATA_blk_n;
reg   [15:0] tmp_data_V_0_reg_2566;
reg   [15:0] tmp_data_V_1_reg_2572;
reg   [15:0] tmp_data_V_2_reg_2578;
reg   [15:0] tmp_data_V_3_reg_2584;
reg   [15:0] tmp_data_V_4_reg_2590;
reg   [15:0] tmp_data_V_526_reg_2596;
reg   [15:0] tmp_data_V_6_reg_2602;
reg   [15:0] tmp_data_V_7_reg_2608;
reg   [15:0] tmp_data_V_8_reg_2614;
reg   [15:0] tmp_data_V_9_reg_2620;
reg   [15:0] tmp_data_V_10_reg_2626;
reg   [15:0] tmp_data_V_11_reg_2632;
reg   [15:0] tmp_data_V_12_reg_2638;
reg   [15:0] tmp_data_V_13_reg_2644;
reg   [15:0] tmp_data_V_14_reg_2650;
reg   [15:0] tmp_data_V_15_reg_2656;
wire   [8:0] add_ln415_fu_516_p2;
reg   [8:0] add_ln415_reg_2662;
wire   [0:0] icmp_ln879_fu_532_p2;
reg   [0:0] icmp_ln879_reg_2668;
wire   [0:0] icmp_ln768_fu_538_p2;
reg   [0:0] icmp_ln768_reg_2673;
wire   [8:0] add_ln415_8_fu_590_p2;
reg   [8:0] add_ln415_8_reg_2678;
wire   [0:0] icmp_ln879_8_fu_606_p2;
reg   [0:0] icmp_ln879_8_reg_2684;
wire   [0:0] icmp_ln768_8_fu_612_p2;
reg   [0:0] icmp_ln768_8_reg_2689;
wire   [8:0] add_ln415_9_fu_664_p2;
reg   [8:0] add_ln415_9_reg_2694;
wire   [0:0] icmp_ln879_9_fu_680_p2;
reg   [0:0] icmp_ln879_9_reg_2700;
wire   [0:0] icmp_ln768_9_fu_686_p2;
reg   [0:0] icmp_ln768_9_reg_2705;
wire   [8:0] add_ln415_10_fu_738_p2;
reg   [8:0] add_ln415_10_reg_2710;
wire   [0:0] icmp_ln879_10_fu_754_p2;
reg   [0:0] icmp_ln879_10_reg_2716;
wire   [0:0] icmp_ln768_10_fu_760_p2;
reg   [0:0] icmp_ln768_10_reg_2721;
wire   [8:0] add_ln415_11_fu_812_p2;
reg   [8:0] add_ln415_11_reg_2726;
wire   [0:0] icmp_ln879_11_fu_828_p2;
reg   [0:0] icmp_ln879_11_reg_2732;
wire   [0:0] icmp_ln768_11_fu_834_p2;
reg   [0:0] icmp_ln768_11_reg_2737;
wire   [8:0] add_ln415_12_fu_886_p2;
reg   [8:0] add_ln415_12_reg_2742;
wire   [0:0] icmp_ln879_12_fu_902_p2;
reg   [0:0] icmp_ln879_12_reg_2748;
wire   [0:0] icmp_ln768_12_fu_908_p2;
reg   [0:0] icmp_ln768_12_reg_2753;
wire   [8:0] add_ln415_13_fu_960_p2;
reg   [8:0] add_ln415_13_reg_2758;
wire   [0:0] icmp_ln879_13_fu_976_p2;
reg   [0:0] icmp_ln879_13_reg_2764;
wire   [0:0] icmp_ln768_13_fu_982_p2;
reg   [0:0] icmp_ln768_13_reg_2769;
wire   [8:0] add_ln415_14_fu_1034_p2;
reg   [8:0] add_ln415_14_reg_2774;
wire   [0:0] icmp_ln879_14_fu_1050_p2;
reg   [0:0] icmp_ln879_14_reg_2780;
wire   [0:0] icmp_ln768_14_fu_1056_p2;
reg   [0:0] icmp_ln768_14_reg_2785;
wire   [8:0] add_ln415_15_fu_1108_p2;
reg   [8:0] add_ln415_15_reg_2790;
wire   [0:0] icmp_ln879_15_fu_1124_p2;
reg   [0:0] icmp_ln879_15_reg_2796;
wire   [0:0] icmp_ln768_15_fu_1130_p2;
reg   [0:0] icmp_ln768_15_reg_2801;
wire   [8:0] add_ln415_16_fu_1182_p2;
reg   [8:0] add_ln415_16_reg_2806;
wire   [0:0] icmp_ln879_16_fu_1198_p2;
reg   [0:0] icmp_ln879_16_reg_2812;
wire   [0:0] icmp_ln768_16_fu_1204_p2;
reg   [0:0] icmp_ln768_16_reg_2817;
wire   [8:0] add_ln415_17_fu_1256_p2;
reg   [8:0] add_ln415_17_reg_2822;
wire   [0:0] icmp_ln879_17_fu_1272_p2;
reg   [0:0] icmp_ln879_17_reg_2828;
wire   [0:0] icmp_ln768_17_fu_1278_p2;
reg   [0:0] icmp_ln768_17_reg_2833;
wire   [8:0] add_ln415_18_fu_1330_p2;
reg   [8:0] add_ln415_18_reg_2838;
wire   [0:0] icmp_ln879_18_fu_1346_p2;
reg   [0:0] icmp_ln879_18_reg_2844;
wire   [0:0] icmp_ln768_18_fu_1352_p2;
reg   [0:0] icmp_ln768_18_reg_2849;
wire   [8:0] add_ln415_19_fu_1404_p2;
reg   [8:0] add_ln415_19_reg_2854;
wire   [0:0] icmp_ln879_19_fu_1420_p2;
reg   [0:0] icmp_ln879_19_reg_2860;
wire   [0:0] icmp_ln768_19_fu_1426_p2;
reg   [0:0] icmp_ln768_19_reg_2865;
wire   [8:0] add_ln415_20_fu_1478_p2;
reg   [8:0] add_ln415_20_reg_2870;
wire   [0:0] icmp_ln879_20_fu_1494_p2;
reg   [0:0] icmp_ln879_20_reg_2876;
wire   [0:0] icmp_ln768_20_fu_1500_p2;
reg   [0:0] icmp_ln768_20_reg_2881;
wire   [8:0] add_ln415_21_fu_1552_p2;
reg   [8:0] add_ln415_21_reg_2886;
wire   [0:0] icmp_ln879_21_fu_1568_p2;
reg   [0:0] icmp_ln879_21_reg_2892;
wire   [0:0] icmp_ln768_21_fu_1574_p2;
reg   [0:0] icmp_ln768_21_reg_2897;
wire   [8:0] add_ln415_22_fu_1626_p2;
reg   [8:0] add_ln415_22_reg_2902;
wire   [0:0] icmp_ln879_22_fu_1642_p2;
reg   [0:0] icmp_ln879_22_reg_2908;
wire   [0:0] icmp_ln768_22_fu_1648_p2;
reg   [0:0] icmp_ln768_22_reg_2913;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] trunc_ln718_fu_488_p1;
wire   [0:0] tmp_25_fu_480_p3;
wire   [0:0] or_ln412_fu_492_p2;
wire   [0:0] tmp_27_fu_498_p3;
wire   [0:0] and_ln415_fu_506_p2;
wire   [8:0] zext_ln415_fu_512_p1;
wire   [8:0] trunc_ln_fu_470_p4;
wire   [4:0] p_Result_8_fu_522_p4;
wire   [0:0] trunc_ln718_1_fu_562_p1;
wire   [0:0] tmp_29_fu_554_p3;
wire   [0:0] or_ln412_1_fu_566_p2;
wire   [0:0] tmp_31_fu_572_p3;
wire   [0:0] and_ln415_1_fu_580_p2;
wire   [8:0] zext_ln415_8_fu_586_p1;
wire   [8:0] trunc_ln708_8_fu_544_p4;
wire   [4:0] p_Result_8_1_fu_596_p4;
wire   [0:0] trunc_ln718_2_fu_636_p1;
wire   [0:0] tmp_33_fu_628_p3;
wire   [0:0] or_ln412_2_fu_640_p2;
wire   [0:0] tmp_35_fu_646_p3;
wire   [0:0] and_ln415_2_fu_654_p2;
wire   [8:0] zext_ln415_9_fu_660_p1;
wire   [8:0] trunc_ln708_9_fu_618_p4;
wire   [4:0] p_Result_8_2_fu_670_p4;
wire   [0:0] trunc_ln718_3_fu_710_p1;
wire   [0:0] tmp_37_fu_702_p3;
wire   [0:0] or_ln412_3_fu_714_p2;
wire   [0:0] tmp_39_fu_720_p3;
wire   [0:0] and_ln415_3_fu_728_p2;
wire   [8:0] zext_ln415_10_fu_734_p1;
wire   [8:0] trunc_ln708_s_fu_692_p4;
wire   [4:0] p_Result_8_3_fu_744_p4;
wire   [0:0] trunc_ln718_4_fu_784_p1;
wire   [0:0] tmp_41_fu_776_p3;
wire   [0:0] or_ln412_4_fu_788_p2;
wire   [0:0] tmp_43_fu_794_p3;
wire   [0:0] and_ln415_4_fu_802_p2;
wire   [8:0] zext_ln415_11_fu_808_p1;
wire   [8:0] trunc_ln708_1_fu_766_p4;
wire   [4:0] p_Result_8_4_fu_818_p4;
wire   [0:0] trunc_ln718_5_fu_858_p1;
wire   [0:0] tmp_45_fu_850_p3;
wire   [0:0] or_ln412_5_fu_862_p2;
wire   [0:0] tmp_47_fu_868_p3;
wire   [0:0] and_ln415_5_fu_876_p2;
wire   [8:0] zext_ln415_12_fu_882_p1;
wire   [8:0] trunc_ln708_2_fu_840_p4;
wire   [4:0] p_Result_8_5_fu_892_p4;
wire   [0:0] trunc_ln718_6_fu_932_p1;
wire   [0:0] tmp_49_fu_924_p3;
wire   [0:0] or_ln412_6_fu_936_p2;
wire   [0:0] tmp_51_fu_942_p3;
wire   [0:0] and_ln415_6_fu_950_p2;
wire   [8:0] zext_ln415_13_fu_956_p1;
wire   [8:0] trunc_ln708_3_fu_914_p4;
wire   [4:0] p_Result_8_6_fu_966_p4;
wire   [0:0] trunc_ln718_7_fu_1006_p1;
wire   [0:0] tmp_53_fu_998_p3;
wire   [0:0] or_ln412_7_fu_1010_p2;
wire   [0:0] tmp_55_fu_1016_p3;
wire   [0:0] and_ln415_7_fu_1024_p2;
wire   [8:0] zext_ln415_14_fu_1030_p1;
wire   [8:0] trunc_ln708_4_fu_988_p4;
wire   [4:0] p_Result_8_7_fu_1040_p4;
wire   [0:0] trunc_ln718_8_fu_1080_p1;
wire   [0:0] tmp_57_fu_1072_p3;
wire   [0:0] or_ln412_8_fu_1084_p2;
wire   [0:0] tmp_59_fu_1090_p3;
wire   [0:0] and_ln415_8_fu_1098_p2;
wire   [8:0] zext_ln415_15_fu_1104_p1;
wire   [8:0] trunc_ln708_5_fu_1062_p4;
wire   [4:0] p_Result_8_8_fu_1114_p4;
wire   [0:0] trunc_ln718_9_fu_1154_p1;
wire   [0:0] tmp_61_fu_1146_p3;
wire   [0:0] or_ln412_9_fu_1158_p2;
wire   [0:0] tmp_63_fu_1164_p3;
wire   [0:0] and_ln415_9_fu_1172_p2;
wire   [8:0] zext_ln415_16_fu_1178_p1;
wire   [8:0] trunc_ln708_6_fu_1136_p4;
wire   [4:0] p_Result_8_9_fu_1188_p4;
wire   [0:0] trunc_ln718_10_fu_1228_p1;
wire   [0:0] tmp_65_fu_1220_p3;
wire   [0:0] or_ln412_10_fu_1232_p2;
wire   [0:0] tmp_67_fu_1238_p3;
wire   [0:0] and_ln415_10_fu_1246_p2;
wire   [8:0] zext_ln415_17_fu_1252_p1;
wire   [8:0] trunc_ln708_7_fu_1210_p4;
wire   [4:0] p_Result_8_s_fu_1262_p4;
wire   [0:0] trunc_ln718_11_fu_1302_p1;
wire   [0:0] tmp_69_fu_1294_p3;
wire   [0:0] or_ln412_11_fu_1306_p2;
wire   [0:0] tmp_71_fu_1312_p3;
wire   [0:0] and_ln415_11_fu_1320_p2;
wire   [8:0] zext_ln415_18_fu_1326_p1;
wire   [8:0] trunc_ln708_10_fu_1284_p4;
wire   [4:0] p_Result_8_10_fu_1336_p4;
wire   [0:0] trunc_ln718_12_fu_1376_p1;
wire   [0:0] tmp_73_fu_1368_p3;
wire   [0:0] or_ln412_12_fu_1380_p2;
wire   [0:0] tmp_75_fu_1386_p3;
wire   [0:0] and_ln415_12_fu_1394_p2;
wire   [8:0] zext_ln415_19_fu_1400_p1;
wire   [8:0] trunc_ln708_11_fu_1358_p4;
wire   [4:0] p_Result_8_11_fu_1410_p4;
wire   [0:0] trunc_ln718_13_fu_1450_p1;
wire   [0:0] tmp_77_fu_1442_p3;
wire   [0:0] or_ln412_13_fu_1454_p2;
wire   [0:0] tmp_79_fu_1460_p3;
wire   [0:0] and_ln415_13_fu_1468_p2;
wire   [8:0] zext_ln415_20_fu_1474_p1;
wire   [8:0] trunc_ln708_12_fu_1432_p4;
wire   [4:0] p_Result_8_12_fu_1484_p4;
wire   [0:0] trunc_ln718_14_fu_1524_p1;
wire   [0:0] tmp_81_fu_1516_p3;
wire   [0:0] or_ln412_14_fu_1528_p2;
wire   [0:0] tmp_83_fu_1534_p3;
wire   [0:0] and_ln415_14_fu_1542_p2;
wire   [8:0] zext_ln415_21_fu_1548_p1;
wire   [8:0] trunc_ln708_13_fu_1506_p4;
wire   [4:0] p_Result_8_13_fu_1558_p4;
wire   [0:0] trunc_ln718_15_fu_1598_p1;
wire   [0:0] tmp_85_fu_1590_p3;
wire   [0:0] or_ln412_15_fu_1602_p2;
wire   [0:0] tmp_87_fu_1608_p3;
wire   [0:0] and_ln415_15_fu_1616_p2;
wire   [8:0] zext_ln415_22_fu_1622_p1;
wire   [8:0] trunc_ln708_14_fu_1580_p4;
wire   [4:0] p_Result_8_14_fu_1632_p4;
wire   [0:0] tmp_28_fu_1666_p3;
wire   [0:0] tmp_26_fu_1659_p3;
wire   [0:0] xor_ln416_fu_1673_p2;
wire   [0:0] and_ln416_fu_1679_p2;
wire   [0:0] tmp_32_fu_1703_p3;
wire   [0:0] tmp_30_fu_1696_p3;
wire   [0:0] xor_ln416_8_fu_1710_p2;
wire   [0:0] and_ln416_8_fu_1716_p2;
wire   [0:0] tmp_36_fu_1740_p3;
wire   [0:0] tmp_34_fu_1733_p3;
wire   [0:0] xor_ln416_9_fu_1747_p2;
wire   [0:0] and_ln416_9_fu_1753_p2;
wire   [0:0] tmp_40_fu_1777_p3;
wire   [0:0] tmp_38_fu_1770_p3;
wire   [0:0] xor_ln416_10_fu_1784_p2;
wire   [0:0] and_ln416_10_fu_1790_p2;
wire   [0:0] tmp_44_fu_1814_p3;
wire   [0:0] tmp_42_fu_1807_p3;
wire   [0:0] xor_ln416_11_fu_1821_p2;
wire   [0:0] and_ln416_11_fu_1827_p2;
wire   [0:0] tmp_48_fu_1851_p3;
wire   [0:0] tmp_46_fu_1844_p3;
wire   [0:0] xor_ln416_12_fu_1858_p2;
wire   [0:0] and_ln416_12_fu_1864_p2;
wire   [0:0] tmp_52_fu_1888_p3;
wire   [0:0] tmp_50_fu_1881_p3;
wire   [0:0] xor_ln416_13_fu_1895_p2;
wire   [0:0] and_ln416_13_fu_1901_p2;
wire   [0:0] tmp_56_fu_1925_p3;
wire   [0:0] tmp_54_fu_1918_p3;
wire   [0:0] xor_ln416_14_fu_1932_p2;
wire   [0:0] and_ln416_14_fu_1938_p2;
wire   [0:0] tmp_60_fu_1962_p3;
wire   [0:0] tmp_58_fu_1955_p3;
wire   [0:0] xor_ln416_15_fu_1969_p2;
wire   [0:0] and_ln416_15_fu_1975_p2;
wire   [0:0] tmp_64_fu_1999_p3;
wire   [0:0] tmp_62_fu_1992_p3;
wire   [0:0] xor_ln416_16_fu_2006_p2;
wire   [0:0] and_ln416_16_fu_2012_p2;
wire   [0:0] tmp_68_fu_2036_p3;
wire   [0:0] tmp_66_fu_2029_p3;
wire   [0:0] xor_ln416_17_fu_2043_p2;
wire   [0:0] and_ln416_17_fu_2049_p2;
wire   [0:0] tmp_72_fu_2073_p3;
wire   [0:0] tmp_70_fu_2066_p3;
wire   [0:0] xor_ln416_18_fu_2080_p2;
wire   [0:0] and_ln416_18_fu_2086_p2;
wire   [0:0] tmp_76_fu_2110_p3;
wire   [0:0] tmp_74_fu_2103_p3;
wire   [0:0] xor_ln416_19_fu_2117_p2;
wire   [0:0] and_ln416_19_fu_2123_p2;
wire   [0:0] tmp_80_fu_2147_p3;
wire   [0:0] tmp_78_fu_2140_p3;
wire   [0:0] xor_ln416_20_fu_2154_p2;
wire   [0:0] and_ln416_20_fu_2160_p2;
wire   [0:0] tmp_84_fu_2184_p3;
wire   [0:0] tmp_82_fu_2177_p3;
wire   [0:0] xor_ln416_21_fu_2191_p2;
wire   [0:0] and_ln416_21_fu_2197_p2;
wire   [0:0] tmp_88_fu_2221_p3;
wire   [0:0] tmp_86_fu_2214_p3;
wire   [0:0] xor_ln416_22_fu_2228_p2;
wire   [0:0] and_ln416_22_fu_2234_p2;
wire   [0:0] select_ln777_fu_1685_p3;
wire   [0:0] icmp_ln1494_fu_1654_p2;
wire   [8:0] select_ln340_fu_2246_p3;
wire   [0:0] select_ln777_8_fu_1722_p3;
wire   [0:0] icmp_ln1494_1_fu_1691_p2;
wire   [8:0] select_ln340_8_fu_2261_p3;
wire   [0:0] select_ln777_9_fu_1759_p3;
wire   [0:0] icmp_ln1494_2_fu_1728_p2;
wire   [8:0] select_ln340_9_fu_2276_p3;
wire   [0:0] select_ln777_10_fu_1796_p3;
wire   [0:0] icmp_ln1494_3_fu_1765_p2;
wire   [8:0] select_ln340_10_fu_2291_p3;
wire   [0:0] select_ln777_11_fu_1833_p3;
wire   [0:0] icmp_ln1494_4_fu_1802_p2;
wire   [8:0] select_ln340_11_fu_2306_p3;
wire   [0:0] select_ln777_12_fu_1870_p3;
wire   [0:0] icmp_ln1494_5_fu_1839_p2;
wire   [8:0] select_ln340_12_fu_2321_p3;
wire   [0:0] select_ln777_13_fu_1907_p3;
wire   [0:0] icmp_ln1494_6_fu_1876_p2;
wire   [8:0] select_ln340_13_fu_2336_p3;
wire   [0:0] select_ln777_14_fu_1944_p3;
wire   [0:0] icmp_ln1494_7_fu_1913_p2;
wire   [8:0] select_ln340_14_fu_2351_p3;
wire   [0:0] select_ln777_15_fu_1981_p3;
wire   [0:0] icmp_ln1494_8_fu_1950_p2;
wire   [8:0] select_ln340_15_fu_2366_p3;
wire   [0:0] select_ln777_16_fu_2018_p3;
wire   [0:0] icmp_ln1494_9_fu_1987_p2;
wire   [8:0] select_ln340_16_fu_2381_p3;
wire   [0:0] select_ln777_17_fu_2055_p3;
wire   [0:0] icmp_ln1494_10_fu_2024_p2;
wire   [8:0] select_ln340_17_fu_2396_p3;
wire   [0:0] select_ln777_18_fu_2092_p3;
wire   [0:0] icmp_ln1494_11_fu_2061_p2;
wire   [8:0] select_ln340_18_fu_2411_p3;
wire   [0:0] select_ln777_19_fu_2129_p3;
wire   [0:0] icmp_ln1494_12_fu_2098_p2;
wire   [8:0] select_ln340_19_fu_2426_p3;
wire   [0:0] select_ln777_20_fu_2166_p3;
wire   [0:0] icmp_ln1494_13_fu_2135_p2;
wire   [8:0] select_ln340_20_fu_2441_p3;
wire   [0:0] select_ln777_21_fu_2203_p3;
wire   [0:0] icmp_ln1494_14_fu_2172_p2;
wire   [8:0] select_ln340_21_fu_2456_p3;
wire   [0:0] select_ln777_22_fu_2240_p3;
wire   [0:0] icmp_ln1494_15_fu_2209_p2;
wire   [8:0] select_ln340_22_fu_2471_p3;
wire   [8:0] tmp_data_0_V_fu_2253_p3;
wire   [8:0] tmp_data_1_V_fu_2268_p3;
wire   [8:0] tmp_data_2_V_fu_2283_p3;
wire   [8:0] tmp_data_3_V_fu_2298_p3;
wire   [8:0] tmp_data_4_V_fu_2313_p3;
wire   [8:0] tmp_data_5_V_fu_2328_p3;
wire   [8:0] tmp_data_6_V_fu_2343_p3;
wire   [8:0] tmp_data_7_V_fu_2358_p3;
wire   [8:0] tmp_data_8_V_fu_2373_p3;
wire   [8:0] tmp_data_9_V_fu_2388_p3;
wire   [8:0] tmp_data_10_V_fu_2403_p3;
wire   [8:0] tmp_data_11_V_fu_2418_p3;
wire   [8:0] tmp_data_12_V_fu_2433_p3;
wire   [8:0] tmp_data_13_V_fu_2448_p3;
wire   [8:0] tmp_data_14_V_fu_2463_p3;
wire   [8:0] tmp_data_15_V_fu_2478_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] res_V_data_0_V_TDATA_int;
reg    res_V_data_0_V_TVALID_int;
wire    res_V_data_0_V_TREADY_int;
wire    regslice_both_res_V_data_0_V_U_vld_out;
wire   [15:0] res_V_data_1_V_TDATA_int;
reg    res_V_data_1_V_TVALID_int;
wire    res_V_data_1_V_TREADY_int;
wire    regslice_both_res_V_data_1_V_U_vld_out;
wire   [15:0] res_V_data_2_V_TDATA_int;
reg    res_V_data_2_V_TVALID_int;
wire    res_V_data_2_V_TREADY_int;
wire    regslice_both_res_V_data_2_V_U_vld_out;
wire   [15:0] res_V_data_3_V_TDATA_int;
reg    res_V_data_3_V_TVALID_int;
wire    res_V_data_3_V_TREADY_int;
wire    regslice_both_res_V_data_3_V_U_vld_out;
wire   [15:0] res_V_data_4_V_TDATA_int;
reg    res_V_data_4_V_TVALID_int;
wire    res_V_data_4_V_TREADY_int;
wire    regslice_both_res_V_data_4_V_U_vld_out;
wire   [15:0] res_V_data_5_V_TDATA_int;
reg    res_V_data_5_V_TVALID_int;
wire    res_V_data_5_V_TREADY_int;
wire    regslice_both_res_V_data_5_V_U_vld_out;
wire   [15:0] res_V_data_6_V_TDATA_int;
reg    res_V_data_6_V_TVALID_int;
wire    res_V_data_6_V_TREADY_int;
wire    regslice_both_res_V_data_6_V_U_vld_out;
wire   [15:0] res_V_data_7_V_TDATA_int;
reg    res_V_data_7_V_TVALID_int;
wire    res_V_data_7_V_TREADY_int;
wire    regslice_both_res_V_data_7_V_U_vld_out;
wire   [15:0] res_V_data_8_V_TDATA_int;
reg    res_V_data_8_V_TVALID_int;
wire    res_V_data_8_V_TREADY_int;
wire    regslice_both_res_V_data_8_V_U_vld_out;
wire   [15:0] res_V_data_9_V_TDATA_int;
reg    res_V_data_9_V_TVALID_int;
wire    res_V_data_9_V_TREADY_int;
wire    regslice_both_res_V_data_9_V_U_vld_out;
wire   [15:0] res_V_data_10_V_TDATA_int;
reg    res_V_data_10_V_TVALID_int;
wire    res_V_data_10_V_TREADY_int;
wire    regslice_both_res_V_data_10_V_U_vld_out;
wire   [15:0] res_V_data_11_V_TDATA_int;
reg    res_V_data_11_V_TVALID_int;
wire    res_V_data_11_V_TREADY_int;
wire    regslice_both_res_V_data_11_V_U_vld_out;
wire   [15:0] res_V_data_12_V_TDATA_int;
reg    res_V_data_12_V_TVALID_int;
wire    res_V_data_12_V_TREADY_int;
wire    regslice_both_res_V_data_12_V_U_vld_out;
wire   [15:0] res_V_data_13_V_TDATA_int;
reg    res_V_data_13_V_TVALID_int;
wire    res_V_data_13_V_TREADY_int;
wire    regslice_both_res_V_data_13_V_U_vld_out;
wire   [15:0] res_V_data_14_V_TDATA_int;
reg    res_V_data_14_V_TVALID_int;
wire    res_V_data_14_V_TREADY_int;
wire    regslice_both_res_V_data_14_V_U_vld_out;
wire   [15:0] res_V_data_15_V_TDATA_int;
reg    res_V_data_15_V_TVALID_int;
wire    res_V_data_15_V_TREADY_int;
wire    regslice_both_res_V_data_15_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_0_V_TDATA_int),
    .vld_in(res_V_data_0_V_TVALID_int),
    .ack_in(res_V_data_0_V_TREADY_int),
    .data_out(res_V_data_0_V_TDATA),
    .vld_out(regslice_both_res_V_data_0_V_U_vld_out),
    .ack_out(res_V_data_0_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_0_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_1_V_TDATA_int),
    .vld_in(res_V_data_1_V_TVALID_int),
    .ack_in(res_V_data_1_V_TREADY_int),
    .data_out(res_V_data_1_V_TDATA),
    .vld_out(regslice_both_res_V_data_1_V_U_vld_out),
    .ack_out(res_V_data_1_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_1_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_2_V_TDATA_int),
    .vld_in(res_V_data_2_V_TVALID_int),
    .ack_in(res_V_data_2_V_TREADY_int),
    .data_out(res_V_data_2_V_TDATA),
    .vld_out(regslice_both_res_V_data_2_V_U_vld_out),
    .ack_out(res_V_data_2_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_2_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_3_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_3_V_TDATA_int),
    .vld_in(res_V_data_3_V_TVALID_int),
    .ack_in(res_V_data_3_V_TREADY_int),
    .data_out(res_V_data_3_V_TDATA),
    .vld_out(regslice_both_res_V_data_3_V_U_vld_out),
    .ack_out(res_V_data_3_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_3_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_4_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_4_V_TDATA_int),
    .vld_in(res_V_data_4_V_TVALID_int),
    .ack_in(res_V_data_4_V_TREADY_int),
    .data_out(res_V_data_4_V_TDATA),
    .vld_out(regslice_both_res_V_data_4_V_U_vld_out),
    .ack_out(res_V_data_4_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_4_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_5_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_5_V_TDATA_int),
    .vld_in(res_V_data_5_V_TVALID_int),
    .ack_in(res_V_data_5_V_TREADY_int),
    .data_out(res_V_data_5_V_TDATA),
    .vld_out(regslice_both_res_V_data_5_V_U_vld_out),
    .ack_out(res_V_data_5_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_5_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_6_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_6_V_TDATA_int),
    .vld_in(res_V_data_6_V_TVALID_int),
    .ack_in(res_V_data_6_V_TREADY_int),
    .data_out(res_V_data_6_V_TDATA),
    .vld_out(regslice_both_res_V_data_6_V_U_vld_out),
    .ack_out(res_V_data_6_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_6_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_7_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_7_V_TDATA_int),
    .vld_in(res_V_data_7_V_TVALID_int),
    .ack_in(res_V_data_7_V_TREADY_int),
    .data_out(res_V_data_7_V_TDATA),
    .vld_out(regslice_both_res_V_data_7_V_U_vld_out),
    .ack_out(res_V_data_7_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_7_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_8_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_8_V_TDATA_int),
    .vld_in(res_V_data_8_V_TVALID_int),
    .ack_in(res_V_data_8_V_TREADY_int),
    .data_out(res_V_data_8_V_TDATA),
    .vld_out(regslice_both_res_V_data_8_V_U_vld_out),
    .ack_out(res_V_data_8_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_8_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_9_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_9_V_TDATA_int),
    .vld_in(res_V_data_9_V_TVALID_int),
    .ack_in(res_V_data_9_V_TREADY_int),
    .data_out(res_V_data_9_V_TDATA),
    .vld_out(regslice_both_res_V_data_9_V_U_vld_out),
    .ack_out(res_V_data_9_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_9_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_10_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_10_V_TDATA_int),
    .vld_in(res_V_data_10_V_TVALID_int),
    .ack_in(res_V_data_10_V_TREADY_int),
    .data_out(res_V_data_10_V_TDATA),
    .vld_out(regslice_both_res_V_data_10_V_U_vld_out),
    .ack_out(res_V_data_10_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_10_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_11_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_11_V_TDATA_int),
    .vld_in(res_V_data_11_V_TVALID_int),
    .ack_in(res_V_data_11_V_TREADY_int),
    .data_out(res_V_data_11_V_TDATA),
    .vld_out(regslice_both_res_V_data_11_V_U_vld_out),
    .ack_out(res_V_data_11_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_11_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_12_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_12_V_TDATA_int),
    .vld_in(res_V_data_12_V_TVALID_int),
    .ack_in(res_V_data_12_V_TREADY_int),
    .data_out(res_V_data_12_V_TDATA),
    .vld_out(regslice_both_res_V_data_12_V_U_vld_out),
    .ack_out(res_V_data_12_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_12_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_13_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_13_V_TDATA_int),
    .vld_in(res_V_data_13_V_TVALID_int),
    .ack_in(res_V_data_13_V_TREADY_int),
    .data_out(res_V_data_13_V_TDATA),
    .vld_out(regslice_both_res_V_data_13_V_U_vld_out),
    .ack_out(res_V_data_13_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_13_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_14_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_14_V_TDATA_int),
    .vld_in(res_V_data_14_V_TVALID_int),
    .ack_in(res_V_data_14_V_TREADY_int),
    .data_out(res_V_data_14_V_TDATA),
    .vld_out(regslice_both_res_V_data_14_V_U_vld_out),
    .ack_out(res_V_data_14_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_14_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_15_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_15_V_TDATA_int),
    .vld_in(res_V_data_15_V_TVALID_int),
    .ack_in(res_V_data_15_V_TREADY_int),
    .data_out(res_V_data_15_V_TDATA),
    .vld_out(regslice_both_res_V_data_15_V_U_vld_out),
    .ack_out(res_V_data_15_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_15_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln415_10_reg_2710 <= add_ln415_10_fu_738_p2;
        add_ln415_11_reg_2726 <= add_ln415_11_fu_812_p2;
        add_ln415_12_reg_2742 <= add_ln415_12_fu_886_p2;
        add_ln415_13_reg_2758 <= add_ln415_13_fu_960_p2;
        add_ln415_14_reg_2774 <= add_ln415_14_fu_1034_p2;
        add_ln415_15_reg_2790 <= add_ln415_15_fu_1108_p2;
        add_ln415_16_reg_2806 <= add_ln415_16_fu_1182_p2;
        add_ln415_17_reg_2822 <= add_ln415_17_fu_1256_p2;
        add_ln415_18_reg_2838 <= add_ln415_18_fu_1330_p2;
        add_ln415_19_reg_2854 <= add_ln415_19_fu_1404_p2;
        add_ln415_20_reg_2870 <= add_ln415_20_fu_1478_p2;
        add_ln415_21_reg_2886 <= add_ln415_21_fu_1552_p2;
        add_ln415_22_reg_2902 <= add_ln415_22_fu_1626_p2;
        add_ln415_8_reg_2678 <= add_ln415_8_fu_590_p2;
        add_ln415_9_reg_2694 <= add_ln415_9_fu_664_p2;
        add_ln415_reg_2662 <= add_ln415_fu_516_p2;
        icmp_ln768_10_reg_2721 <= icmp_ln768_10_fu_760_p2;
        icmp_ln768_11_reg_2737 <= icmp_ln768_11_fu_834_p2;
        icmp_ln768_12_reg_2753 <= icmp_ln768_12_fu_908_p2;
        icmp_ln768_13_reg_2769 <= icmp_ln768_13_fu_982_p2;
        icmp_ln768_14_reg_2785 <= icmp_ln768_14_fu_1056_p2;
        icmp_ln768_15_reg_2801 <= icmp_ln768_15_fu_1130_p2;
        icmp_ln768_16_reg_2817 <= icmp_ln768_16_fu_1204_p2;
        icmp_ln768_17_reg_2833 <= icmp_ln768_17_fu_1278_p2;
        icmp_ln768_18_reg_2849 <= icmp_ln768_18_fu_1352_p2;
        icmp_ln768_19_reg_2865 <= icmp_ln768_19_fu_1426_p2;
        icmp_ln768_20_reg_2881 <= icmp_ln768_20_fu_1500_p2;
        icmp_ln768_21_reg_2897 <= icmp_ln768_21_fu_1574_p2;
        icmp_ln768_22_reg_2913 <= icmp_ln768_22_fu_1648_p2;
        icmp_ln768_8_reg_2689 <= icmp_ln768_8_fu_612_p2;
        icmp_ln768_9_reg_2705 <= icmp_ln768_9_fu_686_p2;
        icmp_ln768_reg_2673 <= icmp_ln768_fu_538_p2;
        icmp_ln879_10_reg_2716 <= icmp_ln879_10_fu_754_p2;
        icmp_ln879_11_reg_2732 <= icmp_ln879_11_fu_828_p2;
        icmp_ln879_12_reg_2748 <= icmp_ln879_12_fu_902_p2;
        icmp_ln879_13_reg_2764 <= icmp_ln879_13_fu_976_p2;
        icmp_ln879_14_reg_2780 <= icmp_ln879_14_fu_1050_p2;
        icmp_ln879_15_reg_2796 <= icmp_ln879_15_fu_1124_p2;
        icmp_ln879_16_reg_2812 <= icmp_ln879_16_fu_1198_p2;
        icmp_ln879_17_reg_2828 <= icmp_ln879_17_fu_1272_p2;
        icmp_ln879_18_reg_2844 <= icmp_ln879_18_fu_1346_p2;
        icmp_ln879_19_reg_2860 <= icmp_ln879_19_fu_1420_p2;
        icmp_ln879_20_reg_2876 <= icmp_ln879_20_fu_1494_p2;
        icmp_ln879_21_reg_2892 <= icmp_ln879_21_fu_1568_p2;
        icmp_ln879_22_reg_2908 <= icmp_ln879_22_fu_1642_p2;
        icmp_ln879_8_reg_2684 <= icmp_ln879_8_fu_606_p2;
        icmp_ln879_9_reg_2700 <= icmp_ln879_9_fu_680_p2;
        icmp_ln879_reg_2668 <= icmp_ln879_fu_532_p2;
        tmp_data_V_0_reg_2566 <= data_V_data_0_V_dout;
        tmp_data_V_10_reg_2626 <= data_V_data_10_V_dout;
        tmp_data_V_11_reg_2632 <= data_V_data_11_V_dout;
        tmp_data_V_12_reg_2638 <= data_V_data_12_V_dout;
        tmp_data_V_13_reg_2644 <= data_V_data_13_V_dout;
        tmp_data_V_14_reg_2650 <= data_V_data_14_V_dout;
        tmp_data_V_15_reg_2656 <= data_V_data_15_V_dout;
        tmp_data_V_1_reg_2572 <= data_V_data_1_V_dout;
        tmp_data_V_2_reg_2578 <= data_V_data_2_V_dout;
        tmp_data_V_3_reg_2584 <= data_V_data_3_V_dout;
        tmp_data_V_4_reg_2590 <= data_V_data_4_V_dout;
        tmp_data_V_526_reg_2596 <= data_V_data_5_V_dout;
        tmp_data_V_6_reg_2602 <= data_V_data_6_V_dout;
        tmp_data_V_7_reg_2608 <= data_V_data_7_V_dout;
        tmp_data_V_8_reg_2614 <= data_V_data_8_V_dout;
        tmp_data_V_9_reg_2620 <= data_V_data_9_V_dout;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY_int;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_0_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_10_V_TDATA_blk_n = res_V_data_10_V_TREADY_int;
    end else begin
        res_V_data_10_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_10_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_10_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_11_V_TDATA_blk_n = res_V_data_11_V_TREADY_int;
    end else begin
        res_V_data_11_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_11_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_11_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_12_V_TDATA_blk_n = res_V_data_12_V_TREADY_int;
    end else begin
        res_V_data_12_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_12_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_12_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_13_V_TDATA_blk_n = res_V_data_13_V_TREADY_int;
    end else begin
        res_V_data_13_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_13_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_13_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_14_V_TDATA_blk_n = res_V_data_14_V_TREADY_int;
    end else begin
        res_V_data_14_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_14_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_14_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_15_V_TDATA_blk_n = res_V_data_15_V_TREADY_int;
    end else begin
        res_V_data_15_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_15_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_15_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY_int;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_1_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY_int;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_2_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY_int;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_3_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY_int;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_4_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_5_V_TDATA_blk_n = res_V_data_5_V_TREADY_int;
    end else begin
        res_V_data_5_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_5_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_5_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_6_V_TDATA_blk_n = res_V_data_6_V_TREADY_int;
    end else begin
        res_V_data_6_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_6_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_6_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_7_V_TDATA_blk_n = res_V_data_7_V_TREADY_int;
    end else begin
        res_V_data_7_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_7_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_7_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_8_V_TDATA_blk_n = res_V_data_8_V_TREADY_int;
    end else begin
        res_V_data_8_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_8_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_8_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        res_V_data_9_V_TDATA_blk_n = res_V_data_9_V_TREADY_int;
    end else begin
        res_V_data_9_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_9_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_9_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_10_fu_738_p2 = (zext_ln415_10_fu_734_p1 + trunc_ln708_s_fu_692_p4);

assign add_ln415_11_fu_812_p2 = (zext_ln415_11_fu_808_p1 + trunc_ln708_1_fu_766_p4);

assign add_ln415_12_fu_886_p2 = (zext_ln415_12_fu_882_p1 + trunc_ln708_2_fu_840_p4);

assign add_ln415_13_fu_960_p2 = (zext_ln415_13_fu_956_p1 + trunc_ln708_3_fu_914_p4);

assign add_ln415_14_fu_1034_p2 = (zext_ln415_14_fu_1030_p1 + trunc_ln708_4_fu_988_p4);

assign add_ln415_15_fu_1108_p2 = (zext_ln415_15_fu_1104_p1 + trunc_ln708_5_fu_1062_p4);

assign add_ln415_16_fu_1182_p2 = (zext_ln415_16_fu_1178_p1 + trunc_ln708_6_fu_1136_p4);

assign add_ln415_17_fu_1256_p2 = (zext_ln415_17_fu_1252_p1 + trunc_ln708_7_fu_1210_p4);

assign add_ln415_18_fu_1330_p2 = (zext_ln415_18_fu_1326_p1 + trunc_ln708_10_fu_1284_p4);

assign add_ln415_19_fu_1404_p2 = (zext_ln415_19_fu_1400_p1 + trunc_ln708_11_fu_1358_p4);

assign add_ln415_20_fu_1478_p2 = (zext_ln415_20_fu_1474_p1 + trunc_ln708_12_fu_1432_p4);

assign add_ln415_21_fu_1552_p2 = (zext_ln415_21_fu_1548_p1 + trunc_ln708_13_fu_1506_p4);

assign add_ln415_22_fu_1626_p2 = (zext_ln415_22_fu_1622_p1 + trunc_ln708_14_fu_1580_p4);

assign add_ln415_8_fu_590_p2 = (zext_ln415_8_fu_586_p1 + trunc_ln708_8_fu_544_p4);

assign add_ln415_9_fu_664_p2 = (zext_ln415_9_fu_660_p1 + trunc_ln708_9_fu_618_p4);

assign add_ln415_fu_516_p2 = (zext_ln415_fu_512_p1 + trunc_ln_fu_470_p4);

assign and_ln415_10_fu_1246_p2 = (tmp_67_fu_1238_p3 & or_ln412_10_fu_1232_p2);

assign and_ln415_11_fu_1320_p2 = (tmp_71_fu_1312_p3 & or_ln412_11_fu_1306_p2);

assign and_ln415_12_fu_1394_p2 = (tmp_75_fu_1386_p3 & or_ln412_12_fu_1380_p2);

assign and_ln415_13_fu_1468_p2 = (tmp_79_fu_1460_p3 & or_ln412_13_fu_1454_p2);

assign and_ln415_14_fu_1542_p2 = (tmp_83_fu_1534_p3 & or_ln412_14_fu_1528_p2);

assign and_ln415_15_fu_1616_p2 = (tmp_87_fu_1608_p3 & or_ln412_15_fu_1602_p2);

assign and_ln415_1_fu_580_p2 = (tmp_31_fu_572_p3 & or_ln412_1_fu_566_p2);

assign and_ln415_2_fu_654_p2 = (tmp_35_fu_646_p3 & or_ln412_2_fu_640_p2);

assign and_ln415_3_fu_728_p2 = (tmp_39_fu_720_p3 & or_ln412_3_fu_714_p2);

assign and_ln415_4_fu_802_p2 = (tmp_43_fu_794_p3 & or_ln412_4_fu_788_p2);

assign and_ln415_5_fu_876_p2 = (tmp_47_fu_868_p3 & or_ln412_5_fu_862_p2);

assign and_ln415_6_fu_950_p2 = (tmp_51_fu_942_p3 & or_ln412_6_fu_936_p2);

assign and_ln415_7_fu_1024_p2 = (tmp_55_fu_1016_p3 & or_ln412_7_fu_1010_p2);

assign and_ln415_8_fu_1098_p2 = (tmp_59_fu_1090_p3 & or_ln412_8_fu_1084_p2);

assign and_ln415_9_fu_1172_p2 = (tmp_63_fu_1164_p3 & or_ln412_9_fu_1158_p2);

assign and_ln415_fu_506_p2 = (tmp_27_fu_498_p3 & or_ln412_fu_492_p2);

assign and_ln416_10_fu_1790_p2 = (xor_ln416_10_fu_1784_p2 & tmp_38_fu_1770_p3);

assign and_ln416_11_fu_1827_p2 = (xor_ln416_11_fu_1821_p2 & tmp_42_fu_1807_p3);

assign and_ln416_12_fu_1864_p2 = (xor_ln416_12_fu_1858_p2 & tmp_46_fu_1844_p3);

assign and_ln416_13_fu_1901_p2 = (xor_ln416_13_fu_1895_p2 & tmp_50_fu_1881_p3);

assign and_ln416_14_fu_1938_p2 = (xor_ln416_14_fu_1932_p2 & tmp_54_fu_1918_p3);

assign and_ln416_15_fu_1975_p2 = (xor_ln416_15_fu_1969_p2 & tmp_58_fu_1955_p3);

assign and_ln416_16_fu_2012_p2 = (xor_ln416_16_fu_2006_p2 & tmp_62_fu_1992_p3);

assign and_ln416_17_fu_2049_p2 = (xor_ln416_17_fu_2043_p2 & tmp_66_fu_2029_p3);

assign and_ln416_18_fu_2086_p2 = (xor_ln416_18_fu_2080_p2 & tmp_70_fu_2066_p3);

assign and_ln416_19_fu_2123_p2 = (xor_ln416_19_fu_2117_p2 & tmp_74_fu_2103_p3);

assign and_ln416_20_fu_2160_p2 = (xor_ln416_20_fu_2154_p2 & tmp_78_fu_2140_p3);

assign and_ln416_21_fu_2197_p2 = (xor_ln416_21_fu_2191_p2 & tmp_82_fu_2177_p3);

assign and_ln416_22_fu_2234_p2 = (xor_ln416_22_fu_2228_p2 & tmp_86_fu_2214_p3);

assign and_ln416_8_fu_1716_p2 = (xor_ln416_8_fu_1710_p2 & tmp_30_fu_1696_p3);

assign and_ln416_9_fu_1753_p2 = (xor_ln416_9_fu_1747_p2 & tmp_34_fu_1733_p3);

assign and_ln416_fu_1679_p2 = (xor_ln416_fu_1673_p2 & tmp_26_fu_1659_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_res_V_data_15_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_14_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_13_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_12_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_11_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_10_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((res_V_data_0_V_TREADY_int == 1'b0) | (regslice_both_res_V_data_15_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_14_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_13_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_12_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_11_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_10_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1))) | ((res_V_data_0_V_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((res_V_data_0_V_TREADY_int == 1'b0) | (regslice_both_res_V_data_15_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_14_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_13_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_12_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_11_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_10_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1))) | ((res_V_data_0_V_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_res_V_data_15_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_14_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_13_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_12_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_11_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_10_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln1494_10_fu_2024_p2 = (($signed(tmp_data_V_10_reg_2626) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_11_fu_2061_p2 = (($signed(tmp_data_V_11_reg_2632) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_12_fu_2098_p2 = (($signed(tmp_data_V_12_reg_2638) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_13_fu_2135_p2 = (($signed(tmp_data_V_13_reg_2644) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_14_fu_2172_p2 = (($signed(tmp_data_V_14_reg_2650) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_15_fu_2209_p2 = (($signed(tmp_data_V_15_reg_2656) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_1691_p2 = (($signed(tmp_data_V_1_reg_2572) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_1728_p2 = (($signed(tmp_data_V_2_reg_2578) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_1765_p2 = (($signed(tmp_data_V_3_reg_2584) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_1802_p2 = (($signed(tmp_data_V_4_reg_2590) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_1839_p2 = (($signed(tmp_data_V_526_reg_2596) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_1876_p2 = (($signed(tmp_data_V_6_reg_2602) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_1913_p2 = (($signed(tmp_data_V_7_reg_2608) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_1950_p2 = (($signed(tmp_data_V_8_reg_2614) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_1987_p2 = (($signed(tmp_data_V_9_reg_2620) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_1654_p2 = (($signed(tmp_data_V_0_reg_2566) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln768_10_fu_760_p2 = ((p_Result_8_3_fu_744_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_11_fu_834_p2 = ((p_Result_8_4_fu_818_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_12_fu_908_p2 = ((p_Result_8_5_fu_892_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_13_fu_982_p2 = ((p_Result_8_6_fu_966_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_14_fu_1056_p2 = ((p_Result_8_7_fu_1040_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_15_fu_1130_p2 = ((p_Result_8_8_fu_1114_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_16_fu_1204_p2 = ((p_Result_8_9_fu_1188_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_17_fu_1278_p2 = ((p_Result_8_s_fu_1262_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_18_fu_1352_p2 = ((p_Result_8_10_fu_1336_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_19_fu_1426_p2 = ((p_Result_8_11_fu_1410_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_20_fu_1500_p2 = ((p_Result_8_12_fu_1484_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_21_fu_1574_p2 = ((p_Result_8_13_fu_1558_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_22_fu_1648_p2 = ((p_Result_8_14_fu_1632_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_8_fu_612_p2 = ((p_Result_8_1_fu_596_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_9_fu_686_p2 = ((p_Result_8_2_fu_670_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_538_p2 = ((p_Result_8_fu_522_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_10_fu_754_p2 = ((p_Result_8_3_fu_744_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_11_fu_828_p2 = ((p_Result_8_4_fu_818_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_12_fu_902_p2 = ((p_Result_8_5_fu_892_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_13_fu_976_p2 = ((p_Result_8_6_fu_966_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_14_fu_1050_p2 = ((p_Result_8_7_fu_1040_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_15_fu_1124_p2 = ((p_Result_8_8_fu_1114_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_16_fu_1198_p2 = ((p_Result_8_9_fu_1188_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_17_fu_1272_p2 = ((p_Result_8_s_fu_1262_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_18_fu_1346_p2 = ((p_Result_8_10_fu_1336_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_19_fu_1420_p2 = ((p_Result_8_11_fu_1410_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_20_fu_1494_p2 = ((p_Result_8_12_fu_1484_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_21_fu_1568_p2 = ((p_Result_8_13_fu_1558_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_22_fu_1642_p2 = ((p_Result_8_14_fu_1632_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_8_fu_606_p2 = ((p_Result_8_1_fu_596_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_9_fu_680_p2 = ((p_Result_8_2_fu_670_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_532_p2 = ((p_Result_8_fu_522_p4 == 5'd31) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op4 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln412_10_fu_1232_p2 = (trunc_ln718_10_fu_1228_p1 | tmp_65_fu_1220_p3);

assign or_ln412_11_fu_1306_p2 = (trunc_ln718_11_fu_1302_p1 | tmp_69_fu_1294_p3);

assign or_ln412_12_fu_1380_p2 = (trunc_ln718_12_fu_1376_p1 | tmp_73_fu_1368_p3);

assign or_ln412_13_fu_1454_p2 = (trunc_ln718_13_fu_1450_p1 | tmp_77_fu_1442_p3);

assign or_ln412_14_fu_1528_p2 = (trunc_ln718_14_fu_1524_p1 | tmp_81_fu_1516_p3);

assign or_ln412_15_fu_1602_p2 = (trunc_ln718_15_fu_1598_p1 | tmp_85_fu_1590_p3);

assign or_ln412_1_fu_566_p2 = (trunc_ln718_1_fu_562_p1 | tmp_29_fu_554_p3);

assign or_ln412_2_fu_640_p2 = (trunc_ln718_2_fu_636_p1 | tmp_33_fu_628_p3);

assign or_ln412_3_fu_714_p2 = (trunc_ln718_3_fu_710_p1 | tmp_37_fu_702_p3);

assign or_ln412_4_fu_788_p2 = (trunc_ln718_4_fu_784_p1 | tmp_41_fu_776_p3);

assign or_ln412_5_fu_862_p2 = (trunc_ln718_5_fu_858_p1 | tmp_45_fu_850_p3);

assign or_ln412_6_fu_936_p2 = (trunc_ln718_6_fu_932_p1 | tmp_49_fu_924_p3);

assign or_ln412_7_fu_1010_p2 = (trunc_ln718_7_fu_1006_p1 | tmp_53_fu_998_p3);

assign or_ln412_8_fu_1084_p2 = (trunc_ln718_8_fu_1080_p1 | tmp_57_fu_1072_p3);

assign or_ln412_9_fu_1158_p2 = (trunc_ln718_9_fu_1154_p1 | tmp_61_fu_1146_p3);

assign or_ln412_fu_492_p2 = (trunc_ln718_fu_488_p1 | tmp_25_fu_480_p3);

assign p_Result_8_10_fu_1336_p4 = {{data_V_data_11_V_dout[15:11]}};

assign p_Result_8_11_fu_1410_p4 = {{data_V_data_12_V_dout[15:11]}};

assign p_Result_8_12_fu_1484_p4 = {{data_V_data_13_V_dout[15:11]}};

assign p_Result_8_13_fu_1558_p4 = {{data_V_data_14_V_dout[15:11]}};

assign p_Result_8_14_fu_1632_p4 = {{data_V_data_15_V_dout[15:11]}};

assign p_Result_8_1_fu_596_p4 = {{data_V_data_1_V_dout[15:11]}};

assign p_Result_8_2_fu_670_p4 = {{data_V_data_2_V_dout[15:11]}};

assign p_Result_8_3_fu_744_p4 = {{data_V_data_3_V_dout[15:11]}};

assign p_Result_8_4_fu_818_p4 = {{data_V_data_4_V_dout[15:11]}};

assign p_Result_8_5_fu_892_p4 = {{data_V_data_5_V_dout[15:11]}};

assign p_Result_8_6_fu_966_p4 = {{data_V_data_6_V_dout[15:11]}};

assign p_Result_8_7_fu_1040_p4 = {{data_V_data_7_V_dout[15:11]}};

assign p_Result_8_8_fu_1114_p4 = {{data_V_data_8_V_dout[15:11]}};

assign p_Result_8_9_fu_1188_p4 = {{data_V_data_9_V_dout[15:11]}};

assign p_Result_8_fu_522_p4 = {{data_V_data_0_V_dout[15:11]}};

assign p_Result_8_s_fu_1262_p4 = {{data_V_data_10_V_dout[15:11]}};

assign res_V_data_0_V_TDATA_int = tmp_data_0_V_fu_2253_p3;

assign res_V_data_0_V_TVALID = regslice_both_res_V_data_0_V_U_vld_out;

assign res_V_data_10_V_TDATA_int = tmp_data_10_V_fu_2403_p3;

assign res_V_data_10_V_TVALID = regslice_both_res_V_data_10_V_U_vld_out;

assign res_V_data_11_V_TDATA_int = tmp_data_11_V_fu_2418_p3;

assign res_V_data_11_V_TVALID = regslice_both_res_V_data_11_V_U_vld_out;

assign res_V_data_12_V_TDATA_int = tmp_data_12_V_fu_2433_p3;

assign res_V_data_12_V_TVALID = regslice_both_res_V_data_12_V_U_vld_out;

assign res_V_data_13_V_TDATA_int = tmp_data_13_V_fu_2448_p3;

assign res_V_data_13_V_TVALID = regslice_both_res_V_data_13_V_U_vld_out;

assign res_V_data_14_V_TDATA_int = tmp_data_14_V_fu_2463_p3;

assign res_V_data_14_V_TVALID = regslice_both_res_V_data_14_V_U_vld_out;

assign res_V_data_15_V_TDATA_int = tmp_data_15_V_fu_2478_p3;

assign res_V_data_15_V_TVALID = regslice_both_res_V_data_15_V_U_vld_out;

assign res_V_data_1_V_TDATA_int = tmp_data_1_V_fu_2268_p3;

assign res_V_data_1_V_TVALID = regslice_both_res_V_data_1_V_U_vld_out;

assign res_V_data_2_V_TDATA_int = tmp_data_2_V_fu_2283_p3;

assign res_V_data_2_V_TVALID = regslice_both_res_V_data_2_V_U_vld_out;

assign res_V_data_3_V_TDATA_int = tmp_data_3_V_fu_2298_p3;

assign res_V_data_3_V_TVALID = regslice_both_res_V_data_3_V_U_vld_out;

assign res_V_data_4_V_TDATA_int = tmp_data_4_V_fu_2313_p3;

assign res_V_data_4_V_TVALID = regslice_both_res_V_data_4_V_U_vld_out;

assign res_V_data_5_V_TDATA_int = tmp_data_5_V_fu_2328_p3;

assign res_V_data_5_V_TVALID = regslice_both_res_V_data_5_V_U_vld_out;

assign res_V_data_6_V_TDATA_int = tmp_data_6_V_fu_2343_p3;

assign res_V_data_6_V_TVALID = regslice_both_res_V_data_6_V_U_vld_out;

assign res_V_data_7_V_TDATA_int = tmp_data_7_V_fu_2358_p3;

assign res_V_data_7_V_TVALID = regslice_both_res_V_data_7_V_U_vld_out;

assign res_V_data_8_V_TDATA_int = tmp_data_8_V_fu_2373_p3;

assign res_V_data_8_V_TVALID = regslice_both_res_V_data_8_V_U_vld_out;

assign res_V_data_9_V_TDATA_int = tmp_data_9_V_fu_2388_p3;

assign res_V_data_9_V_TVALID = regslice_both_res_V_data_9_V_U_vld_out;

assign select_ln340_10_fu_2291_p3 = ((select_ln777_10_fu_1796_p3[0:0] === 1'b1) ? add_ln415_10_reg_2710 : 9'd511);

assign select_ln340_11_fu_2306_p3 = ((select_ln777_11_fu_1833_p3[0:0] === 1'b1) ? add_ln415_11_reg_2726 : 9'd511);

assign select_ln340_12_fu_2321_p3 = ((select_ln777_12_fu_1870_p3[0:0] === 1'b1) ? add_ln415_12_reg_2742 : 9'd511);

assign select_ln340_13_fu_2336_p3 = ((select_ln777_13_fu_1907_p3[0:0] === 1'b1) ? add_ln415_13_reg_2758 : 9'd511);

assign select_ln340_14_fu_2351_p3 = ((select_ln777_14_fu_1944_p3[0:0] === 1'b1) ? add_ln415_14_reg_2774 : 9'd511);

assign select_ln340_15_fu_2366_p3 = ((select_ln777_15_fu_1981_p3[0:0] === 1'b1) ? add_ln415_15_reg_2790 : 9'd511);

assign select_ln340_16_fu_2381_p3 = ((select_ln777_16_fu_2018_p3[0:0] === 1'b1) ? add_ln415_16_reg_2806 : 9'd511);

assign select_ln340_17_fu_2396_p3 = ((select_ln777_17_fu_2055_p3[0:0] === 1'b1) ? add_ln415_17_reg_2822 : 9'd511);

assign select_ln340_18_fu_2411_p3 = ((select_ln777_18_fu_2092_p3[0:0] === 1'b1) ? add_ln415_18_reg_2838 : 9'd511);

assign select_ln340_19_fu_2426_p3 = ((select_ln777_19_fu_2129_p3[0:0] === 1'b1) ? add_ln415_19_reg_2854 : 9'd511);

assign select_ln340_20_fu_2441_p3 = ((select_ln777_20_fu_2166_p3[0:0] === 1'b1) ? add_ln415_20_reg_2870 : 9'd511);

assign select_ln340_21_fu_2456_p3 = ((select_ln777_21_fu_2203_p3[0:0] === 1'b1) ? add_ln415_21_reg_2886 : 9'd511);

assign select_ln340_22_fu_2471_p3 = ((select_ln777_22_fu_2240_p3[0:0] === 1'b1) ? add_ln415_22_reg_2902 : 9'd511);

assign select_ln340_8_fu_2261_p3 = ((select_ln777_8_fu_1722_p3[0:0] === 1'b1) ? add_ln415_8_reg_2678 : 9'd511);

assign select_ln340_9_fu_2276_p3 = ((select_ln777_9_fu_1759_p3[0:0] === 1'b1) ? add_ln415_9_reg_2694 : 9'd511);

assign select_ln340_fu_2246_p3 = ((select_ln777_fu_1685_p3[0:0] === 1'b1) ? add_ln415_reg_2662 : 9'd511);

assign select_ln777_10_fu_1796_p3 = ((and_ln416_10_fu_1790_p2[0:0] === 1'b1) ? icmp_ln879_10_reg_2716 : icmp_ln768_10_reg_2721);

assign select_ln777_11_fu_1833_p3 = ((and_ln416_11_fu_1827_p2[0:0] === 1'b1) ? icmp_ln879_11_reg_2732 : icmp_ln768_11_reg_2737);

assign select_ln777_12_fu_1870_p3 = ((and_ln416_12_fu_1864_p2[0:0] === 1'b1) ? icmp_ln879_12_reg_2748 : icmp_ln768_12_reg_2753);

assign select_ln777_13_fu_1907_p3 = ((and_ln416_13_fu_1901_p2[0:0] === 1'b1) ? icmp_ln879_13_reg_2764 : icmp_ln768_13_reg_2769);

assign select_ln777_14_fu_1944_p3 = ((and_ln416_14_fu_1938_p2[0:0] === 1'b1) ? icmp_ln879_14_reg_2780 : icmp_ln768_14_reg_2785);

assign select_ln777_15_fu_1981_p3 = ((and_ln416_15_fu_1975_p2[0:0] === 1'b1) ? icmp_ln879_15_reg_2796 : icmp_ln768_15_reg_2801);

assign select_ln777_16_fu_2018_p3 = ((and_ln416_16_fu_2012_p2[0:0] === 1'b1) ? icmp_ln879_16_reg_2812 : icmp_ln768_16_reg_2817);

assign select_ln777_17_fu_2055_p3 = ((and_ln416_17_fu_2049_p2[0:0] === 1'b1) ? icmp_ln879_17_reg_2828 : icmp_ln768_17_reg_2833);

assign select_ln777_18_fu_2092_p3 = ((and_ln416_18_fu_2086_p2[0:0] === 1'b1) ? icmp_ln879_18_reg_2844 : icmp_ln768_18_reg_2849);

assign select_ln777_19_fu_2129_p3 = ((and_ln416_19_fu_2123_p2[0:0] === 1'b1) ? icmp_ln879_19_reg_2860 : icmp_ln768_19_reg_2865);

assign select_ln777_20_fu_2166_p3 = ((and_ln416_20_fu_2160_p2[0:0] === 1'b1) ? icmp_ln879_20_reg_2876 : icmp_ln768_20_reg_2881);

assign select_ln777_21_fu_2203_p3 = ((and_ln416_21_fu_2197_p2[0:0] === 1'b1) ? icmp_ln879_21_reg_2892 : icmp_ln768_21_reg_2897);

assign select_ln777_22_fu_2240_p3 = ((and_ln416_22_fu_2234_p2[0:0] === 1'b1) ? icmp_ln879_22_reg_2908 : icmp_ln768_22_reg_2913);

assign select_ln777_8_fu_1722_p3 = ((and_ln416_8_fu_1716_p2[0:0] === 1'b1) ? icmp_ln879_8_reg_2684 : icmp_ln768_8_reg_2689);

assign select_ln777_9_fu_1759_p3 = ((and_ln416_9_fu_1753_p2[0:0] === 1'b1) ? icmp_ln879_9_reg_2700 : icmp_ln768_9_reg_2705);

assign select_ln777_fu_1685_p3 = ((and_ln416_fu_1679_p2[0:0] === 1'b1) ? icmp_ln879_reg_2668 : icmp_ln768_reg_2673);

assign tmp_25_fu_480_p3 = data_V_data_0_V_dout[32'd2];

assign tmp_26_fu_1659_p3 = tmp_data_V_0_reg_2566[32'd10];

assign tmp_27_fu_498_p3 = data_V_data_0_V_dout[32'd1];

assign tmp_28_fu_1666_p3 = add_ln415_reg_2662[32'd8];

assign tmp_29_fu_554_p3 = data_V_data_1_V_dout[32'd2];

assign tmp_30_fu_1696_p3 = tmp_data_V_1_reg_2572[32'd10];

assign tmp_31_fu_572_p3 = data_V_data_1_V_dout[32'd1];

assign tmp_32_fu_1703_p3 = add_ln415_8_reg_2678[32'd8];

assign tmp_33_fu_628_p3 = data_V_data_2_V_dout[32'd2];

assign tmp_34_fu_1733_p3 = tmp_data_V_2_reg_2578[32'd10];

assign tmp_35_fu_646_p3 = data_V_data_2_V_dout[32'd1];

assign tmp_36_fu_1740_p3 = add_ln415_9_reg_2694[32'd8];

assign tmp_37_fu_702_p3 = data_V_data_3_V_dout[32'd2];

assign tmp_38_fu_1770_p3 = tmp_data_V_3_reg_2584[32'd10];

assign tmp_39_fu_720_p3 = data_V_data_3_V_dout[32'd1];

assign tmp_40_fu_1777_p3 = add_ln415_10_reg_2710[32'd8];

assign tmp_41_fu_776_p3 = data_V_data_4_V_dout[32'd2];

assign tmp_42_fu_1807_p3 = tmp_data_V_4_reg_2590[32'd10];

assign tmp_43_fu_794_p3 = data_V_data_4_V_dout[32'd1];

assign tmp_44_fu_1814_p3 = add_ln415_11_reg_2726[32'd8];

assign tmp_45_fu_850_p3 = data_V_data_5_V_dout[32'd2];

assign tmp_46_fu_1844_p3 = tmp_data_V_526_reg_2596[32'd10];

assign tmp_47_fu_868_p3 = data_V_data_5_V_dout[32'd1];

assign tmp_48_fu_1851_p3 = add_ln415_12_reg_2742[32'd8];

assign tmp_49_fu_924_p3 = data_V_data_6_V_dout[32'd2];

assign tmp_50_fu_1881_p3 = tmp_data_V_6_reg_2602[32'd10];

assign tmp_51_fu_942_p3 = data_V_data_6_V_dout[32'd1];

assign tmp_52_fu_1888_p3 = add_ln415_13_reg_2758[32'd8];

assign tmp_53_fu_998_p3 = data_V_data_7_V_dout[32'd2];

assign tmp_54_fu_1918_p3 = tmp_data_V_7_reg_2608[32'd10];

assign tmp_55_fu_1016_p3 = data_V_data_7_V_dout[32'd1];

assign tmp_56_fu_1925_p3 = add_ln415_14_reg_2774[32'd8];

assign tmp_57_fu_1072_p3 = data_V_data_8_V_dout[32'd2];

assign tmp_58_fu_1955_p3 = tmp_data_V_8_reg_2614[32'd10];

assign tmp_59_fu_1090_p3 = data_V_data_8_V_dout[32'd1];

assign tmp_60_fu_1962_p3 = add_ln415_15_reg_2790[32'd8];

assign tmp_61_fu_1146_p3 = data_V_data_9_V_dout[32'd2];

assign tmp_62_fu_1992_p3 = tmp_data_V_9_reg_2620[32'd10];

assign tmp_63_fu_1164_p3 = data_V_data_9_V_dout[32'd1];

assign tmp_64_fu_1999_p3 = add_ln415_16_reg_2806[32'd8];

assign tmp_65_fu_1220_p3 = data_V_data_10_V_dout[32'd2];

assign tmp_66_fu_2029_p3 = tmp_data_V_10_reg_2626[32'd10];

assign tmp_67_fu_1238_p3 = data_V_data_10_V_dout[32'd1];

assign tmp_68_fu_2036_p3 = add_ln415_17_reg_2822[32'd8];

assign tmp_69_fu_1294_p3 = data_V_data_11_V_dout[32'd2];

assign tmp_70_fu_2066_p3 = tmp_data_V_11_reg_2632[32'd10];

assign tmp_71_fu_1312_p3 = data_V_data_11_V_dout[32'd1];

assign tmp_72_fu_2073_p3 = add_ln415_18_reg_2838[32'd8];

assign tmp_73_fu_1368_p3 = data_V_data_12_V_dout[32'd2];

assign tmp_74_fu_2103_p3 = tmp_data_V_12_reg_2638[32'd10];

assign tmp_75_fu_1386_p3 = data_V_data_12_V_dout[32'd1];

assign tmp_76_fu_2110_p3 = add_ln415_19_reg_2854[32'd8];

assign tmp_77_fu_1442_p3 = data_V_data_13_V_dout[32'd2];

assign tmp_78_fu_2140_p3 = tmp_data_V_13_reg_2644[32'd10];

assign tmp_79_fu_1460_p3 = data_V_data_13_V_dout[32'd1];

assign tmp_80_fu_2147_p3 = add_ln415_20_reg_2870[32'd8];

assign tmp_81_fu_1516_p3 = data_V_data_14_V_dout[32'd2];

assign tmp_82_fu_2177_p3 = tmp_data_V_14_reg_2650[32'd10];

assign tmp_83_fu_1534_p3 = data_V_data_14_V_dout[32'd1];

assign tmp_84_fu_2184_p3 = add_ln415_21_reg_2886[32'd8];

assign tmp_85_fu_1590_p3 = data_V_data_15_V_dout[32'd2];

assign tmp_86_fu_2214_p3 = tmp_data_V_15_reg_2656[32'd10];

assign tmp_87_fu_1608_p3 = data_V_data_15_V_dout[32'd1];

assign tmp_88_fu_2221_p3 = add_ln415_22_reg_2902[32'd8];

assign tmp_data_0_V_fu_2253_p3 = ((icmp_ln1494_fu_1654_p2[0:0] === 1'b1) ? select_ln340_fu_2246_p3 : 9'd0);

assign tmp_data_10_V_fu_2403_p3 = ((icmp_ln1494_10_fu_2024_p2[0:0] === 1'b1) ? select_ln340_17_fu_2396_p3 : 9'd0);

assign tmp_data_11_V_fu_2418_p3 = ((icmp_ln1494_11_fu_2061_p2[0:0] === 1'b1) ? select_ln340_18_fu_2411_p3 : 9'd0);

assign tmp_data_12_V_fu_2433_p3 = ((icmp_ln1494_12_fu_2098_p2[0:0] === 1'b1) ? select_ln340_19_fu_2426_p3 : 9'd0);

assign tmp_data_13_V_fu_2448_p3 = ((icmp_ln1494_13_fu_2135_p2[0:0] === 1'b1) ? select_ln340_20_fu_2441_p3 : 9'd0);

assign tmp_data_14_V_fu_2463_p3 = ((icmp_ln1494_14_fu_2172_p2[0:0] === 1'b1) ? select_ln340_21_fu_2456_p3 : 9'd0);

assign tmp_data_15_V_fu_2478_p3 = ((icmp_ln1494_15_fu_2209_p2[0:0] === 1'b1) ? select_ln340_22_fu_2471_p3 : 9'd0);

assign tmp_data_1_V_fu_2268_p3 = ((icmp_ln1494_1_fu_1691_p2[0:0] === 1'b1) ? select_ln340_8_fu_2261_p3 : 9'd0);

assign tmp_data_2_V_fu_2283_p3 = ((icmp_ln1494_2_fu_1728_p2[0:0] === 1'b1) ? select_ln340_9_fu_2276_p3 : 9'd0);

assign tmp_data_3_V_fu_2298_p3 = ((icmp_ln1494_3_fu_1765_p2[0:0] === 1'b1) ? select_ln340_10_fu_2291_p3 : 9'd0);

assign tmp_data_4_V_fu_2313_p3 = ((icmp_ln1494_4_fu_1802_p2[0:0] === 1'b1) ? select_ln340_11_fu_2306_p3 : 9'd0);

assign tmp_data_5_V_fu_2328_p3 = ((icmp_ln1494_5_fu_1839_p2[0:0] === 1'b1) ? select_ln340_12_fu_2321_p3 : 9'd0);

assign tmp_data_6_V_fu_2343_p3 = ((icmp_ln1494_6_fu_1876_p2[0:0] === 1'b1) ? select_ln340_13_fu_2336_p3 : 9'd0);

assign tmp_data_7_V_fu_2358_p3 = ((icmp_ln1494_7_fu_1913_p2[0:0] === 1'b1) ? select_ln340_14_fu_2351_p3 : 9'd0);

assign tmp_data_8_V_fu_2373_p3 = ((icmp_ln1494_8_fu_1950_p2[0:0] === 1'b1) ? select_ln340_15_fu_2366_p3 : 9'd0);

assign tmp_data_9_V_fu_2388_p3 = ((icmp_ln1494_9_fu_1987_p2[0:0] === 1'b1) ? select_ln340_16_fu_2381_p3 : 9'd0);

assign trunc_ln708_10_fu_1284_p4 = {{data_V_data_11_V_dout[10:2]}};

assign trunc_ln708_11_fu_1358_p4 = {{data_V_data_12_V_dout[10:2]}};

assign trunc_ln708_12_fu_1432_p4 = {{data_V_data_13_V_dout[10:2]}};

assign trunc_ln708_13_fu_1506_p4 = {{data_V_data_14_V_dout[10:2]}};

assign trunc_ln708_14_fu_1580_p4 = {{data_V_data_15_V_dout[10:2]}};

assign trunc_ln708_1_fu_766_p4 = {{data_V_data_4_V_dout[10:2]}};

assign trunc_ln708_2_fu_840_p4 = {{data_V_data_5_V_dout[10:2]}};

assign trunc_ln708_3_fu_914_p4 = {{data_V_data_6_V_dout[10:2]}};

assign trunc_ln708_4_fu_988_p4 = {{data_V_data_7_V_dout[10:2]}};

assign trunc_ln708_5_fu_1062_p4 = {{data_V_data_8_V_dout[10:2]}};

assign trunc_ln708_6_fu_1136_p4 = {{data_V_data_9_V_dout[10:2]}};

assign trunc_ln708_7_fu_1210_p4 = {{data_V_data_10_V_dout[10:2]}};

assign trunc_ln708_8_fu_544_p4 = {{data_V_data_1_V_dout[10:2]}};

assign trunc_ln708_9_fu_618_p4 = {{data_V_data_2_V_dout[10:2]}};

assign trunc_ln708_s_fu_692_p4 = {{data_V_data_3_V_dout[10:2]}};

assign trunc_ln718_10_fu_1228_p1 = data_V_data_10_V_dout[0:0];

assign trunc_ln718_11_fu_1302_p1 = data_V_data_11_V_dout[0:0];

assign trunc_ln718_12_fu_1376_p1 = data_V_data_12_V_dout[0:0];

assign trunc_ln718_13_fu_1450_p1 = data_V_data_13_V_dout[0:0];

assign trunc_ln718_14_fu_1524_p1 = data_V_data_14_V_dout[0:0];

assign trunc_ln718_15_fu_1598_p1 = data_V_data_15_V_dout[0:0];

assign trunc_ln718_1_fu_562_p1 = data_V_data_1_V_dout[0:0];

assign trunc_ln718_2_fu_636_p1 = data_V_data_2_V_dout[0:0];

assign trunc_ln718_3_fu_710_p1 = data_V_data_3_V_dout[0:0];

assign trunc_ln718_4_fu_784_p1 = data_V_data_4_V_dout[0:0];

assign trunc_ln718_5_fu_858_p1 = data_V_data_5_V_dout[0:0];

assign trunc_ln718_6_fu_932_p1 = data_V_data_6_V_dout[0:0];

assign trunc_ln718_7_fu_1006_p1 = data_V_data_7_V_dout[0:0];

assign trunc_ln718_8_fu_1080_p1 = data_V_data_8_V_dout[0:0];

assign trunc_ln718_9_fu_1154_p1 = data_V_data_9_V_dout[0:0];

assign trunc_ln718_fu_488_p1 = data_V_data_0_V_dout[0:0];

assign trunc_ln_fu_470_p4 = {{data_V_data_0_V_dout[10:2]}};

assign xor_ln416_10_fu_1784_p2 = (tmp_40_fu_1777_p3 ^ 1'd1);

assign xor_ln416_11_fu_1821_p2 = (tmp_44_fu_1814_p3 ^ 1'd1);

assign xor_ln416_12_fu_1858_p2 = (tmp_48_fu_1851_p3 ^ 1'd1);

assign xor_ln416_13_fu_1895_p2 = (tmp_52_fu_1888_p3 ^ 1'd1);

assign xor_ln416_14_fu_1932_p2 = (tmp_56_fu_1925_p3 ^ 1'd1);

assign xor_ln416_15_fu_1969_p2 = (tmp_60_fu_1962_p3 ^ 1'd1);

assign xor_ln416_16_fu_2006_p2 = (tmp_64_fu_1999_p3 ^ 1'd1);

assign xor_ln416_17_fu_2043_p2 = (tmp_68_fu_2036_p3 ^ 1'd1);

assign xor_ln416_18_fu_2080_p2 = (tmp_72_fu_2073_p3 ^ 1'd1);

assign xor_ln416_19_fu_2117_p2 = (tmp_76_fu_2110_p3 ^ 1'd1);

assign xor_ln416_20_fu_2154_p2 = (tmp_80_fu_2147_p3 ^ 1'd1);

assign xor_ln416_21_fu_2191_p2 = (tmp_84_fu_2184_p3 ^ 1'd1);

assign xor_ln416_22_fu_2228_p2 = (tmp_88_fu_2221_p3 ^ 1'd1);

assign xor_ln416_8_fu_1710_p2 = (tmp_32_fu_1703_p3 ^ 1'd1);

assign xor_ln416_9_fu_1747_p2 = (tmp_36_fu_1740_p3 ^ 1'd1);

assign xor_ln416_fu_1673_p2 = (tmp_28_fu_1666_p3 ^ 1'd1);

assign zext_ln415_10_fu_734_p1 = and_ln415_3_fu_728_p2;

assign zext_ln415_11_fu_808_p1 = and_ln415_4_fu_802_p2;

assign zext_ln415_12_fu_882_p1 = and_ln415_5_fu_876_p2;

assign zext_ln415_13_fu_956_p1 = and_ln415_6_fu_950_p2;

assign zext_ln415_14_fu_1030_p1 = and_ln415_7_fu_1024_p2;

assign zext_ln415_15_fu_1104_p1 = and_ln415_8_fu_1098_p2;

assign zext_ln415_16_fu_1178_p1 = and_ln415_9_fu_1172_p2;

assign zext_ln415_17_fu_1252_p1 = and_ln415_10_fu_1246_p2;

assign zext_ln415_18_fu_1326_p1 = and_ln415_11_fu_1320_p2;

assign zext_ln415_19_fu_1400_p1 = and_ln415_12_fu_1394_p2;

assign zext_ln415_20_fu_1474_p1 = and_ln415_13_fu_1468_p2;

assign zext_ln415_21_fu_1548_p1 = and_ln415_14_fu_1542_p2;

assign zext_ln415_22_fu_1622_p1 = and_ln415_15_fu_1616_p2;

assign zext_ln415_8_fu_586_p1 = and_ln415_1_fu_580_p2;

assign zext_ln415_9_fu_660_p1 = and_ln415_2_fu_654_p2;

assign zext_ln415_fu_512_p1 = and_ln415_fu_506_p2;

endmodule //relu_array_ap_fixed_16u_array_ap_ufixed_9_1_4_0_0_16u_relu_config9_s
