// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_16u_config7_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_stream_V_data_0_V_dout,
        data_stream_V_data_0_V_empty_n,
        data_stream_V_data_0_V_read,
        data_stream_V_data_1_V_dout,
        data_stream_V_data_1_V_empty_n,
        data_stream_V_data_1_V_read,
        data_stream_V_data_2_V_dout,
        data_stream_V_data_2_V_empty_n,
        data_stream_V_data_2_V_read,
        data_stream_V_data_3_V_dout,
        data_stream_V_data_3_V_empty_n,
        data_stream_V_data_3_V_read,
        data_stream_V_data_4_V_dout,
        data_stream_V_data_4_V_empty_n,
        data_stream_V_data_4_V_read,
        data_stream_V_data_5_V_dout,
        data_stream_V_data_5_V_empty_n,
        data_stream_V_data_5_V_read,
        data_stream_V_data_6_V_dout,
        data_stream_V_data_6_V_empty_n,
        data_stream_V_data_6_V_read,
        data_stream_V_data_7_V_dout,
        data_stream_V_data_7_V_empty_n,
        data_stream_V_data_7_V_read,
        res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n,
        res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n,
        res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n,
        res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n,
        res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n,
        res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n,
        res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n,
        res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n,
        res_stream_V_data_7_V_write,
        res_stream_V_data_8_V_din,
        res_stream_V_data_8_V_full_n,
        res_stream_V_data_8_V_write,
        res_stream_V_data_9_V_din,
        res_stream_V_data_9_V_full_n,
        res_stream_V_data_9_V_write,
        res_stream_V_data_10_V_din,
        res_stream_V_data_10_V_full_n,
        res_stream_V_data_10_V_write,
        res_stream_V_data_11_V_din,
        res_stream_V_data_11_V_full_n,
        res_stream_V_data_11_V_write,
        res_stream_V_data_12_V_din,
        res_stream_V_data_12_V_full_n,
        res_stream_V_data_12_V_write,
        res_stream_V_data_13_V_din,
        res_stream_V_data_13_V_full_n,
        res_stream_V_data_13_V_write,
        res_stream_V_data_14_V_din,
        res_stream_V_data_14_V_full_n,
        res_stream_V_data_14_V_write,
        res_stream_V_data_15_V_din,
        res_stream_V_data_15_V_full_n,
        res_stream_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [11:0] data_stream_V_data_0_V_dout;
input   data_stream_V_data_0_V_empty_n;
output   data_stream_V_data_0_V_read;
input  [11:0] data_stream_V_data_1_V_dout;
input   data_stream_V_data_1_V_empty_n;
output   data_stream_V_data_1_V_read;
input  [11:0] data_stream_V_data_2_V_dout;
input   data_stream_V_data_2_V_empty_n;
output   data_stream_V_data_2_V_read;
input  [11:0] data_stream_V_data_3_V_dout;
input   data_stream_V_data_3_V_empty_n;
output   data_stream_V_data_3_V_read;
input  [11:0] data_stream_V_data_4_V_dout;
input   data_stream_V_data_4_V_empty_n;
output   data_stream_V_data_4_V_read;
input  [11:0] data_stream_V_data_5_V_dout;
input   data_stream_V_data_5_V_empty_n;
output   data_stream_V_data_5_V_read;
input  [11:0] data_stream_V_data_6_V_dout;
input   data_stream_V_data_6_V_empty_n;
output   data_stream_V_data_6_V_read;
input  [11:0] data_stream_V_data_7_V_dout;
input   data_stream_V_data_7_V_empty_n;
output   data_stream_V_data_7_V_read;
output  [15:0] res_stream_V_data_0_V_din;
input   res_stream_V_data_0_V_full_n;
output   res_stream_V_data_0_V_write;
output  [15:0] res_stream_V_data_1_V_din;
input   res_stream_V_data_1_V_full_n;
output   res_stream_V_data_1_V_write;
output  [15:0] res_stream_V_data_2_V_din;
input   res_stream_V_data_2_V_full_n;
output   res_stream_V_data_2_V_write;
output  [15:0] res_stream_V_data_3_V_din;
input   res_stream_V_data_3_V_full_n;
output   res_stream_V_data_3_V_write;
output  [15:0] res_stream_V_data_4_V_din;
input   res_stream_V_data_4_V_full_n;
output   res_stream_V_data_4_V_write;
output  [15:0] res_stream_V_data_5_V_din;
input   res_stream_V_data_5_V_full_n;
output   res_stream_V_data_5_V_write;
output  [15:0] res_stream_V_data_6_V_din;
input   res_stream_V_data_6_V_full_n;
output   res_stream_V_data_6_V_write;
output  [15:0] res_stream_V_data_7_V_din;
input   res_stream_V_data_7_V_full_n;
output   res_stream_V_data_7_V_write;
output  [15:0] res_stream_V_data_8_V_din;
input   res_stream_V_data_8_V_full_n;
output   res_stream_V_data_8_V_write;
output  [15:0] res_stream_V_data_9_V_din;
input   res_stream_V_data_9_V_full_n;
output   res_stream_V_data_9_V_write;
output  [15:0] res_stream_V_data_10_V_din;
input   res_stream_V_data_10_V_full_n;
output   res_stream_V_data_10_V_write;
output  [15:0] res_stream_V_data_11_V_din;
input   res_stream_V_data_11_V_full_n;
output   res_stream_V_data_11_V_write;
output  [15:0] res_stream_V_data_12_V_din;
input   res_stream_V_data_12_V_full_n;
output   res_stream_V_data_12_V_write;
output  [15:0] res_stream_V_data_13_V_din;
input   res_stream_V_data_13_V_full_n;
output   res_stream_V_data_13_V_write;
output  [15:0] res_stream_V_data_14_V_din;
input   res_stream_V_data_14_V_full_n;
output   res_stream_V_data_14_V_write;
output  [15:0] res_stream_V_data_15_V_din;
input   res_stream_V_data_15_V_full_n;
output   res_stream_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_stream_V_data_0_V_read;
reg data_stream_V_data_1_V_read;
reg data_stream_V_data_2_V_read;
reg data_stream_V_data_3_V_read;
reg data_stream_V_data_4_V_read;
reg data_stream_V_data_5_V_read;
reg data_stream_V_data_6_V_read;
reg data_stream_V_data_7_V_read;
reg res_stream_V_data_0_V_write;
reg res_stream_V_data_1_V_write;
reg res_stream_V_data_2_V_write;
reg res_stream_V_data_3_V_write;
reg res_stream_V_data_4_V_write;
reg res_stream_V_data_5_V_write;
reg res_stream_V_data_6_V_write;
reg res_stream_V_data_7_V_write;
reg res_stream_V_data_8_V_write;
reg res_stream_V_data_9_V_write;
reg res_stream_V_data_10_V_write;
reg res_stream_V_data_11_V_write;
reg res_stream_V_data_12_V_write;
reg res_stream_V_data_13_V_write;
reg res_stream_V_data_14_V_write;
reg res_stream_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    data_stream_V_data_1_V_blk_n;
reg    data_stream_V_data_2_V_blk_n;
reg    data_stream_V_data_3_V_blk_n;
reg    data_stream_V_data_4_V_blk_n;
reg    data_stream_V_data_5_V_blk_n;
reg    data_stream_V_data_6_V_blk_n;
reg    data_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_state6;
reg    res_stream_V_data_1_V_blk_n;
reg    res_stream_V_data_2_V_blk_n;
reg    res_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_4_V_blk_n;
reg    res_stream_V_data_5_V_blk_n;
reg    res_stream_V_data_6_V_blk_n;
reg    res_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_8_V_blk_n;
reg    res_stream_V_data_9_V_blk_n;
reg    res_stream_V_data_10_V_blk_n;
reg    res_stream_V_data_11_V_blk_n;
reg    res_stream_V_data_12_V_blk_n;
reg    res_stream_V_data_13_V_blk_n;
reg    res_stream_V_data_14_V_blk_n;
reg    res_stream_V_data_15_V_blk_n;
reg   [4:0] i_in_0_reg_996;
wire   [0:0] icmp_ln36_fu_1139_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op298;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] i_in_fu_1145_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] trunc_ln356_fu_1151_p1;
reg   [3:0] trunc_ln356_reg_3180;
wire    ap_CS_fsm_state4;
reg   [15:0] tmp_data_0_V_reg_3824;
wire    ap_CS_fsm_state5;
wire    grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_ready;
wire    grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_done;
reg   [15:0] tmp_data_1_V_reg_3829;
reg   [15:0] tmp_data_2_V_reg_3834;
reg   [15:0] tmp_data_3_V_reg_3839;
reg   [15:0] tmp_data_4_V_reg_3844;
reg   [15:0] tmp_data_5_V_reg_3849;
reg   [15:0] tmp_data_6_V_reg_3854;
reg   [15:0] tmp_data_7_V_reg_3859;
reg   [15:0] tmp_data_8_V_reg_3864;
reg   [15:0] tmp_data_9_V_reg_3869;
reg   [15:0] tmp_data_10_V_reg_3874;
reg   [15:0] tmp_data_11_V_reg_3879;
reg   [15:0] tmp_data_12_V_reg_3884;
reg   [15:0] tmp_data_13_V_reg_3889;
reg   [15:0] tmp_data_14_V_reg_3894;
reg   [15:0] tmp_data_15_V_reg_3899;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_start;
wire    grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_idle;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_0;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_1;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_2;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_3;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_4;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_5;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_6;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_7;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_8;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_9;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_10;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_11;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_12;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_13;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_14;
wire   [15:0] grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_15;
reg    grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_start_reg;
reg   [11:0] data_120_V_fu_412;
reg   [11:0] data_121_V_fu_416;
reg   [11:0] data_122_V_fu_420;
reg   [11:0] data_123_V_fu_424;
reg   [11:0] data_124_V_fu_428;
reg   [11:0] data_125_V_fu_432;
reg   [11:0] data_126_V_fu_436;
reg   [11:0] data_127_V_fu_440;
reg   [11:0] data_120_V_1_fu_444;
reg   [11:0] data_121_V_1_fu_448;
reg   [11:0] data_122_V_1_fu_452;
reg   [11:0] data_123_V_1_fu_456;
reg   [11:0] data_124_V_1_fu_460;
reg   [11:0] data_125_V_1_fu_464;
reg   [11:0] data_126_V_1_fu_468;
reg   [11:0] data_127_V_1_fu_472;
reg   [11:0] data_120_V_2_fu_476;
reg   [11:0] data_121_V_2_fu_480;
reg   [11:0] data_122_V_2_fu_484;
reg   [11:0] data_123_V_2_fu_488;
reg   [11:0] data_124_V_2_fu_492;
reg   [11:0] data_125_V_2_fu_496;
reg   [11:0] data_126_V_2_fu_500;
reg   [11:0] data_127_V_2_fu_504;
reg   [11:0] data_120_V_3_fu_508;
reg   [11:0] data_121_V_3_fu_512;
reg   [11:0] data_122_V_3_fu_516;
reg   [11:0] data_123_V_3_fu_520;
reg   [11:0] data_124_V_3_fu_524;
reg   [11:0] data_125_V_3_fu_528;
reg   [11:0] data_126_V_3_fu_532;
reg   [11:0] data_127_V_3_fu_536;
reg   [11:0] data_120_V_4_fu_540;
reg   [11:0] data_121_V_4_fu_544;
reg   [11:0] data_122_V_4_fu_548;
reg   [11:0] data_123_V_4_fu_552;
reg   [11:0] data_124_V_4_fu_556;
reg   [11:0] data_125_V_4_fu_560;
reg   [11:0] data_126_V_4_fu_564;
reg   [11:0] data_127_V_4_fu_568;
reg   [11:0] data_120_V_5_fu_572;
reg   [11:0] data_121_V_5_fu_576;
reg   [11:0] data_122_V_5_fu_580;
reg   [11:0] data_123_V_5_fu_584;
reg   [11:0] data_124_V_5_fu_588;
reg   [11:0] data_125_V_5_fu_592;
reg   [11:0] data_126_V_5_fu_596;
reg   [11:0] data_127_V_5_fu_600;
reg   [11:0] data_120_V_6_fu_604;
reg   [11:0] data_121_V_6_fu_608;
reg   [11:0] data_122_V_6_fu_612;
reg   [11:0] data_123_V_6_fu_616;
reg   [11:0] data_124_V_6_fu_620;
reg   [11:0] data_125_V_6_fu_624;
reg   [11:0] data_126_V_6_fu_628;
reg   [11:0] data_127_V_6_fu_632;
reg   [11:0] data_120_V_7_fu_636;
reg   [11:0] data_121_V_7_fu_640;
reg   [11:0] data_122_V_7_fu_644;
reg   [11:0] data_123_V_7_fu_648;
reg   [11:0] data_124_V_7_fu_652;
reg   [11:0] data_125_V_7_fu_656;
reg   [11:0] data_126_V_7_fu_660;
reg   [11:0] data_127_V_7_fu_664;
reg   [11:0] data_120_V_8_fu_668;
reg   [11:0] data_121_V_8_fu_672;
reg   [11:0] data_122_V_8_fu_676;
reg   [11:0] data_123_V_8_fu_680;
reg   [11:0] data_124_V_8_fu_684;
reg   [11:0] data_125_V_8_fu_688;
reg   [11:0] data_126_V_8_fu_692;
reg   [11:0] data_127_V_8_fu_696;
reg   [11:0] data_120_V_9_fu_700;
reg   [11:0] data_121_V_9_fu_704;
reg   [11:0] data_122_V_9_fu_708;
reg   [11:0] data_123_V_9_fu_712;
reg   [11:0] data_124_V_9_fu_716;
reg   [11:0] data_125_V_9_fu_720;
reg   [11:0] data_126_V_9_fu_724;
reg   [11:0] data_127_V_9_fu_728;
reg   [11:0] data_120_V_10_fu_732;
reg   [11:0] data_121_V_10_fu_736;
reg   [11:0] data_122_V_10_fu_740;
reg   [11:0] data_123_V_10_fu_744;
reg   [11:0] data_124_V_10_fu_748;
reg   [11:0] data_125_V_10_fu_752;
reg   [11:0] data_126_V_10_fu_756;
reg   [11:0] data_127_V_10_fu_760;
reg   [11:0] data_120_V_11_fu_764;
reg   [11:0] data_121_V_11_fu_768;
reg   [11:0] data_122_V_11_fu_772;
reg   [11:0] data_123_V_11_fu_776;
reg   [11:0] data_124_V_11_fu_780;
reg   [11:0] data_125_V_11_fu_784;
reg   [11:0] data_126_V_11_fu_788;
reg   [11:0] data_127_V_11_fu_792;
reg   [11:0] data_120_V_12_fu_796;
reg   [11:0] data_121_V_12_fu_800;
reg   [11:0] data_122_V_12_fu_804;
reg   [11:0] data_123_V_12_fu_808;
reg   [11:0] data_124_V_12_fu_812;
reg   [11:0] data_125_V_12_fu_816;
reg   [11:0] data_126_V_12_fu_820;
reg   [11:0] data_127_V_12_fu_824;
reg   [11:0] data_120_V_13_fu_828;
reg   [11:0] data_121_V_13_fu_832;
reg   [11:0] data_122_V_13_fu_836;
reg   [11:0] data_123_V_13_fu_840;
reg   [11:0] data_124_V_13_fu_844;
reg   [11:0] data_125_V_13_fu_848;
reg   [11:0] data_126_V_13_fu_852;
reg   [11:0] data_127_V_13_fu_856;
reg   [11:0] data_120_V_14_fu_860;
reg   [11:0] data_121_V_14_fu_864;
reg   [11:0] data_122_V_14_fu_868;
reg   [11:0] data_123_V_14_fu_872;
reg   [11:0] data_124_V_14_fu_876;
reg   [11:0] data_125_V_14_fu_880;
reg   [11:0] data_126_V_14_fu_884;
reg   [11:0] data_127_V_14_fu_888;
reg   [11:0] data_120_V_15_fu_892;
reg   [11:0] data_121_V_15_fu_896;
reg   [11:0] data_122_V_15_fu_900;
reg   [11:0] data_123_V_15_fu_904;
reg   [11:0] data_124_V_15_fu_908;
reg   [11:0] data_125_V_15_fu_912;
reg   [11:0] data_126_V_15_fu_916;
reg   [11:0] data_127_V_15_fu_920;
wire    io_acc_block_signal_op591;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_start_reg = 1'b0;
end

dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_start),
    .ap_done(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_done),
    .ap_idle(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_idle),
    .ap_ready(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_ready),
    .data_0_V_read(data_120_V_fu_412),
    .data_1_V_read(data_121_V_fu_416),
    .data_2_V_read(data_122_V_fu_420),
    .data_3_V_read(data_123_V_fu_424),
    .data_4_V_read(data_124_V_fu_428),
    .data_5_V_read(data_125_V_fu_432),
    .data_6_V_read(data_126_V_fu_436),
    .data_7_V_read(data_127_V_fu_440),
    .data_8_V_read(data_120_V_1_fu_444),
    .data_9_V_read(data_121_V_1_fu_448),
    .data_10_V_read(data_122_V_1_fu_452),
    .data_11_V_read(data_123_V_1_fu_456),
    .data_12_V_read(data_124_V_1_fu_460),
    .data_13_V_read(data_125_V_1_fu_464),
    .data_14_V_read(data_126_V_1_fu_468),
    .data_15_V_read(data_127_V_1_fu_472),
    .data_16_V_read(data_120_V_2_fu_476),
    .data_17_V_read(data_121_V_2_fu_480),
    .data_18_V_read(data_122_V_2_fu_484),
    .data_19_V_read(data_123_V_2_fu_488),
    .data_20_V_read(data_124_V_2_fu_492),
    .data_21_V_read(data_125_V_2_fu_496),
    .data_22_V_read(data_126_V_2_fu_500),
    .data_23_V_read(data_127_V_2_fu_504),
    .data_24_V_read(data_120_V_3_fu_508),
    .data_25_V_read(data_121_V_3_fu_512),
    .data_26_V_read(data_122_V_3_fu_516),
    .data_27_V_read(data_123_V_3_fu_520),
    .data_28_V_read(data_124_V_3_fu_524),
    .data_29_V_read(data_125_V_3_fu_528),
    .data_30_V_read(data_126_V_3_fu_532),
    .data_31_V_read(data_127_V_3_fu_536),
    .data_32_V_read(data_120_V_4_fu_540),
    .data_33_V_read(data_121_V_4_fu_544),
    .data_34_V_read(data_122_V_4_fu_548),
    .data_35_V_read(data_123_V_4_fu_552),
    .data_36_V_read(data_124_V_4_fu_556),
    .data_37_V_read(data_125_V_4_fu_560),
    .data_38_V_read(data_126_V_4_fu_564),
    .data_39_V_read(data_127_V_4_fu_568),
    .data_40_V_read(data_120_V_5_fu_572),
    .data_41_V_read(data_121_V_5_fu_576),
    .data_42_V_read(data_122_V_5_fu_580),
    .data_43_V_read(data_123_V_5_fu_584),
    .data_44_V_read(data_124_V_5_fu_588),
    .data_45_V_read(data_125_V_5_fu_592),
    .data_46_V_read(data_126_V_5_fu_596),
    .data_47_V_read(data_127_V_5_fu_600),
    .data_48_V_read(data_120_V_6_fu_604),
    .data_49_V_read(data_121_V_6_fu_608),
    .data_50_V_read(data_122_V_6_fu_612),
    .data_51_V_read(data_123_V_6_fu_616),
    .data_52_V_read(data_124_V_6_fu_620),
    .data_53_V_read(data_125_V_6_fu_624),
    .data_54_V_read(data_126_V_6_fu_628),
    .data_55_V_read(data_127_V_6_fu_632),
    .data_56_V_read(data_120_V_7_fu_636),
    .data_57_V_read(data_121_V_7_fu_640),
    .data_58_V_read(data_122_V_7_fu_644),
    .data_59_V_read(data_123_V_7_fu_648),
    .data_60_V_read(data_124_V_7_fu_652),
    .data_61_V_read(data_125_V_7_fu_656),
    .data_62_V_read(data_126_V_7_fu_660),
    .data_63_V_read(data_127_V_7_fu_664),
    .data_64_V_read(data_120_V_8_fu_668),
    .data_65_V_read(data_121_V_8_fu_672),
    .data_66_V_read(data_122_V_8_fu_676),
    .data_67_V_read(data_123_V_8_fu_680),
    .data_68_V_read(data_124_V_8_fu_684),
    .data_69_V_read(data_125_V_8_fu_688),
    .data_70_V_read(data_126_V_8_fu_692),
    .data_71_V_read(data_127_V_8_fu_696),
    .data_72_V_read(data_120_V_9_fu_700),
    .data_73_V_read(data_121_V_9_fu_704),
    .data_74_V_read(data_122_V_9_fu_708),
    .data_75_V_read(data_123_V_9_fu_712),
    .data_76_V_read(data_124_V_9_fu_716),
    .data_77_V_read(data_125_V_9_fu_720),
    .data_78_V_read(data_126_V_9_fu_724),
    .data_79_V_read(data_127_V_9_fu_728),
    .data_80_V_read(data_120_V_10_fu_732),
    .data_81_V_read(data_121_V_10_fu_736),
    .data_82_V_read(data_122_V_10_fu_740),
    .data_83_V_read(data_123_V_10_fu_744),
    .data_84_V_read(data_124_V_10_fu_748),
    .data_85_V_read(data_125_V_10_fu_752),
    .data_86_V_read(data_126_V_10_fu_756),
    .data_87_V_read(data_127_V_10_fu_760),
    .data_88_V_read(data_120_V_11_fu_764),
    .data_89_V_read(data_121_V_11_fu_768),
    .data_90_V_read(data_122_V_11_fu_772),
    .data_91_V_read(data_123_V_11_fu_776),
    .data_92_V_read(data_124_V_11_fu_780),
    .data_93_V_read(data_125_V_11_fu_784),
    .data_94_V_read(data_126_V_11_fu_788),
    .data_95_V_read(data_127_V_11_fu_792),
    .data_96_V_read(data_120_V_12_fu_796),
    .data_97_V_read(data_121_V_12_fu_800),
    .data_98_V_read(data_122_V_12_fu_804),
    .data_99_V_read(data_123_V_12_fu_808),
    .data_100_V_read(data_124_V_12_fu_812),
    .data_101_V_read(data_125_V_12_fu_816),
    .data_102_V_read(data_126_V_12_fu_820),
    .data_103_V_read(data_127_V_12_fu_824),
    .data_104_V_read(data_120_V_13_fu_828),
    .data_105_V_read(data_121_V_13_fu_832),
    .data_106_V_read(data_122_V_13_fu_836),
    .data_107_V_read(data_123_V_13_fu_840),
    .data_108_V_read(data_124_V_13_fu_844),
    .data_109_V_read(data_125_V_13_fu_848),
    .data_110_V_read(data_126_V_13_fu_852),
    .data_111_V_read(data_127_V_13_fu_856),
    .data_112_V_read(data_120_V_14_fu_860),
    .data_113_V_read(data_121_V_14_fu_864),
    .data_114_V_read(data_122_V_14_fu_868),
    .data_115_V_read(data_123_V_14_fu_872),
    .data_116_V_read(data_124_V_14_fu_876),
    .data_117_V_read(data_125_V_14_fu_880),
    .data_118_V_read(data_126_V_14_fu_884),
    .data_119_V_read(data_127_V_14_fu_888),
    .data_120_V_read(data_120_V_15_fu_892),
    .data_121_V_read(data_121_V_15_fu_896),
    .data_122_V_read(data_122_V_15_fu_900),
    .data_123_V_read(data_123_V_15_fu_904),
    .data_124_V_read(data_124_V_15_fu_908),
    .data_125_V_read(data_125_V_15_fu_912),
    .data_126_V_read(data_126_V_15_fu_916),
    .data_127_V_read(data_127_V_15_fu_920),
    .ap_return_0(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_0),
    .ap_return_1(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_1),
    .ap_return_2(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_2),
    .ap_return_3(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_3),
    .ap_return_4(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_4),
    .ap_return_5(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_5),
    .ap_return_6(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_6),
    .ap_return_7(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_7),
    .ap_return_8(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_8),
    .ap_return_9(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_9),
    .ap_return_10(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_10),
    .ap_return_11(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_11),
    .ap_return_12(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_12),
    .ap_return_13(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_13),
    .ap_return_14(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_14),
    .ap_return_15(grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_start_reg <= 1'b1;
        end else if ((grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_ready == 1'b1)) begin
            grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_fu_1139_p2 == 1'd0))) begin
        i_in_0_reg_996 <= i_in_fu_1145_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_996 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd10) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_10_fu_732 <= data_stream_V_data_0_V_dout;
        data_121_V_10_fu_736 <= data_stream_V_data_1_V_dout;
        data_122_V_10_fu_740 <= data_stream_V_data_2_V_dout;
        data_123_V_10_fu_744 <= data_stream_V_data_3_V_dout;
        data_124_V_10_fu_748 <= data_stream_V_data_4_V_dout;
        data_125_V_10_fu_752 <= data_stream_V_data_5_V_dout;
        data_126_V_10_fu_756 <= data_stream_V_data_6_V_dout;
        data_127_V_10_fu_760 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd11) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_11_fu_764 <= data_stream_V_data_0_V_dout;
        data_121_V_11_fu_768 <= data_stream_V_data_1_V_dout;
        data_122_V_11_fu_772 <= data_stream_V_data_2_V_dout;
        data_123_V_11_fu_776 <= data_stream_V_data_3_V_dout;
        data_124_V_11_fu_780 <= data_stream_V_data_4_V_dout;
        data_125_V_11_fu_784 <= data_stream_V_data_5_V_dout;
        data_126_V_11_fu_788 <= data_stream_V_data_6_V_dout;
        data_127_V_11_fu_792 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd12) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_12_fu_796 <= data_stream_V_data_0_V_dout;
        data_121_V_12_fu_800 <= data_stream_V_data_1_V_dout;
        data_122_V_12_fu_804 <= data_stream_V_data_2_V_dout;
        data_123_V_12_fu_808 <= data_stream_V_data_3_V_dout;
        data_124_V_12_fu_812 <= data_stream_V_data_4_V_dout;
        data_125_V_12_fu_816 <= data_stream_V_data_5_V_dout;
        data_126_V_12_fu_820 <= data_stream_V_data_6_V_dout;
        data_127_V_12_fu_824 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd13) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_13_fu_828 <= data_stream_V_data_0_V_dout;
        data_121_V_13_fu_832 <= data_stream_V_data_1_V_dout;
        data_122_V_13_fu_836 <= data_stream_V_data_2_V_dout;
        data_123_V_13_fu_840 <= data_stream_V_data_3_V_dout;
        data_124_V_13_fu_844 <= data_stream_V_data_4_V_dout;
        data_125_V_13_fu_848 <= data_stream_V_data_5_V_dout;
        data_126_V_13_fu_852 <= data_stream_V_data_6_V_dout;
        data_127_V_13_fu_856 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd14) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_14_fu_860 <= data_stream_V_data_0_V_dout;
        data_121_V_14_fu_864 <= data_stream_V_data_1_V_dout;
        data_122_V_14_fu_868 <= data_stream_V_data_2_V_dout;
        data_123_V_14_fu_872 <= data_stream_V_data_3_V_dout;
        data_124_V_14_fu_876 <= data_stream_V_data_4_V_dout;
        data_125_V_14_fu_880 <= data_stream_V_data_5_V_dout;
        data_126_V_14_fu_884 <= data_stream_V_data_6_V_dout;
        data_127_V_14_fu_888 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd15) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_15_fu_892 <= data_stream_V_data_0_V_dout;
        data_121_V_15_fu_896 <= data_stream_V_data_1_V_dout;
        data_122_V_15_fu_900 <= data_stream_V_data_2_V_dout;
        data_123_V_15_fu_904 <= data_stream_V_data_3_V_dout;
        data_124_V_15_fu_908 <= data_stream_V_data_4_V_dout;
        data_125_V_15_fu_912 <= data_stream_V_data_5_V_dout;
        data_126_V_15_fu_916 <= data_stream_V_data_6_V_dout;
        data_127_V_15_fu_920 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_1_fu_444 <= data_stream_V_data_0_V_dout;
        data_121_V_1_fu_448 <= data_stream_V_data_1_V_dout;
        data_122_V_1_fu_452 <= data_stream_V_data_2_V_dout;
        data_123_V_1_fu_456 <= data_stream_V_data_3_V_dout;
        data_124_V_1_fu_460 <= data_stream_V_data_4_V_dout;
        data_125_V_1_fu_464 <= data_stream_V_data_5_V_dout;
        data_126_V_1_fu_468 <= data_stream_V_data_6_V_dout;
        data_127_V_1_fu_472 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_2_fu_476 <= data_stream_V_data_0_V_dout;
        data_121_V_2_fu_480 <= data_stream_V_data_1_V_dout;
        data_122_V_2_fu_484 <= data_stream_V_data_2_V_dout;
        data_123_V_2_fu_488 <= data_stream_V_data_3_V_dout;
        data_124_V_2_fu_492 <= data_stream_V_data_4_V_dout;
        data_125_V_2_fu_496 <= data_stream_V_data_5_V_dout;
        data_126_V_2_fu_500 <= data_stream_V_data_6_V_dout;
        data_127_V_2_fu_504 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_3_fu_508 <= data_stream_V_data_0_V_dout;
        data_121_V_3_fu_512 <= data_stream_V_data_1_V_dout;
        data_122_V_3_fu_516 <= data_stream_V_data_2_V_dout;
        data_123_V_3_fu_520 <= data_stream_V_data_3_V_dout;
        data_124_V_3_fu_524 <= data_stream_V_data_4_V_dout;
        data_125_V_3_fu_528 <= data_stream_V_data_5_V_dout;
        data_126_V_3_fu_532 <= data_stream_V_data_6_V_dout;
        data_127_V_3_fu_536 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_4_fu_540 <= data_stream_V_data_0_V_dout;
        data_121_V_4_fu_544 <= data_stream_V_data_1_V_dout;
        data_122_V_4_fu_548 <= data_stream_V_data_2_V_dout;
        data_123_V_4_fu_552 <= data_stream_V_data_3_V_dout;
        data_124_V_4_fu_556 <= data_stream_V_data_4_V_dout;
        data_125_V_4_fu_560 <= data_stream_V_data_5_V_dout;
        data_126_V_4_fu_564 <= data_stream_V_data_6_V_dout;
        data_127_V_4_fu_568 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_5_fu_572 <= data_stream_V_data_0_V_dout;
        data_121_V_5_fu_576 <= data_stream_V_data_1_V_dout;
        data_122_V_5_fu_580 <= data_stream_V_data_2_V_dout;
        data_123_V_5_fu_584 <= data_stream_V_data_3_V_dout;
        data_124_V_5_fu_588 <= data_stream_V_data_4_V_dout;
        data_125_V_5_fu_592 <= data_stream_V_data_5_V_dout;
        data_126_V_5_fu_596 <= data_stream_V_data_6_V_dout;
        data_127_V_5_fu_600 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_6_fu_604 <= data_stream_V_data_0_V_dout;
        data_121_V_6_fu_608 <= data_stream_V_data_1_V_dout;
        data_122_V_6_fu_612 <= data_stream_V_data_2_V_dout;
        data_123_V_6_fu_616 <= data_stream_V_data_3_V_dout;
        data_124_V_6_fu_620 <= data_stream_V_data_4_V_dout;
        data_125_V_6_fu_624 <= data_stream_V_data_5_V_dout;
        data_126_V_6_fu_628 <= data_stream_V_data_6_V_dout;
        data_127_V_6_fu_632 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_7_fu_636 <= data_stream_V_data_0_V_dout;
        data_121_V_7_fu_640 <= data_stream_V_data_1_V_dout;
        data_122_V_7_fu_644 <= data_stream_V_data_2_V_dout;
        data_123_V_7_fu_648 <= data_stream_V_data_3_V_dout;
        data_124_V_7_fu_652 <= data_stream_V_data_4_V_dout;
        data_125_V_7_fu_656 <= data_stream_V_data_5_V_dout;
        data_126_V_7_fu_660 <= data_stream_V_data_6_V_dout;
        data_127_V_7_fu_664 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd8) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_8_fu_668 <= data_stream_V_data_0_V_dout;
        data_121_V_8_fu_672 <= data_stream_V_data_1_V_dout;
        data_122_V_8_fu_676 <= data_stream_V_data_2_V_dout;
        data_123_V_8_fu_680 <= data_stream_V_data_3_V_dout;
        data_124_V_8_fu_684 <= data_stream_V_data_4_V_dout;
        data_125_V_8_fu_688 <= data_stream_V_data_5_V_dout;
        data_126_V_8_fu_692 <= data_stream_V_data_6_V_dout;
        data_127_V_8_fu_696 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd9) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_9_fu_700 <= data_stream_V_data_0_V_dout;
        data_121_V_9_fu_704 <= data_stream_V_data_1_V_dout;
        data_122_V_9_fu_708 <= data_stream_V_data_2_V_dout;
        data_123_V_9_fu_712 <= data_stream_V_data_3_V_dout;
        data_124_V_9_fu_716 <= data_stream_V_data_4_V_dout;
        data_125_V_9_fu_720 <= data_stream_V_data_5_V_dout;
        data_126_V_9_fu_724 <= data_stream_V_data_6_V_dout;
        data_127_V_9_fu_728 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln356_reg_3180 == 4'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_120_V_fu_412 <= data_stream_V_data_0_V_dout;
        data_121_V_fu_416 <= data_stream_V_data_1_V_dout;
        data_122_V_fu_420 <= data_stream_V_data_2_V_dout;
        data_123_V_fu_424 <= data_stream_V_data_3_V_dout;
        data_124_V_fu_428 <= data_stream_V_data_4_V_dout;
        data_125_V_fu_432 <= data_stream_V_data_5_V_dout;
        data_126_V_fu_436 <= data_stream_V_data_6_V_dout;
        data_127_V_fu_440 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_data_0_V_reg_3824 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_0;
        tmp_data_10_V_reg_3874 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_10;
        tmp_data_11_V_reg_3879 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_11;
        tmp_data_12_V_reg_3884 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_12;
        tmp_data_13_V_reg_3889 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_13;
        tmp_data_14_V_reg_3894 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_14;
        tmp_data_15_V_reg_3899 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_15;
        tmp_data_1_V_reg_3829 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_1;
        tmp_data_2_V_reg_3834 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_2;
        tmp_data_3_V_reg_3839 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_3;
        tmp_data_4_V_reg_3844 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_4;
        tmp_data_5_V_reg_3849 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_5;
        tmp_data_6_V_reg_3854 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_6;
        tmp_data_7_V_reg_3859 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_7;
        tmp_data_8_V_reg_3864 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_8;
        tmp_data_9_V_reg_3869 <= grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_return_9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_fu_1139_p2 == 1'd0))) begin
        trunc_ln356_reg_3180 <= trunc_ln356_fu_1151_p1;
    end
end

always @ (*) begin
    if ((icmp_ln36_fu_1139_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_0_V_blk_n = data_stream_V_data_0_V_empty_n;
    end else begin
        data_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_0_V_read = 1'b1;
    end else begin
        data_stream_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_1_V_blk_n = data_stream_V_data_1_V_empty_n;
    end else begin
        data_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_1_V_read = 1'b1;
    end else begin
        data_stream_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_2_V_blk_n = data_stream_V_data_2_V_empty_n;
    end else begin
        data_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_2_V_read = 1'b1;
    end else begin
        data_stream_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_3_V_blk_n = data_stream_V_data_3_V_empty_n;
    end else begin
        data_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_3_V_read = 1'b1;
    end else begin
        data_stream_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_4_V_blk_n = data_stream_V_data_4_V_empty_n;
    end else begin
        data_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_4_V_read = 1'b1;
    end else begin
        data_stream_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_5_V_blk_n = data_stream_V_data_5_V_empty_n;
    end else begin
        data_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_5_V_read = 1'b1;
    end else begin
        data_stream_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_6_V_blk_n = data_stream_V_data_6_V_empty_n;
    end else begin
        data_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_6_V_read = 1'b1;
    end else begin
        data_stream_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_7_V_blk_n = data_stream_V_data_7_V_empty_n;
    end else begin
        data_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_7_V_read = 1'b1;
    end else begin
        data_stream_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_0_V_blk_n = res_stream_V_data_0_V_full_n;
    end else begin
        res_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_0_V_write = 1'b1;
    end else begin
        res_stream_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_10_V_blk_n = res_stream_V_data_10_V_full_n;
    end else begin
        res_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_10_V_write = 1'b1;
    end else begin
        res_stream_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_11_V_blk_n = res_stream_V_data_11_V_full_n;
    end else begin
        res_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_11_V_write = 1'b1;
    end else begin
        res_stream_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_12_V_blk_n = res_stream_V_data_12_V_full_n;
    end else begin
        res_stream_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_12_V_write = 1'b1;
    end else begin
        res_stream_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_13_V_blk_n = res_stream_V_data_13_V_full_n;
    end else begin
        res_stream_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_13_V_write = 1'b1;
    end else begin
        res_stream_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_14_V_blk_n = res_stream_V_data_14_V_full_n;
    end else begin
        res_stream_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_14_V_write = 1'b1;
    end else begin
        res_stream_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_15_V_blk_n = res_stream_V_data_15_V_full_n;
    end else begin
        res_stream_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_15_V_write = 1'b1;
    end else begin
        res_stream_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_1_V_blk_n = res_stream_V_data_1_V_full_n;
    end else begin
        res_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_1_V_write = 1'b1;
    end else begin
        res_stream_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_2_V_blk_n = res_stream_V_data_2_V_full_n;
    end else begin
        res_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_2_V_write = 1'b1;
    end else begin
        res_stream_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_3_V_blk_n = res_stream_V_data_3_V_full_n;
    end else begin
        res_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_3_V_write = 1'b1;
    end else begin
        res_stream_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_4_V_blk_n = res_stream_V_data_4_V_full_n;
    end else begin
        res_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_4_V_write = 1'b1;
    end else begin
        res_stream_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_5_V_blk_n = res_stream_V_data_5_V_full_n;
    end else begin
        res_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_5_V_write = 1'b1;
    end else begin
        res_stream_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_6_V_blk_n = res_stream_V_data_6_V_full_n;
    end else begin
        res_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_6_V_write = 1'b1;
    end else begin
        res_stream_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_7_V_blk_n = res_stream_V_data_7_V_full_n;
    end else begin
        res_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_7_V_write = 1'b1;
    end else begin
        res_stream_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_8_V_blk_n = res_stream_V_data_8_V_full_n;
    end else begin
        res_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_8_V_write = 1'b1;
    end else begin
        res_stream_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_9_V_blk_n = res_stream_V_data_9_V_full_n;
    end else begin
        res_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        res_stream_V_data_9_V_write = 1'b1;
    end else begin
        res_stream_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_1139_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_1139_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((io_acc_block_signal_op591 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((io_acc_block_signal_op298 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((io_acc_block_signal_op298 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (io_acc_block_signal_op298 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_start = grp_dense_wrapper_ap_ufixed_12_3_4_0_0_ap_fixed_16_6_5_3_0_config7_s_fu_1007_ap_start_reg;

assign i_in_fu_1145_p2 = (i_in_0_reg_996 + 5'd1);

assign icmp_ln36_fu_1139_p2 = ((i_in_0_reg_996 == 5'd16) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op298 = (data_stream_V_data_7_V_empty_n & data_stream_V_data_6_V_empty_n & data_stream_V_data_5_V_empty_n & data_stream_V_data_4_V_empty_n & data_stream_V_data_3_V_empty_n & data_stream_V_data_2_V_empty_n & data_stream_V_data_1_V_empty_n & data_stream_V_data_0_V_empty_n);

assign io_acc_block_signal_op591 = (res_stream_V_data_9_V_full_n & res_stream_V_data_8_V_full_n & res_stream_V_data_7_V_full_n & res_stream_V_data_6_V_full_n & res_stream_V_data_5_V_full_n & res_stream_V_data_4_V_full_n & res_stream_V_data_3_V_full_n & res_stream_V_data_2_V_full_n & res_stream_V_data_1_V_full_n & res_stream_V_data_15_V_full_n & res_stream_V_data_14_V_full_n & res_stream_V_data_13_V_full_n & res_stream_V_data_12_V_full_n & res_stream_V_data_11_V_full_n & res_stream_V_data_10_V_full_n & res_stream_V_data_0_V_full_n);

assign res_stream_V_data_0_V_din = tmp_data_0_V_reg_3824;

assign res_stream_V_data_10_V_din = tmp_data_10_V_reg_3874;

assign res_stream_V_data_11_V_din = tmp_data_11_V_reg_3879;

assign res_stream_V_data_12_V_din = tmp_data_12_V_reg_3884;

assign res_stream_V_data_13_V_din = tmp_data_13_V_reg_3889;

assign res_stream_V_data_14_V_din = tmp_data_14_V_reg_3894;

assign res_stream_V_data_15_V_din = tmp_data_15_V_reg_3899;

assign res_stream_V_data_1_V_din = tmp_data_1_V_reg_3829;

assign res_stream_V_data_2_V_din = tmp_data_2_V_reg_3834;

assign res_stream_V_data_3_V_din = tmp_data_3_V_reg_3839;

assign res_stream_V_data_4_V_din = tmp_data_4_V_reg_3844;

assign res_stream_V_data_5_V_din = tmp_data_5_V_reg_3849;

assign res_stream_V_data_6_V_din = tmp_data_6_V_reg_3854;

assign res_stream_V_data_7_V_din = tmp_data_7_V_reg_3859;

assign res_stream_V_data_8_V_din = tmp_data_8_V_reg_3864;

assign res_stream_V_data_9_V_din = tmp_data_9_V_reg_3869;

assign start_out = real_start;

assign trunc_ln356_fu_1151_p1 = i_in_0_reg_996[3:0];

endmodule //dense_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_16u_config7_s
