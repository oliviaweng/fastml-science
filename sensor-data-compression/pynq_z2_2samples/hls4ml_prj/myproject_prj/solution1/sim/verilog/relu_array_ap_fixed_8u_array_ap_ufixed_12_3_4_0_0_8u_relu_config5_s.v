// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_ap_fixed_8u_array_ap_ufixed_12_3_4_0_0_8u_relu_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
output  [11:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [11:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [11:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [11:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [11:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [11:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [11:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [11:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln41_reg_1291;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln41_reg_1291_pp0_iter2_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg   [4:0] i_0_reg_340;
wire   [0:0] icmp_ln41_fu_351_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op29;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    io_acc_block_signal_op177;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln41_reg_1291_pp0_iter1_reg;
wire   [4:0] i_fu_357_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_data_V_0_reg_1300;
reg   [15:0] tmp_data_V_1_reg_1306;
reg   [15:0] tmp_data_V_2_reg_1312;
reg   [15:0] tmp_data_V_3_reg_1318;
reg   [15:0] tmp_data_V_418_reg_1324;
reg   [15:0] tmp_data_V_5_reg_1330;
reg   [15:0] tmp_data_V_6_reg_1336;
reg   [15:0] tmp_data_V_7_reg_1342;
wire   [11:0] add_ln415_fu_427_p2;
reg   [11:0] add_ln415_reg_1348;
wire   [0:0] icmp_ln879_fu_443_p2;
reg   [0:0] icmp_ln879_reg_1354;
wire   [0:0] icmp_ln768_fu_449_p2;
reg   [0:0] icmp_ln768_reg_1359;
wire   [11:0] add_ln415_1_fu_487_p2;
reg   [11:0] add_ln415_1_reg_1364;
wire   [0:0] icmp_ln879_1_fu_503_p2;
reg   [0:0] icmp_ln879_1_reg_1370;
wire   [0:0] icmp_ln768_1_fu_509_p2;
reg   [0:0] icmp_ln768_1_reg_1375;
wire   [11:0] add_ln415_2_fu_547_p2;
reg   [11:0] add_ln415_2_reg_1380;
wire   [0:0] icmp_ln879_2_fu_563_p2;
reg   [0:0] icmp_ln879_2_reg_1386;
wire   [0:0] icmp_ln768_2_fu_569_p2;
reg   [0:0] icmp_ln768_2_reg_1391;
wire   [11:0] add_ln415_3_fu_607_p2;
reg   [11:0] add_ln415_3_reg_1396;
wire   [0:0] icmp_ln879_3_fu_623_p2;
reg   [0:0] icmp_ln879_3_reg_1402;
wire   [0:0] icmp_ln768_3_fu_629_p2;
reg   [0:0] icmp_ln768_3_reg_1407;
wire   [11:0] add_ln415_4_fu_667_p2;
reg   [11:0] add_ln415_4_reg_1412;
wire   [0:0] icmp_ln879_4_fu_683_p2;
reg   [0:0] icmp_ln879_4_reg_1418;
wire   [0:0] icmp_ln768_4_fu_689_p2;
reg   [0:0] icmp_ln768_4_reg_1423;
wire   [11:0] add_ln415_5_fu_727_p2;
reg   [11:0] add_ln415_5_reg_1428;
wire   [0:0] icmp_ln879_5_fu_743_p2;
reg   [0:0] icmp_ln879_5_reg_1434;
wire   [0:0] icmp_ln768_5_fu_749_p2;
reg   [0:0] icmp_ln768_5_reg_1439;
wire   [11:0] add_ln415_6_fu_787_p2;
reg   [11:0] add_ln415_6_reg_1444;
wire   [0:0] icmp_ln879_6_fu_803_p2;
reg   [0:0] icmp_ln879_6_reg_1450;
wire   [0:0] icmp_ln768_6_fu_809_p2;
reg   [0:0] icmp_ln768_6_reg_1455;
wire   [11:0] add_ln415_7_fu_847_p2;
reg   [11:0] add_ln415_7_reg_1460;
wire   [0:0] icmp_ln879_7_fu_863_p2;
reg   [0:0] icmp_ln879_7_reg_1466;
wire   [0:0] icmp_ln768_7_fu_869_p2;
reg   [0:0] icmp_ln768_7_reg_1471;
wire   [11:0] tmp_data_0_V_fu_919_p3;
reg   [11:0] tmp_data_0_V_reg_1476;
wire   [11:0] tmp_data_1_V_fu_971_p3;
reg   [11:0] tmp_data_1_V_reg_1481;
wire   [11:0] tmp_data_2_V_fu_1023_p3;
reg   [11:0] tmp_data_2_V_reg_1486;
wire   [11:0] tmp_data_3_V_fu_1075_p3;
reg   [11:0] tmp_data_3_V_reg_1491;
wire   [11:0] tmp_data_4_V_fu_1127_p3;
reg   [11:0] tmp_data_4_V_reg_1496;
wire   [11:0] tmp_data_5_V_fu_1179_p3;
reg   [11:0] tmp_data_5_V_reg_1501;
wire   [11:0] tmp_data_6_V_fu_1231_p3;
reg   [11:0] tmp_data_6_V_reg_1506;
wire   [11:0] tmp_data_7_V_fu_1283_p3;
reg   [11:0] tmp_data_7_V_reg_1511;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] trunc_ln412_fu_413_p1;
wire   [0:0] tmp_1_fu_405_p3;
wire   [0:0] and_ln415_fu_417_p2;
wire   [11:0] zext_ln415_fu_423_p1;
wire   [11:0] trunc_ln_fu_395_p4;
wire   [2:0] p_Result_2_fu_433_p4;
wire   [0:0] trunc_ln412_1_fu_473_p1;
wire   [0:0] tmp_4_fu_465_p3;
wire   [0:0] and_ln415_1_fu_477_p2;
wire   [11:0] zext_ln415_1_fu_483_p1;
wire   [11:0] trunc_ln708_1_fu_455_p4;
wire   [2:0] p_Result_2_1_fu_493_p4;
wire   [0:0] trunc_ln412_2_fu_533_p1;
wire   [0:0] tmp_7_fu_525_p3;
wire   [0:0] and_ln415_2_fu_537_p2;
wire   [11:0] zext_ln415_2_fu_543_p1;
wire   [11:0] trunc_ln708_2_fu_515_p4;
wire   [2:0] p_Result_2_2_fu_553_p4;
wire   [0:0] trunc_ln412_3_fu_593_p1;
wire   [0:0] tmp_10_fu_585_p3;
wire   [0:0] and_ln415_3_fu_597_p2;
wire   [11:0] zext_ln415_3_fu_603_p1;
wire   [11:0] trunc_ln708_3_fu_575_p4;
wire   [2:0] p_Result_2_3_fu_613_p4;
wire   [0:0] trunc_ln412_4_fu_653_p1;
wire   [0:0] tmp_13_fu_645_p3;
wire   [0:0] and_ln415_4_fu_657_p2;
wire   [11:0] zext_ln415_4_fu_663_p1;
wire   [11:0] trunc_ln708_4_fu_635_p4;
wire   [2:0] p_Result_2_4_fu_673_p4;
wire   [0:0] trunc_ln412_5_fu_713_p1;
wire   [0:0] tmp_16_fu_705_p3;
wire   [0:0] and_ln415_5_fu_717_p2;
wire   [11:0] zext_ln415_5_fu_723_p1;
wire   [11:0] trunc_ln708_5_fu_695_p4;
wire   [2:0] p_Result_2_5_fu_733_p4;
wire   [0:0] trunc_ln412_6_fu_773_p1;
wire   [0:0] tmp_19_fu_765_p3;
wire   [0:0] and_ln415_6_fu_777_p2;
wire   [11:0] zext_ln415_6_fu_783_p1;
wire   [11:0] trunc_ln708_6_fu_755_p4;
wire   [2:0] p_Result_2_6_fu_793_p4;
wire   [0:0] trunc_ln412_7_fu_833_p1;
wire   [0:0] tmp_22_fu_825_p3;
wire   [0:0] and_ln415_7_fu_837_p2;
wire   [11:0] zext_ln415_7_fu_843_p1;
wire   [11:0] trunc_ln708_7_fu_815_p4;
wire   [2:0] p_Result_2_7_fu_853_p4;
wire   [0:0] tmp_3_fu_887_p3;
wire   [0:0] tmp_2_fu_880_p3;
wire   [0:0] xor_ln416_fu_894_p2;
wire   [0:0] and_ln416_fu_900_p2;
wire   [0:0] select_ln777_fu_906_p3;
wire   [0:0] icmp_ln1494_fu_875_p2;
wire   [11:0] select_ln340_fu_912_p3;
wire   [0:0] tmp_6_fu_939_p3;
wire   [0:0] tmp_5_fu_932_p3;
wire   [0:0] xor_ln416_1_fu_946_p2;
wire   [0:0] and_ln416_1_fu_952_p2;
wire   [0:0] select_ln777_1_fu_958_p3;
wire   [0:0] icmp_ln1494_1_fu_927_p2;
wire   [11:0] select_ln340_1_fu_964_p3;
wire   [0:0] tmp_9_fu_991_p3;
wire   [0:0] tmp_8_fu_984_p3;
wire   [0:0] xor_ln416_2_fu_998_p2;
wire   [0:0] and_ln416_2_fu_1004_p2;
wire   [0:0] select_ln777_2_fu_1010_p3;
wire   [0:0] icmp_ln1494_2_fu_979_p2;
wire   [11:0] select_ln340_2_fu_1016_p3;
wire   [0:0] tmp_12_fu_1043_p3;
wire   [0:0] tmp_11_fu_1036_p3;
wire   [0:0] xor_ln416_3_fu_1050_p2;
wire   [0:0] and_ln416_3_fu_1056_p2;
wire   [0:0] select_ln777_3_fu_1062_p3;
wire   [0:0] icmp_ln1494_3_fu_1031_p2;
wire   [11:0] select_ln340_3_fu_1068_p3;
wire   [0:0] tmp_15_fu_1095_p3;
wire   [0:0] tmp_14_fu_1088_p3;
wire   [0:0] xor_ln416_4_fu_1102_p2;
wire   [0:0] and_ln416_4_fu_1108_p2;
wire   [0:0] select_ln777_4_fu_1114_p3;
wire   [0:0] icmp_ln1494_4_fu_1083_p2;
wire   [11:0] select_ln340_4_fu_1120_p3;
wire   [0:0] tmp_18_fu_1147_p3;
wire   [0:0] tmp_17_fu_1140_p3;
wire   [0:0] xor_ln416_5_fu_1154_p2;
wire   [0:0] and_ln416_5_fu_1160_p2;
wire   [0:0] select_ln777_5_fu_1166_p3;
wire   [0:0] icmp_ln1494_5_fu_1135_p2;
wire   [11:0] select_ln340_5_fu_1172_p3;
wire   [0:0] tmp_21_fu_1199_p3;
wire   [0:0] tmp_20_fu_1192_p3;
wire   [0:0] xor_ln416_6_fu_1206_p2;
wire   [0:0] and_ln416_6_fu_1212_p2;
wire   [0:0] select_ln777_6_fu_1218_p3;
wire   [0:0] icmp_ln1494_6_fu_1187_p2;
wire   [11:0] select_ln340_6_fu_1224_p3;
wire   [0:0] tmp_24_fu_1251_p3;
wire   [0:0] tmp_23_fu_1244_p3;
wire   [0:0] xor_ln416_7_fu_1258_p2;
wire   [0:0] and_ln416_7_fu_1264_p2;
wire   [0:0] select_ln777_7_fu_1270_p3;
wire   [0:0] icmp_ln1494_7_fu_1239_p2;
wire   [11:0] select_ln340_7_fu_1276_p3;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_fu_351_p2 == 1'd0))) begin
        i_0_reg_340 <= i_fu_357_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_340 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291 == 1'd0))) begin
        add_ln415_1_reg_1364 <= add_ln415_1_fu_487_p2;
        add_ln415_2_reg_1380 <= add_ln415_2_fu_547_p2;
        add_ln415_3_reg_1396 <= add_ln415_3_fu_607_p2;
        add_ln415_4_reg_1412 <= add_ln415_4_fu_667_p2;
        add_ln415_5_reg_1428 <= add_ln415_5_fu_727_p2;
        add_ln415_6_reg_1444 <= add_ln415_6_fu_787_p2;
        add_ln415_7_reg_1460 <= add_ln415_7_fu_847_p2;
        add_ln415_reg_1348 <= add_ln415_fu_427_p2;
        icmp_ln768_1_reg_1375 <= icmp_ln768_1_fu_509_p2;
        icmp_ln768_2_reg_1391 <= icmp_ln768_2_fu_569_p2;
        icmp_ln768_3_reg_1407 <= icmp_ln768_3_fu_629_p2;
        icmp_ln768_4_reg_1423 <= icmp_ln768_4_fu_689_p2;
        icmp_ln768_5_reg_1439 <= icmp_ln768_5_fu_749_p2;
        icmp_ln768_6_reg_1455 <= icmp_ln768_6_fu_809_p2;
        icmp_ln768_7_reg_1471 <= icmp_ln768_7_fu_869_p2;
        icmp_ln768_reg_1359 <= icmp_ln768_fu_449_p2;
        icmp_ln879_1_reg_1370 <= icmp_ln879_1_fu_503_p2;
        icmp_ln879_2_reg_1386 <= icmp_ln879_2_fu_563_p2;
        icmp_ln879_3_reg_1402 <= icmp_ln879_3_fu_623_p2;
        icmp_ln879_4_reg_1418 <= icmp_ln879_4_fu_683_p2;
        icmp_ln879_5_reg_1434 <= icmp_ln879_5_fu_743_p2;
        icmp_ln879_6_reg_1450 <= icmp_ln879_6_fu_803_p2;
        icmp_ln879_7_reg_1466 <= icmp_ln879_7_fu_863_p2;
        icmp_ln879_reg_1354 <= icmp_ln879_fu_443_p2;
        tmp_data_V_0_reg_1300 <= data_V_data_0_V_dout;
        tmp_data_V_1_reg_1306 <= data_V_data_1_V_dout;
        tmp_data_V_2_reg_1312 <= data_V_data_2_V_dout;
        tmp_data_V_3_reg_1318 <= data_V_data_3_V_dout;
        tmp_data_V_418_reg_1324 <= data_V_data_4_V_dout;
        tmp_data_V_5_reg_1330 <= data_V_data_5_V_dout;
        tmp_data_V_6_reg_1336 <= data_V_data_6_V_dout;
        tmp_data_V_7_reg_1342 <= data_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln41_reg_1291 <= icmp_ln41_fu_351_p2;
        icmp_ln41_reg_1291_pp0_iter1_reg <= icmp_ln41_reg_1291;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln41_reg_1291_pp0_iter2_reg <= icmp_ln41_reg_1291_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291_pp0_iter1_reg == 1'd0))) begin
        tmp_data_0_V_reg_1476 <= tmp_data_0_V_fu_919_p3;
        tmp_data_1_V_reg_1481 <= tmp_data_1_V_fu_971_p3;
        tmp_data_2_V_reg_1486 <= tmp_data_2_V_fu_1023_p3;
        tmp_data_3_V_reg_1491 <= tmp_data_3_V_fu_1075_p3;
        tmp_data_4_V_reg_1496 <= tmp_data_4_V_fu_1127_p3;
        tmp_data_5_V_reg_1501 <= tmp_data_5_V_fu_1179_p3;
        tmp_data_6_V_reg_1506 <= tmp_data_6_V_fu_1231_p3;
        tmp_data_7_V_reg_1511 <= tmp_data_7_V_fu_1283_p3;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_351_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1291 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1291 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1291 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1291 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1291 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291 == 1'd0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1291 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291 == 1'd0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1291 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291 == 1'd0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1291 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291 == 1'd0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln41_fu_351_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln41_fu_351_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_1_fu_487_p2 = (zext_ln415_1_fu_483_p1 + trunc_ln708_1_fu_455_p4);

assign add_ln415_2_fu_547_p2 = (zext_ln415_2_fu_543_p1 + trunc_ln708_2_fu_515_p4);

assign add_ln415_3_fu_607_p2 = (zext_ln415_3_fu_603_p1 + trunc_ln708_3_fu_575_p4);

assign add_ln415_4_fu_667_p2 = (zext_ln415_4_fu_663_p1 + trunc_ln708_4_fu_635_p4);

assign add_ln415_5_fu_727_p2 = (zext_ln415_5_fu_723_p1 + trunc_ln708_5_fu_695_p4);

assign add_ln415_6_fu_787_p2 = (zext_ln415_6_fu_783_p1 + trunc_ln708_6_fu_755_p4);

assign add_ln415_7_fu_847_p2 = (zext_ln415_7_fu_843_p1 + trunc_ln708_7_fu_815_p4);

assign add_ln415_fu_427_p2 = (zext_ln415_fu_423_p1 + trunc_ln_fu_395_p4);

assign and_ln415_1_fu_477_p2 = (trunc_ln412_1_fu_473_p1 & tmp_4_fu_465_p3);

assign and_ln415_2_fu_537_p2 = (trunc_ln412_2_fu_533_p1 & tmp_7_fu_525_p3);

assign and_ln415_3_fu_597_p2 = (trunc_ln412_3_fu_593_p1 & tmp_10_fu_585_p3);

assign and_ln415_4_fu_657_p2 = (trunc_ln412_4_fu_653_p1 & tmp_13_fu_645_p3);

assign and_ln415_5_fu_717_p2 = (trunc_ln412_5_fu_713_p1 & tmp_16_fu_705_p3);

assign and_ln415_6_fu_777_p2 = (trunc_ln412_6_fu_773_p1 & tmp_19_fu_765_p3);

assign and_ln415_7_fu_837_p2 = (trunc_ln412_7_fu_833_p1 & tmp_22_fu_825_p3);

assign and_ln415_fu_417_p2 = (trunc_ln412_fu_413_p1 & tmp_1_fu_405_p3);

assign and_ln416_1_fu_952_p2 = (xor_ln416_1_fu_946_p2 & tmp_5_fu_932_p3);

assign and_ln416_2_fu_1004_p2 = (xor_ln416_2_fu_998_p2 & tmp_8_fu_984_p3);

assign and_ln416_3_fu_1056_p2 = (xor_ln416_3_fu_1050_p2 & tmp_11_fu_1036_p3);

assign and_ln416_4_fu_1108_p2 = (xor_ln416_4_fu_1102_p2 & tmp_14_fu_1088_p3);

assign and_ln416_5_fu_1160_p2 = (xor_ln416_5_fu_1154_p2 & tmp_17_fu_1140_p3);

assign and_ln416_6_fu_1212_p2 = (xor_ln416_6_fu_1206_p2 & tmp_20_fu_1192_p3);

assign and_ln416_7_fu_1264_p2 = (xor_ln416_7_fu_1258_p2 & tmp_23_fu_1244_p3);

assign and_ln416_fu_900_p2 = (xor_ln416_fu_894_p2 & tmp_2_fu_880_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op177 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln41_reg_1291 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op177 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln41_reg_1291 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op177 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln41_reg_1291 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op29 == 1'b0) & (icmp_ln41_reg_1291 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((io_acc_block_signal_op177 == 1'b0) & (icmp_ln41_reg_1291_pp0_iter2_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_357_p2 = (i_0_reg_340 + 5'd1);

assign icmp_ln1494_1_fu_927_p2 = (($signed(tmp_data_V_1_reg_1306) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_979_p2 = (($signed(tmp_data_V_2_reg_1312) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_1031_p2 = (($signed(tmp_data_V_3_reg_1318) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_1083_p2 = (($signed(tmp_data_V_418_reg_1324) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_1135_p2 = (($signed(tmp_data_V_5_reg_1330) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_1187_p2 = (($signed(tmp_data_V_6_reg_1336) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_1239_p2 = (($signed(tmp_data_V_7_reg_1342) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_875_p2 = (($signed(tmp_data_V_0_reg_1300) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_351_p2 = ((i_0_reg_340 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln768_1_fu_509_p2 = ((p_Result_2_1_fu_493_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_2_fu_569_p2 = ((p_Result_2_2_fu_553_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_3_fu_629_p2 = ((p_Result_2_3_fu_613_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_4_fu_689_p2 = ((p_Result_2_4_fu_673_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_5_fu_749_p2 = ((p_Result_2_5_fu_733_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_6_fu_809_p2 = ((p_Result_2_6_fu_793_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_7_fu_869_p2 = ((p_Result_2_7_fu_853_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_449_p2 = ((p_Result_2_fu_433_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_503_p2 = ((p_Result_2_1_fu_493_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_563_p2 = ((p_Result_2_2_fu_553_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_623_p2 = ((p_Result_2_3_fu_613_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_683_p2 = ((p_Result_2_4_fu_673_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_743_p2 = ((p_Result_2_5_fu_733_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_6_fu_803_p2 = ((p_Result_2_6_fu_793_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_7_fu_863_p2 = ((p_Result_2_7_fu_853_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_443_p2 = ((p_Result_2_fu_433_p4 == 3'd7) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op177 = (res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op29 = (data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign p_Result_2_1_fu_493_p4 = {{data_V_data_1_V_dout[15:13]}};

assign p_Result_2_2_fu_553_p4 = {{data_V_data_2_V_dout[15:13]}};

assign p_Result_2_3_fu_613_p4 = {{data_V_data_3_V_dout[15:13]}};

assign p_Result_2_4_fu_673_p4 = {{data_V_data_4_V_dout[15:13]}};

assign p_Result_2_5_fu_733_p4 = {{data_V_data_5_V_dout[15:13]}};

assign p_Result_2_6_fu_793_p4 = {{data_V_data_6_V_dout[15:13]}};

assign p_Result_2_7_fu_853_p4 = {{data_V_data_7_V_dout[15:13]}};

assign p_Result_2_fu_433_p4 = {{data_V_data_0_V_dout[15:13]}};

assign res_V_data_0_V_din = tmp_data_0_V_reg_1476;

assign res_V_data_1_V_din = tmp_data_1_V_reg_1481;

assign res_V_data_2_V_din = tmp_data_2_V_reg_1486;

assign res_V_data_3_V_din = tmp_data_3_V_reg_1491;

assign res_V_data_4_V_din = tmp_data_4_V_reg_1496;

assign res_V_data_5_V_din = tmp_data_5_V_reg_1501;

assign res_V_data_6_V_din = tmp_data_6_V_reg_1506;

assign res_V_data_7_V_din = tmp_data_7_V_reg_1511;

assign select_ln340_1_fu_964_p3 = ((select_ln777_1_fu_958_p3[0:0] === 1'b1) ? add_ln415_1_reg_1364 : 12'd4095);

assign select_ln340_2_fu_1016_p3 = ((select_ln777_2_fu_1010_p3[0:0] === 1'b1) ? add_ln415_2_reg_1380 : 12'd4095);

assign select_ln340_3_fu_1068_p3 = ((select_ln777_3_fu_1062_p3[0:0] === 1'b1) ? add_ln415_3_reg_1396 : 12'd4095);

assign select_ln340_4_fu_1120_p3 = ((select_ln777_4_fu_1114_p3[0:0] === 1'b1) ? add_ln415_4_reg_1412 : 12'd4095);

assign select_ln340_5_fu_1172_p3 = ((select_ln777_5_fu_1166_p3[0:0] === 1'b1) ? add_ln415_5_reg_1428 : 12'd4095);

assign select_ln340_6_fu_1224_p3 = ((select_ln777_6_fu_1218_p3[0:0] === 1'b1) ? add_ln415_6_reg_1444 : 12'd4095);

assign select_ln340_7_fu_1276_p3 = ((select_ln777_7_fu_1270_p3[0:0] === 1'b1) ? add_ln415_7_reg_1460 : 12'd4095);

assign select_ln340_fu_912_p3 = ((select_ln777_fu_906_p3[0:0] === 1'b1) ? add_ln415_reg_1348 : 12'd4095);

assign select_ln777_1_fu_958_p3 = ((and_ln416_1_fu_952_p2[0:0] === 1'b1) ? icmp_ln879_1_reg_1370 : icmp_ln768_1_reg_1375);

assign select_ln777_2_fu_1010_p3 = ((and_ln416_2_fu_1004_p2[0:0] === 1'b1) ? icmp_ln879_2_reg_1386 : icmp_ln768_2_reg_1391);

assign select_ln777_3_fu_1062_p3 = ((and_ln416_3_fu_1056_p2[0:0] === 1'b1) ? icmp_ln879_3_reg_1402 : icmp_ln768_3_reg_1407);

assign select_ln777_4_fu_1114_p3 = ((and_ln416_4_fu_1108_p2[0:0] === 1'b1) ? icmp_ln879_4_reg_1418 : icmp_ln768_4_reg_1423);

assign select_ln777_5_fu_1166_p3 = ((and_ln416_5_fu_1160_p2[0:0] === 1'b1) ? icmp_ln879_5_reg_1434 : icmp_ln768_5_reg_1439);

assign select_ln777_6_fu_1218_p3 = ((and_ln416_6_fu_1212_p2[0:0] === 1'b1) ? icmp_ln879_6_reg_1450 : icmp_ln768_6_reg_1455);

assign select_ln777_7_fu_1270_p3 = ((and_ln416_7_fu_1264_p2[0:0] === 1'b1) ? icmp_ln879_7_reg_1466 : icmp_ln768_7_reg_1471);

assign select_ln777_fu_906_p3 = ((and_ln416_fu_900_p2[0:0] === 1'b1) ? icmp_ln879_reg_1354 : icmp_ln768_reg_1359);

assign start_out = real_start;

assign tmp_10_fu_585_p3 = data_V_data_3_V_dout[32'd1];

assign tmp_11_fu_1036_p3 = tmp_data_V_3_reg_1318[32'd12];

assign tmp_12_fu_1043_p3 = add_ln415_3_reg_1396[32'd11];

assign tmp_13_fu_645_p3 = data_V_data_4_V_dout[32'd1];

assign tmp_14_fu_1088_p3 = tmp_data_V_418_reg_1324[32'd12];

assign tmp_15_fu_1095_p3 = add_ln415_4_reg_1412[32'd11];

assign tmp_16_fu_705_p3 = data_V_data_5_V_dout[32'd1];

assign tmp_17_fu_1140_p3 = tmp_data_V_5_reg_1330[32'd12];

assign tmp_18_fu_1147_p3 = add_ln415_5_reg_1428[32'd11];

assign tmp_19_fu_765_p3 = data_V_data_6_V_dout[32'd1];

assign tmp_1_fu_405_p3 = data_V_data_0_V_dout[32'd1];

assign tmp_20_fu_1192_p3 = tmp_data_V_6_reg_1336[32'd12];

assign tmp_21_fu_1199_p3 = add_ln415_6_reg_1444[32'd11];

assign tmp_22_fu_825_p3 = data_V_data_7_V_dout[32'd1];

assign tmp_23_fu_1244_p3 = tmp_data_V_7_reg_1342[32'd12];

assign tmp_24_fu_1251_p3 = add_ln415_7_reg_1460[32'd11];

assign tmp_2_fu_880_p3 = tmp_data_V_0_reg_1300[32'd12];

assign tmp_3_fu_887_p3 = add_ln415_reg_1348[32'd11];

assign tmp_4_fu_465_p3 = data_V_data_1_V_dout[32'd1];

assign tmp_5_fu_932_p3 = tmp_data_V_1_reg_1306[32'd12];

assign tmp_6_fu_939_p3 = add_ln415_1_reg_1364[32'd11];

assign tmp_7_fu_525_p3 = data_V_data_2_V_dout[32'd1];

assign tmp_8_fu_984_p3 = tmp_data_V_2_reg_1312[32'd12];

assign tmp_9_fu_991_p3 = add_ln415_2_reg_1380[32'd11];

assign tmp_data_0_V_fu_919_p3 = ((icmp_ln1494_fu_875_p2[0:0] === 1'b1) ? select_ln340_fu_912_p3 : 12'd0);

assign tmp_data_1_V_fu_971_p3 = ((icmp_ln1494_1_fu_927_p2[0:0] === 1'b1) ? select_ln340_1_fu_964_p3 : 12'd0);

assign tmp_data_2_V_fu_1023_p3 = ((icmp_ln1494_2_fu_979_p2[0:0] === 1'b1) ? select_ln340_2_fu_1016_p3 : 12'd0);

assign tmp_data_3_V_fu_1075_p3 = ((icmp_ln1494_3_fu_1031_p2[0:0] === 1'b1) ? select_ln340_3_fu_1068_p3 : 12'd0);

assign tmp_data_4_V_fu_1127_p3 = ((icmp_ln1494_4_fu_1083_p2[0:0] === 1'b1) ? select_ln340_4_fu_1120_p3 : 12'd0);

assign tmp_data_5_V_fu_1179_p3 = ((icmp_ln1494_5_fu_1135_p2[0:0] === 1'b1) ? select_ln340_5_fu_1172_p3 : 12'd0);

assign tmp_data_6_V_fu_1231_p3 = ((icmp_ln1494_6_fu_1187_p2[0:0] === 1'b1) ? select_ln340_6_fu_1224_p3 : 12'd0);

assign tmp_data_7_V_fu_1283_p3 = ((icmp_ln1494_7_fu_1239_p2[0:0] === 1'b1) ? select_ln340_7_fu_1276_p3 : 12'd0);

assign trunc_ln412_1_fu_473_p1 = data_V_data_1_V_dout[0:0];

assign trunc_ln412_2_fu_533_p1 = data_V_data_2_V_dout[0:0];

assign trunc_ln412_3_fu_593_p1 = data_V_data_3_V_dout[0:0];

assign trunc_ln412_4_fu_653_p1 = data_V_data_4_V_dout[0:0];

assign trunc_ln412_5_fu_713_p1 = data_V_data_5_V_dout[0:0];

assign trunc_ln412_6_fu_773_p1 = data_V_data_6_V_dout[0:0];

assign trunc_ln412_7_fu_833_p1 = data_V_data_7_V_dout[0:0];

assign trunc_ln412_fu_413_p1 = data_V_data_0_V_dout[0:0];

assign trunc_ln708_1_fu_455_p4 = {{data_V_data_1_V_dout[12:1]}};

assign trunc_ln708_2_fu_515_p4 = {{data_V_data_2_V_dout[12:1]}};

assign trunc_ln708_3_fu_575_p4 = {{data_V_data_3_V_dout[12:1]}};

assign trunc_ln708_4_fu_635_p4 = {{data_V_data_4_V_dout[12:1]}};

assign trunc_ln708_5_fu_695_p4 = {{data_V_data_5_V_dout[12:1]}};

assign trunc_ln708_6_fu_755_p4 = {{data_V_data_6_V_dout[12:1]}};

assign trunc_ln708_7_fu_815_p4 = {{data_V_data_7_V_dout[12:1]}};

assign trunc_ln_fu_395_p4 = {{data_V_data_0_V_dout[12:1]}};

assign xor_ln416_1_fu_946_p2 = (tmp_6_fu_939_p3 ^ 1'd1);

assign xor_ln416_2_fu_998_p2 = (tmp_9_fu_991_p3 ^ 1'd1);

assign xor_ln416_3_fu_1050_p2 = (tmp_12_fu_1043_p3 ^ 1'd1);

assign xor_ln416_4_fu_1102_p2 = (tmp_15_fu_1095_p3 ^ 1'd1);

assign xor_ln416_5_fu_1154_p2 = (tmp_18_fu_1147_p3 ^ 1'd1);

assign xor_ln416_6_fu_1206_p2 = (tmp_21_fu_1199_p3 ^ 1'd1);

assign xor_ln416_7_fu_1258_p2 = (tmp_24_fu_1251_p3 ^ 1'd1);

assign xor_ln416_fu_894_p2 = (tmp_3_fu_887_p3 ^ 1'd1);

assign zext_ln415_1_fu_483_p1 = and_ln415_1_fu_477_p2;

assign zext_ln415_2_fu_543_p1 = and_ln415_2_fu_537_p2;

assign zext_ln415_3_fu_603_p1 = and_ln415_3_fu_597_p2;

assign zext_ln415_4_fu_663_p1 = and_ln415_4_fu_657_p2;

assign zext_ln415_5_fu_723_p1 = and_ln415_5_fu_717_p2;

assign zext_ln415_6_fu_783_p1 = and_ln415_6_fu_777_p2;

assign zext_ln415_7_fu_843_p1 = and_ln415_7_fu_837_p2;

assign zext_ln415_fu_423_p1 = and_ln415_fu_417_p2;

endmodule //relu_array_ap_fixed_8u_array_ap_ufixed_12_3_4_0_0_8u_relu_config5_s
