node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_0/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        tensor_content: "\2474\"?\366\347\360>\001\027,?j2\245=\002C\347\275;8\007\276\276\037\274>\034\260\245\276\033.\r?LV\266=\251\347\214\275\022\205\365>\003P\013?\263NT?\372|\321=\320\273\307>\345Ry\276\375\354\031?&\236\245>h\211M\276\260\314\r?Wh\205\276\036\227\251><\034F\275\220\345\305=P%:>\307\325\275>\300M\243\276&g\314>QA\332=`\226&>\255\340+\276\242f\331\276&\216V=g\007\326>\230\370x>D\335d>H\340\207=O\310!>\021\363\247>\003\240\245>\321\235\201\275\"0\"\276e\372K\276\263.(?\377\220\320?xR\333>\203\251\370>\302;\364=\217\020Q>\r\300\201\276\353R`\276A\367L\276z\211\222>\276Z.>\340\032\303>\017 q\276\356\247\304=\304\350\270>\\\232\265\275*?k\276~\272\016\277\001?x\276\226e\007\276u\241`\276\004h\237>\252\376\013?\251+h>W\345\214=E\370\021\276g@\266>2\017\250\276\035\350\221\275\207B\204\275\236\2416>\013\372\373>\177O\207>b^B>\240\'\356<\254\262\325\275\370\026\207=\230\245\365>\263\312\350=\221\274\n\275\317q\351<={\227>%\232\245>]A\317>\nl\365>^\002\244>\\\213E<O\325\314=\303\211\220\273\016\224\366\276\266\273\n?\016\252)=\345\227\033>\355\016\276\27436\211>\205]\367>\027\003}>(6\317\276\322\260\023>\035?\025>\361L\241\276N\227i>D\303\204\275%{\277>\322\205\336\275\001D\356>W\2376\275\224\330\013>Ck\020?\246\232\207\276\265\236J>\355\253\251>^\247\037>I\323\240\276z\233\002?\261e\030\276\r\202\247=\200\3319\276\"\301\236\275}\003\\>\237d\020=\026r\016?\037Uu>:2]>\034\032\315>\000\002\226>1\241\352>\032\314\367>u~\001?\311\370\210=7 <?\"\244\316\276\251V\027?\"4p=\213\344\351=\371\207\324>\215\366\310>\331\322\000?\371;_>h\375\302>\n\344\234>\256\217\016\275\325\'\032>S\270\324=J\351\211>\220y\364=g\253\215>>\357\214>\357\275U>\303\351\311>\202\335(>\020\2234>yv\211\276\363\332\232>\323_\213>;3\234>(\264\305>\351\005\241>g\\\233>^)\361<\227E\004?\243\253{\276[\022\025>\256y\342\276e\352<\275\334\330\225>J\345\240>\227\362\331>t\025\237\275\0075\243\2760\000\006?\022\325\324>\001\224\224\276a\223\214>Su\222\276`r\207\275\252\245\267>x\366\250\276IN\265\274Y\337\307\276\313\240\312>U\376\003?\207o^>6)\002=\241Q\000?\034\257\337\275\354\303\337\2740\242f>\213\323\005?\350>\006?d\245\252=I1\325>\226FK=^\240\301>\241a\030?\315I\273\276\227(\340>\234\361\024?\341\3774\275\362\363\030\276\336\202\\>\225\365\260>\2778\017\276\002\023\304<\242{\275>\232\037\207<\"M\004?\261qZ>\323\374-\276\332\005\005\276\3102\363\273\240\275\210\276\374\203\336=.\006\002?b\036\230>\265\335\310\275_j\353>\364iI>\375\331N=\201\250\341>\264\233\010\276\022\256\341>\226E\000\276\320\272 \276|\235G;e\211\375;\210z\037\276\034\212\343=\030\243\340>$Y\024?!c\267>\243\232\255>\210\331+>/V\251=\263O\010?]\267P\276P\216u\276\311|A?(9\004?\215](?HC\304>\017\027\303>\010Y0>\312b\256>u\374\325>M\341f>M\263\024?\375\374M\275\205\337\032?;/\341<\360jD?\006J\277="
      }
    }
  }
}
node {
  name: "decoder/de_dense_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "ln\334=!o$>\025\333\372=#\002#>%\347\033>+:b\274\273B!>\275G\267\274\260\340\361=\221\256\014>b\006\352=l{\007>]\207x=\344\214}\275\301\315,>>\005\013>"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
        tensor_content: "\201\377i>q\217>\276\236\001D>i\262h>D\270X\276w\245E\275M\311l?NW\200>\026\207\304>@Id\276Qk\212;\314Mi>\215\320\016>I\325?>^\005\276>\250\017\373>!FL\276\005n\244>\332\006\304=\245J\035>\212\226\223\275Qo\002\276\343\2723\275\230\235$=]\360\321=\250\307\303>\032\356\206>\326\253\225=\204\t\211>i\023\222>\356\272\225>\245\237R?m\2512\276A\217\372\274\224c;\275\310\343U\276\232\314\272>!\355\265>\027\004\341;\3673c\275\227\370\217=\220\217\200\276\n^\304>udd>|5*\274\356\303\033\276@\226\324\273\220\343\365\274:\032\177\276\264F\234=m=\025\275\003)\375=:\211\237>P\370\'\276\336\r8>\300\034B>;,g\276I\345\312=\377\023\306\274\037S\037\274\021O\217>\024\247\235=\200\271\027\274\246\322\303\275\252\350G\276vJ\212\276%\323\177\275\\\321|\275s\032\213\276c\021-\275Fq\314\275\264\337\337\274\200\351\006:_mi\276\'5\275>\233\315\336>\031\352\330\275\211d5>M@\001>\201)\375<\322\367\323>\360(\341>b\372\220>\301\020\271>/.\271>\343=\364=\376\200\245>\206\0343>/<\205\276\214\271\236<\232\3719>\243\211\226>\331>6>\365\003Z>c=\022=\362\245\t\275\"\300\014>\322\310)>6z\271>\267F\001\276\213li\274\236\025\313=\314\033\315>\342\323\227>\331f\271\274k\262\214\274\356\373\216=;\305\240\275\210\350\020>\326Sk\276B\235\032>\224\212\321\275\336\235>>\364\333\237=\330k\366\275\354\275\235=@\317\213>`\213\345=@\271\336\2730\350\035=1\000[\276\356\006y>\233\330R>\255\374%\275\014\221\203\275\340\262\315<\212\233\355\275\357\342Q\276\313\304\311\275%h\027>\350!\350\275\032\347\004=z\277O>\210\203\312=\321\223l>\361\213\223\276u4\023>\022\212\202\276/\232\362\275\355\013\232<\303[\265>#W\254>\325\\F>I\351\225>n/\273;P:\014\275\274\215&>cS\351\275\2215\002>\305!\241>\035Nu\275wM`>\243\033!\276r\3406>7\223\254>\345\224\263=\377\330M=\005\350O>\221\003\256>\361y\253<&N\001\276Ff\227>\240\tH=\032G\312\275\333c\222>\215\262\361=\'\325^\275\362\211\263>]\030\033>J\t:\275[l\255=\311Y\356\274\223\346\316>\300U+=\200/\257;d\225\360=\305r\006\276\273nM\275\245X\211\274\221\033w>\2501\353<\201\351\014\276\314\027%\276\002Ve>\036C0\276\236\252\017\275t\211\373=\341`\260=\257\214\237=\0221\031>PG>>\370\217K\2763\341\275;\311\321\273\275\333cF=\'JQ>z\335\016=\246\016\006\276\334f7>\303\344\363:\327\\\236=\003a\207\275^\202l=\235]\237=\264\206\256>\235\223\t\276\365\333\017\275\033\312\264>M\313\201\275\3455|>E\366L=\241t\321>\035#\272=\360\315\200<\367\253\316;\177\007\315>\306\177~>K\256;>\010B<>\2336\216\275y\367\021>\"j\025\274V\r\246=n?E=+S\200>\252\\\271>\303:\340\273\354C\210\276\355\267?\275\354u\276<\351\357\014=\304\031#>\374\344/\276\031\002\007\275\200^\224=\257\257\224\275x:\r>\200-Q<,V\177\276\014\314>\275m\320h\276\341\233\202>\262\227\207=\000\205\266>\226\335c=\222l^\276\356V\206>8\201.=C\237\335=_\351\375=\361\230\206>\242\023\265>\352\354\204>\300T\272=j\231^\276\234\250;\275\254\023\000>Z\267\031\276 >\217\275kN9<!\\i=\337\360\232\276\204\017s>\261q`\276\323\312e>\240E]\276\007\342w> b\202>\311\246q>,%\303=\335\037O>\264\374\027<\361\276c>9b\177>>\304\362=\363\005\023>n\255V>\0250_\275\020Q\335\275;g\222>\301\342\240=\260\201!=\364\3211=H\362\203> #\t=U%B>\035\355B\275\206C\330>-\256\027=\316\211\213;C\260\360\274Xk\023\276]\247\276>U\2463>\260\247g>\004\347\210=\301\373\014\276a8^\275\377\342\017\2760\237\244>?\312#\275K\234\006\276\224\254&>\351R\000\276\251wK={\036d>nl\221\276!Y\243>n\250+><\276\204>B<\356\275\331t \276\313>\304\275\325jP>\342\214\264>\344\364h>\037\030\202>\230&5\276\311\036Y\276\364\211\240\275x\333\221\276\202\275\202>\272\260\303=k\210\261\275I\230O=\001\245V\276\364\264\326\275~U(\276\205\372\211\276\021\023\021\276\305H*\276Z|\203\275;\204\002>\314`\030\276`~&:\33273\276~\377q=\260\330\356\275b\205\003=\376\036\030>>]\273\275u\362j\271YZ\327=\204T\247\275P)n>\214\235\242\275\353\260!>S\200\213\276\"a0>\0103+=\207\356Z\276j*\005>\376\0350\274!\275\t\276\215\035;\276C(0\276\347\307\233<\340p\267<\253\374\023=\301\366\237=c\013\263\274\3337U>\377\013\266\275\275SV\276\023\272\020>\310\242\"=@\330.\276 \354[<Z5\364\274)i\021\276C\262G\276s\361\234>\362vz>\250yJ>\204\265\235=\306\272\206>\240\351\363\275\220q\'\276i\371C\275\336R\221>\227\336\037\276 \217/<\244\321;\276:\264\337\275\001#%=\364\353L\276k\350&\276Ofz\274/\377*\276\0262\211=@\233\237>X\207N\275\233\357\251>Y\026i>e\205\342=1I\343\274\377\004\242>I\306K<C\231\264>\333\373|>)\246\230\273V\263\241>#h\270=\233\007\213>6\306G\275h&o\275.\375J>k\270\201>\365\031\340;\007\274\000>:\226\220>(\216`>\327!4>\020.\330\275\214\3457>y\\\017?\000\307\265=\202\005\207\275}p\203=\375\226\221=\341D\305>\322\200\020>\027G\315\274w3t=\026@\226\276)\023\211>\006\247e>\351\014\363=\235\017_>\301\370\211\276\344\266\341=\272\201G>\320\321V\276\340J\254>\236\3409>\233\250\255>\336\000\245\275$\342\274=\254\272\353\2750\305Q>Y\0341\276\010\306\242=\227h\366>\235\010M\275\272!\306>\246&\033\276X\375\213>\014N\220=9\333=<\311Vc\276J\212L>\225\006\375=\336\022D>\005i,\276\016\234^\276ml\222\276\035\374w\275\327\373S\276\305j6\276 \252\325=\006jp\276\275\"U>*\256\017\274\201\262\226>\307\365\253\275\377\340\"\276e\032\014\275\216\316\234=R\216_>\253\272\322\275\211\306\373=\000\255.\276,\177\217\276\377\247\031\276\232\030\236=\303\230M>^\260\200\276\027\270&=c\3041>\014\014\013>)dc>\353|\'\276K\336\000>\237\007\362\275 \202B>2O\303=\360\376?>\213vI\276\321@~\276I\003\227\274a\356\324\275n)\223>\217\201\236\275\257P\213\276\320/\265=T\307\306=\215\376n\276g*Q\276\205\237`=r_\203\275 \277\007\276p\007\000\275\254\273\247=\310\316n>\033\210t>\305XR\276V\333\002\276#\367\341=\266\0355\276$9\216=\034\250\214=\316\254\023>\222\350\007\274lQ\250=Hr\345=$\346D=ax\016=\303~)=\035i >\363\336\350\274\026%H>\342\017\203>\303\273\202>\0367{>\005\031\325>\267\277\024\275\263\257\365>\325\032\034>2\366\311>e\367\324>\033\017\347=Rc/>\014H\035\275\301w\313=\2174\344>,\277\n? \\v<\025c0\275\253\364\210=\"\342\220>\332\267\255\275p\277\206>6\263;>\2508\354\275,\031\352\275\3477\327>\367\300\363>\215G[>\024\254\343<h\374\367;+\300\242>\320\\\231\274~r\032\276k\206\036\276\266U.>\'\251\312>\354\312M\275\247\351$\276@@\317\273~OM>\244&\243\275\321\352\302>\216\243\n\275\236\230\325=zE\032>\370x\373\274\036\215F>\206\023\036>d\036T=\200\355G>\346\354\336>\331\260\033=:*?>\230V~>w\205\200\276\024\177[>\205*\014\274\217~\235=z\377\267=\233\002\203\275\220O\030:\340\217\372=&]\313\275\344\225]\275b.\305;\302\222\210\276-/\245>\330\027\233=\223e\320==`\275< \310\234>\265\002\271=o\220\235>m\301*=\277\367\272\275\032\003)=yr`>\305\341\312=\272r\353=\260\256K> &J\276\371\353w=\023\206\237>\022\255\215>;\037\241>R\246\315\275\315\001\204>-4\240;\222\'\322\275\035\223B>\311Kg>]\351C=H\017\321>\376\020q\275\037\205\247>o\344\243>\343G~\276\033#\026\275 \321\007<vu\240>cp\230>(\227\004\276\320\010\377\274~r^>\201M\212\276`\341\206=pK6\276\251\310.>E\016v>\360\031\276=X\'\267\275|\224?\276@u\001>)\310\226>\366\335\216>\225\256\006>\357\234\323>`\243\023\276\346\256\\>\243\326e\276\3554 \276\"~->*f\256=fwu<8\035\303\275\025o!>r^4\276\n\224!>\340Zc=y\r\025\274\325O\346>\312\026\002=|\224\277>\300\275\221>\023\357G>g\023\263=\217\276\024>\034F\200>\2776\324>\014\242S>\034`\225>,)\234>\373\r\267<\305e\202=\343n\224<ssH\275\374\016e>f\301\241>\222\214\260>JP!>s}\254>\353W\372\275\325\210R<\374\250\325<\357\230\204>I\220\305\275\237\376\024\275a\344\215>\363\003\263<Q\035\246>\227\037=>\360\317\352\275\315\274\240=l\246}\275Z\254\375=z\200\006\276<\305\"\275(\367C=\245\007#\276Sy\323\275\221\3111>D\375z\275\027J\214\275\000\220z:\230\325\220=r}E>\237\310\215\275\332\032\215>\2606\277>\273\301~<Al\211>\004\222\225\275\364\037c\276\n\034C\276\320\217\201\276\221C\374\275U\304I\2766%b>}\361]>F.@\274\241\301\234?+\253;\276\374NF>z\351\351<\326\247\203\275\246=\367<\216\306\244>E\234\263>\225\010\230>\341Z\320>~H\276\275J\337\036\275B\263\255>\212o\001\276 *L=\256\305F>\013\235f>\031\331\036>Z\237K>[C\206\275S\231\267>\327C\235\275\037\013t>\230\364\213>\201\344\013\275E\3162?5}\344\275\274L\305>\2609\274=\346p\020>\2437\232\275\r_\233\275\301\232\227\275\222\031\312>|\374\376=\310\236\'\276=\n\270<0.\234>\211+\261\275\354\354\264=@\020\027<xTu>q\024f\275hP\316>\334\177P\276\254\177\2149N\316\237>t\370\t>H\270\226\275\360Y\342=\024n\371=(q\375=\375\2047>\t\032z=A\225#>\270\206\247=\324\025\220\275R|u\276\245\233f\276 xY\274qz@\276\211\034\370<uv\014=g\322\214\276\031\312\270\276U\314k\276@\027\014>\243\031\341\275*\371P>Q\036&>\236\245\267=\311\332\252\273\230\r6>\352m\331\275\244n\376\275J\030\365\274\274\206\256>zY\232>Sb\265>\003=\331>\235\277p\274\302[U>\311\ny\275^\004l>\021F\035>U\274\245>\025\230<\273\217\025\266>\2019}>\324\032\013\276\302\301\336=\3326\216>\345\327d\2753\0019\276\233U\254\274\3016|<\310d;>\355\243\324\275oZ\342=\363Ut>\270\301\236>M\330\335=\355\300\241=\2514\203\276\300\216\031\276\214\323I>f5R>\035\245\301>\314\263\206\275\354\264\210>6qY>4oz\276X\327\210=h\247z\275\320\027\265=.\376n>\222\307\001?~(\272\273pCQ\275\266\240\307\275\250\311 >\233\331}\276\365\263\020>P<\\>\261\270\023\276}\300;>\242;O\274s\036Q\275\333\264e\275\375\243D\276(\002\237?\321\256\327\274vs\204\275m\352\237=B\336\010\274f\310\223>(\342\r<\340:@\277to\033\277\225\372^>VR\250\273\304\013\227=\225%\221\275ki >\344RL\274\214\332\001?\2135\356\275\255\000\305>y\250\217=\312\216g>\023\322\006>\255E\210\275X\202\227>B~\027=\001\230\243\275\260\013\270>\\s;\274K\331]>\225V:>\312Q\301=\036\347\223\275\332\016\205>\341\311O\276\206g8=\372\036\002>\311.\224>\200\n\273\275\320\034S=\351Cn\276\013{3\276\236\270T\276\017\233\335=\\\364\031\276&U`>\346\245\006>(\030\224=\014N9\275\270\313t>\031\246\213\276W\353\356>#P\362>x\"\323<\002\337\271>\214\310g>\022\364\030>\264\206\207>\235HP\276\327&|\276\324\350\037\276\2343\214\276\366\177@\276}\265\010>\370\232\300<\006\005\336=\211\341\303\275\032I\325\275\271\031\240>a\367\013>`\3205\275\356\302\271;o\247\\>\3552b>MTK>0\002\222=\207\304K>\032\312\022>\300GV>\0305\n\275\2650\n>\355\252\253>Q\206c\276\201\034\223>V0\342\275\016I\217>1r\367=o\017\216>\241\372\302>j\375|\275<\202]\276\371%\312>b\304\312\273\250X\004\275\244<\313=\004Dm\2757\272\253\275^3\222>V\331e>H=3\276\223\232\030\274\216\322\217>\260\223\217>\000\245r<@!w>\370\036`=\341\004\014>r\340\242=s:\236=1\365\310=`Px<\254R=\276`zy>\354\203u>\252EW\276\020U\220=\007d7\275}\013d\273\251\310\341=\000\375\252<\000u\337=\000\376R;-\346f\275w\024\017\276\214\3217=\267\020\020<\216M\220\276\275i\"\276>\315\203\274o{R\276Zj\305=\334D\021<UU\231\275b\314\361<q\222\274=5s\265>\235\320~\273\"\333d>\253\303\232\275\010\t}\275p\236\203\274.\273\302>\213\250\232>\256\014F=\332\037\003>\3703\217=i\262#\276+\241\">\303\001%=l\222\203=hC\014\2768\250\266>\376\204\261>\317\024>\275J\023P\276>\243G>e\243\236\275\2021\027<\270p\317>\r\201,>\311\000\233>\246\311N\275\240\272G<-(\362\275\261\247\247>.%X>\373`\221\275T\363y><\215:\275\374L\206\276\202\231.>3\213\303>:\352x=\0327\331\274\322\363O>\377\221\207\276Hg\332=| A>\243\r\316\275\330S<>fW\262>\265\253<\275\313ti>6\354\210>?,\023\276\024\233S\276"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content: "b\200\256\274xg\265\274\021<\305\274h\025\351\274\234\371\227\274\177\036\010\275E\342$=\266\306\202\274\336O#\274\240\237\252\273\351\364 >8\003\001>\312\251\327=\212\203\310=\tO\375=\310\273*>T\023\326=\215$\025>\361\\\366=\277`\332=S\313\327=x5\336=\313\267\020>[X\307=\324\304`\274\022\332\002>\354\312\261=\210^M=\324\372\211=\\y\352=\320C\265=.3\363=\277\337\233\274\rO\325=z\214\020>\370S\301\274\314\312\327=\347\315\350=\275\006\335=\224\205\264=2\311\244\274|Nw;\243\335\352=W:\367=_\337\323=\000\000\000\000\000\000\000\000\000\000\000\000\251=\317\274\277\262\366=\3476\033\274\212^\010>\337\347\347=\000\000\000\000\000\000\000\000\000\000\000\000\'\013\262\274@\211\021>\323\352\006>\301K\003>\253\361\321=\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\311\242\013\277Wm\010\277\253\354U>\264\2778\276^\201\234>\217L\241\276+\225g=t,7\276k\236\247\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.09017536789178848
      }
    }
  }
}
node {
  name: "decoder/de_dense_0/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_0/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_0/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_0/MatMul"
  input: "decoder/de_dense_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_0/Relu"
  op: "Relu"
  input: "decoder/de_dense_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "decoder/de_dense_0/Relu"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_0/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_0/MatMul/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
