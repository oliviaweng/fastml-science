node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\305k\035\276_\353\021\275_\353b?\365\323\016?Y\256\305\275Q\3129?k\273@>\212\240\334=\224\334\001>\364\010\317\275n\tV\2760/\035=$\227Q>\'\2364\276\003\001\215\2767Z\207\276\201\314\033?\303\234\204?\214Z\357\276\025\347%?\215\n\002>,.O<\360\031\010\276t\220\177>\274\205\317\275h\031\030>S\342N?\244\267j>\301)\222\275\034\331\033\275\304\252>>\336\232\251>5U\371=\273Z\357\275\324\242\376\276\266\002\340>/\257\262\276\\\365\210\276\354\2268=7\363><(\252\372\275\204@\007?\361\263\">m\003\325>\200\365!>\215l\033\276W=\322>\251\017\200>\375\366\244>\362\025\332>\026\242\026?\370\313?>=z\211>\340N\224\276N\n*\276\211D\024?p\217\214\276\300\255\211\276\274B\376\275rI\217\275$ \261\276\317?\003=\345\221+?\257\267C\277&qy\275\352\370\005\277\250\351\232?V\214\023>\316\007~=\233\203\010=\306\005\203\276\004\221e>\316\005i\276v\310s=<M\036?\234O\n?\341\303\201\277~\274\223=\256\351%\276\357;c\276\317*\205>\370\335A>\034~\016\276\253\265\225\276\276\313\200\276SV\275>\340k\234\276Fb\r>C\370\242\276\324\314!?\375SM\277\345\377\342>$7\237<\245B\354\275\230\2272?\340\273\016>\360\346k\275!\312\n\277k\260]\275\234\213\203\277\241\031j\277p\324\327<\264\341E>\2505\352=W\246F>W\277\265\277\273\204\245\276\027\240\325>\022\026X\2769\343h\276\242\242\210>\317\3372>\244qT\277\202Kw\275\253Z\r@\t?\227\277\244p\022\276\346\2236\276\276\234\257>\226\250\265\276\014\326\344=\000\351\370:\300v\257;\0103\232=F\375\030>\254\266>\276H\366)\275\020\200\200\275n\365G=G\252\237\276\204%E>2\035\354\275\356A\013\277C\261\276=4\010\265>)BY=1_\224\276\002v;\276;u*=(\352\221>l_\202>\262o\252\275\370\323\'?w\016\014>T\031\240>\205Y+>\311Q\217>/\0173<b\202Y=\345\007\021\276\231.\022\275K\343\220=\321Z\022<\356$\346=\306R\016\276l\362\035>6\001\251\274rZ\211\276\275r\'=@\334\001\277Zsf\276/\031\353>+S\377=$\267\033\277\306 \207>\335es?\256\305\307>\375\310\242\276w\330\310\276\356\235\235>^\205h>uL\022\275\315\273\324=\313\326\016>h\241\003=\343X\372=\316qe\276\251\301\332\275\1777\347=\271B\035\277G\254\020>M\370\274>\226Tq=R\337\310=\265v\004\271\333\216@>\364\241\013>\036\022C\276\177\010}>\230\206t\300\n\347\354\276\024l->\365\006\272>\304\346\245>R\2178?\335\226\242>\025Yj>\264\355\322\276\340\313x\276o\307\265>\377\356\246\276 V\321\2769\301\210\274\243{\344>\321,\177? ~\000>o#\240=f\001:>K\342Q>\277@\352\275\231\361\007?\274\272D\275\r\345\377\275\360K\024\276i\360\341\276~3P\276:8\353\276:\026\226\277\322\014\202>\227c@>\317\321E\276\332\336\245>\320SR?\256\025L\276\232\250\355<N\307`?\335\025\314\276~\200\323>\306\326\310>J\271K\276\334\275~>ir->U\300\005=\360\315\243\276m\230??X\033H\275\377x\206>\035\362\371>\212@\030\276\003\231\212\276\267\243I?\275W\202\276\254-*\277\317\221\003\277\361\347\202>e_#\276/G\364\276\003o\003\277{\326\005\276\260\352\'<\340\371:\274\267p\027\276h\211\333=\316P\034>\332\376\243\275NA\t>\00032;`B`>(8\362\274\276\032;>P\272O?\207R\226\276\270T\201@\301cY?.o\373>\264\325\210\275\252(\304>\337\354\023\277\002\271\276=\253D\270>q\207Y?\304\310\227>rL%\276\255\356^>\241\240K?\347\223\255\276_\207a\274\322\331Q>@\217^>\022\371G\274\323P\005\275\350\024\316>ye\262>\303\360\235>\251\332\r\274\240+\353=4H\253=VT5\276l\014\307>\235\265\206\275\212\342\212\274\311U\332\276\211\305\n=\337T\352=YGT>6\2536>\263\323\241=\226\033&>\301\005\220>bQy\276\314\316,>3\231\262>\252R\215\276\347\251\275>\274\037\233=3\231\025\276\201H^>E?O?\257\020\236>E]\275=\352\005(>\366\236\270\275\021\tg\276\010P\225>?\017<>\316\322\020\276p\234\202?\212\360\210?\362\250\201\276\342\372\320?u;<\276\337\376\'\277\336\026]\276\346\341\017\2760\207\225>\33137\276*\373\321\276,Z\240=\310\033\304><\204\361=\312\026\214\275\256T\230>5\310\022\277g%>\276\351\214|=D\037\245\276\217,v=\033\022\010\2766\305\303\274\223\365\237>8l\321\276\200\247$?\001\250\220?\362\221n?\211\353\"?\343\240 @\034\226\022?\377\355\003>u\246H=!\227b>tO/\277\371J\247?\314:\010\275\263\354\210=4\315\344<\235\217\003>vI\374>\356b\024\276\366\231\302=c.x=\001$\325>6\212\213>}\301D=[\275\332>^\2752?#+Q\276\211\214\216?B\305\002?\273\335\240\275.I\024=\2377)@\370\202\236?\231\324\362\276\357\373\r\276\347\244\300\276\272\270\032?\352\337\214\275\000\010\260\272`[\333=V\263\205\275\322$1\276\320|\337\275\027E\313\275\006G\003>*\027\n\277S\323Z\277\330{y?:\363l\277W\2565\277\\\226\257=\354\253B\277\260\346\223\276/@\027\276W\274\322\276/\204\313\275\242\310z=m\\\211?\214\254\265<9YQ?\220\230\022\276\373V\357>\251\251\215><\2755>-)\201>]\255\242=A\344\203<\357C\326\274\256>\n\276q\013\272\273r1\260\276\233\364#?\227\257\237>\240`S\276\005,\021\276\006x\326>\337\311\252=\222Km?.\'\316>%\270\277>(\305\232=L\250\004\277\351\017\003?Z\013\231>\340\207\006>j9\033>n\026$?95\025\276\260\223\230\275\230\301\"\2766?\314=\367\353@\275x1Y\2757\341\010>\200\225\207\273*\025w\276\203\267\211\276\3475\332>\266k\266\276\332\316|\273wxc>\234e\332=\353\316\265\275\370\3222>5:\375\275\003\306\312>\247\316\255>%:C\275\263\314\335\276%(J\276\273\314\210?\031e\013\276\022\270 ?\340\374\t?\315\270i=~\003\307\275\372T=>!\217\365\276\306)\230>\247\205\033?\007\234Q?&\240\233\277\246\252\351\275?\271\263>A\3240?\233\310X?\361\031!\275C\332m?o\354\037>/\205\t?\257c \276\tu\233>7\373H?n\227==4e\003\277\202\371H\276\311JQ>}h&<cr\036\276\314@[\276@I\014\277E\300\217\274T\224\246>\347t\343>\234\3236?\342\215\'>\303\332\257\274\251\322D?\026P)\274I\225q<\204\332\216>H\010\367<?\373\035\276\177\343r?\034/\021\277Z\271\256>\037\252\253=\273_i>\311\275\262>\220\016\270\277~@\233\276`;\367\277J\227\210=\036K\030\277ql\303\277\210\365\032=T\324\303=\270\277\364<\022\203%>\006\325\202\275\010\220\020>\220F\r\27604\351\274\345F%>\365J\227>E\271e\277\261\271I>z\212\273\276\245z{=\030\324\320\277\320\036\033\277\221\217\234\276\374\357\200?j\334x<K\326\340>\202\244b\276\231\216!\276\032@\264\2761P\276>\243\264K>\325z\024?\023\205\304>\304\376^>\257\216\207\276\301\004\250\275\206\0213\275\227\rl<@\177\356=/\331\027?\241\034\032?\255E\333\274\rh:\276\025^z=\214\210\365\2756a\027\276q\202~\276\244,\007\277\244@\304=\335\366]?\372/1?\212\257\025\277\340\241\327\276HK\315\275\246s\341=@\346\204\276J\013\026\274\242\372\274>\321\255\243>\333\343E><\253\034\276\350y&\275+|\023?\034d\220>\t\377V>\201\233\325>*\336\022?p\332/>\345\277G>\265\313\326>4\207y\276\237\335M>J6\202<C\313\353\275\036\224I>\n\255\341\276[\372\315\2756\307\343>\363\003\212>xq\217?n\244\003>\345{\317=\351\0016>\006\r\214>tb\260>\032\337\n?\005\333\233\275\337\207\203>\371-\203?!t\322\275\334\'\001?\374\372\357\275\377\353\002>\021\0162@\235\277\233>F\270=\2765\372 ?>\0316=\207\342\006?\021$+;\210C\002?/t\336<3\304\014=*\224\252>\330\255\265\276K\353\t?\336\316\026\276*\014\010>*s\301\275\t;\\?\303\311\342\275R>\006\274\t\\\275\276jy\275>\247\241=>\342D`;\377\272x>\014\021\217>\240\217\325\2760\260\031=\200Z\345>\276\235]\275u\375\250\276\224\276\312\276\317\231!\276\304\022\351>\354\262M?1\253\003?\330c\361>@\350\'?\312\037\206\275L\253:\276\331\356U?\324^\023>P\306\332=\330\230\222<\204B\201=\314\260\254=\250\304\357<|\303)>]\270\315\275\000\250\3159a>*:V\\\023?\205\245!=\206\220\001?\035\352U9\231\000\250>sZd\2764$\032\276\221\rK>!\265\030?\021W\277\274\2513\372\276m\226\036?`m\022\275\221)\370>\362\275\317\275\277\377\037\276\324:i>4\025\315>7\0003\276b\334j\276!\220n=\342\206}\275^R\330=\271\031\220\275\356\314<?75\375>a6\220>G\263Y\276\256\225\303>\205\031[\276\t\267\003>&@P?\2522\027=\300)9=\252\"\342=\'\334\265?Y\345\252=\362\230\255=\337m1?\346\331\023>\353\364\275=\000\016\267\276z\232\217>\001\253t\276\327`\033\274\201\2115\276&\320\024\277?\nG>I|\272>\376vK\276t)\037\277}\177J\2751i4\276\033.S>m\314\\>\370\341-\276lj\214>\223\240\211;\366\025\036\276\326\2700>\214\360\024?\034H\">\316X\017\277\241\253\251>\376\334o\276%\261V?\212\232\244>edK\277\362\227\211>\022\243\010?u\371\257>H\203\266\275-We\276v\000{\275 D\321\276>\232\316\277\332\237\240\276\nWC\276\253\222\274\2770\034\357\276B\374\361\275\007p\034\275\355d\232=R\344\321\276\333\005\005\275\203x,\2755\343\342\275\302\315\022>\345\260\274\277\030\003\305>\253L\007?\327`\363\272\234c\256\276e\032\264>\024\367N\277\306\206<\276|h,\274a\250H\277_\255+>\232\315\224>FV/\276\373Y\323\276\314\264\320\276B\035\376\276]\347-\276\226R:\276\357\023\231>7v\240\276\302\205\204>.\225\206=\350\216\216>\'\366=\277\016\006=\2773\326\026\3008\014 <\301\035@?\3726<\276\334\304\021\277\230\325L>\220\304w=\255%\261\275\306\271\246\275P_\331\274z8\227\275\310K(\276\362\270O>:\017\006\276\2114\336=\232\350\254\276\223\376D?\177\232@\277\365<\032\277\300\036\217\276\352X\035\300v{\241\276\230%\263\272\033d/\277\224``\276\231d\205=\t\357\037\275j\301\303\275\364\256T>S\312\007\276\275^\321>\000\"\032?\324PL?\225\023\037?\022\352w>\332\236\013\276\373\005~\275x\242\010>\002\315\267\274\001\253%\276B\003[?\313\214\361>?\305\274\2759S\261>\010\341\025\275\177~\231=\340\222\007\277X\024r>\347B\024?\334\315\315>\2318\273\276\037\341\364>\023\237J>\240\204\337\274vR\321\276\273t\177>\352\316\006\276\236\371\234>\263\221f\276J\307\020\274\204\352*>m\tN\276W,\022\276\205\t\013?Gj\001?\032S\013?\330\001\020>\344\254\301>$\374A>x1\235>rb<\276\220\224\272>w\3709\275\370\316\263=\300\215\377>\207y\022@\211\277\230=\306\205\r@:\373\321\276t\236\257>\2003\206>\222_U>5#\021>\363_\212\276\237T<\276\223O\177\276\356\231_\276*a$\275\305\014\016\277\307<}>\252\3213\300\3029o\275\007\306\355=\252\264G\300}\365\230>\034p\347\275\022\3140\277\236\325e\276ltO>\265\347\320=\277S\247>\307_\205>R\206%?v\260\267?\344?{\276\017\017\274>\365K\036\276\363>\331>\276z\307\276}\000\212?\307\261\033\275,\222\302=\335\320\020?\207A\267\275_\325.\276\343\343l\274 |\002>{=\241\276\237\'\033>3\200\035\276\230x\232\276_7\231;5Q\006<2\335\342=qZ\312\276\234\205z\276S]\007\276\330\007\020\277qa4\300\034W}\277x%\004=\311\244C\276\261\355\016\277Q\\K\277\274\353\035\276\274\340\021>\254}\240=\343_\322\275\256j\t>\222\025@>\224\360\024\276 \305\334\273cO\031?\224\362\373>\331\201\220>V\342\252>\302J\n??!\343=Ah\221=\\\377~\276n\334\336>F-\210=z\315\371<Z\213\000\277<k\017?\353{\030>\347\014\307>\031H\324\274\352\021,?\202%6?Y\251\213>\013Q\024\277q\272\337>\206\231\255>~O\210>\267Q\214\275Lq\030\276@\367\037?ZU\221\2748\350\000?j!F\276\305\205\360:v\374-=\236\203\265\276{\330\245\276\r\355\006\276\266|\374>\254\246_?\235\237\313>\322B\177\276L\223w\274\275D\276>\245J\326=\252\242\007?\346\353\362\276C\247\024>\367\276\225\276\251\002\347<\246\205\336\275\036\224\306\276\245x\273>\320\360Q>39\340>KV\023>7\272\035?\325P,\276\264\227\021\276e\370\346=\r\223\226\275\025\304\276\275G\340\307>6\037\024\276A\024{>\025%Y\300D\320K>r\351X\2769\r\376\276\023\t\214=/\373\220\2767hR=\232\215{>\312\360\262>\310\212g>\341\177\022\276.\t\255>\230\251\367>\244p\372>\2567\031\276:\352o\277\341#O>M\345I\276\305\372-=z_\025=\250h\272\274uL\034\277y\357F<\0142<=N\234\r>\371u&?\036\377*>\025\271\340=YG\254?2\323r>u\321\226>\372\226\034\274o\336s\276\325\215R?\3437\003\276\317_S>>\354\201=\266\314\211?\255\210\251=\347e%\276\270%\311=\312q;\276cEK>\267A\273\275X\000\n>\323S\207\277\007\354~>\005e\274\274\025\000\303\276\223uX\275M\0106\275\265\207\234\277\377\034\231?#\262\224\277\251Q\332>VG\321<\3679\371=\335d9>\213\320\215\276\340]\351\273\262\211\037> \364\314\273\350m\373\275\340D\230<\254\307-\276J\354;>@(\373<\273\360\021?\310\267\233>P\322;\277Y\267,?\2628Q\276\t%\'?^Z\302?\220F`<pp\002\276H\276^>\213X=\2765\256\250>O\343\214\276\250\202\367=MNN\275\300r\321=\'\204\214>\2524\350\275\271\347\031\2728\307I\276\321\253(>\025f1\276T\251\333:\013\312\347=\016\316\004>\341\320*\276\263\273\312>\353\236\357>\014h\231\275J\256J=e\227l\276 [\300>\374^\t?\371N\371>M\250Q?\261P\345>K\222\240\276\237\316\024?\267\177\377>S\246{\276\2321#=Q\355\220>\030\211Y\276\227\236\340=XJ\213=\362\367j\274\036\375\364=\013AE\276\346\036\024\276\276U\005?+\256\017\277T\260\032\277\325\014\324>>\211\277>r \021>\004\264{=W l\275@\0044\276\350\217B\277\356\354>\276\237{\223\277tUN?T\037\017\274\306m\013?\301\262\007\276v\005\r?\004\340}\277\271_\341\275}t\247>\255\257\241\276\352q\261\275\3721\244>\"\013f>\342]\234>R[\236\275\203\253\366=*P\244>\301\367\244=;e\014?^k\320?\025\220m=\355\005-\276\nh\375\275\020AD\275F[\204?\025\371\325=\004(\267\275F\026T\277\371Z\317=\307}\251\277\017m\312\277^\356\375>+\223\021\276\377\200Q>\323f\237;\314\256_\276\021\333\242=HpN>,\336\266<<\301G?\232\364\214>\276\201@=\352U\321\275\001hR>\251\216\276=\336\\\'?\236\234.>\324\367\351\276\314\217u\277\355\273@\276ld\003\300f\257j\276\240\013\327>\2503\201\275\006z\213\277bX\356\277t\023\242\277\261g\033=\377?D>PM\020\300P\324\027<\336i\032\276\240\361\345\274\363+\022\276\223\007\345\275\232b\024>\220\230\221=$\225}\275\224\3431>6\325\363>\204\275\217\276\274\361\227?\270vN>\312(\272?\241\261\\@oL\235>4\266\215\275\215\354$?$P\233=O\312\266>\031*.>78|=B16\277\034e4=\2545\003?\377\006\254>9Z\022\276\266\216\261>\273\023\026\276\205\350d=\257\244\031<b\355#\276sb^=$:r>N\274\004?\363\224!>\361&:=\260\014$=X\352\242=\007+0=\251\037\"\276\245\366\032\276\356\307\244>\322\332>?\257\004!\276*O;\276qWZ>\227\3534>o\305V>J\'>?\315\255\024>\035=\347=\347\325\300>\316EP>\022\247\366=\225\355\354=\310\217\021?`\263%\275_\217\203>\253\314\245>\200\270<?\001\211\030\276G\357\312\275V\203?\276\237F\377=\322Q\214=\373\017\345=\346\372K\276\251\321\354=\216m\315\276\010\347m>f\310\254\277\251(\025\277\355\225X?\036\"\r\277\306\374\n?o\322-?\006\250\310<]\344~;=\347\357\275\266\274\275\275\206\313f=^:\320>\\\260\240=\260\256\010?\025b\271\276JRy>\344:E\300\3653\232\276U;?\276|\363\266\276t\004\240\275){\317>\370 \322\275T\341\255\275,/\n\275\260\004\242=\333\0367\277\312\0342>\330\333d=\254\260\304\274\222m\215>\250-\024>?k(>T\2176\276>\270\252\276\221r/?\014\233\260>\206f\270\276\251\n1\276X\331R=\343\223\323\275V/\201=\031\261\331=IR5\276\211\231\346\276\270\024%\2772\033\354\275\364\313\340\276\363\241\253=\355\031R\276\350\332`>^\225\320>\235\252\030>;\n\252\276\2441\253\275w\326\316>\202@\255>]\267O\276\260\201\331<\222N\027>PG\265\274p\327J\276t E>\345\314P\276X\0069\275\325\352\245\275\203H\230>\330\257\254\276z7\265?\271,s\276\010\363\214?\247\n\323=\316\304\265\276\363\377\275\275\034\267\330>\363\234\203>\201\274\273>\222\337\246>\304d-\276\273PH>\364\214\227\275r)J>\3325;\277E\240\003?\013R\267?A\'\324>w\200\244\276\367\373\"\277\177\025\276\275?\352?;\261\332u\276\355\314\323\275\266\\??i\235\206=\016\300\177\276\027v\203?\376\241e\276\2152\000\276\376\200\263\275\3756\035\277\227\311\013>\314\234$\276\263;\225\276-\226\t=\353\246\002=rc\010>\202\256\220>\243\337Z\276\362\272\001?\207\2610>/+\216\276S\235Y>\r}\026\2767Fo\275\316:v>\334_\253\275\307\2340>\276\365\204\276\370\323\352\276\"\017)\276n\224\261=yi\375;\276\246`\276o\312#?\370\220?\276`\220\004\277\301\365\214;.\320\203\277\225\376\216\276+\312\240\274\302\313\326\275H\216\342\275A@t>r\257!\277\003\231\027?\3434]=X\223r\275G\017\262\276\355\301\376<\235\204i\276\352\230\304\276\243\217\251>\243:T>d\230\223\276\355\245r\276T\027\310>\340F\037\275\244\352\362>\350,\233\276\023\017,?\r\224)?D5E?\365\277\200\277$\3170\276\321\247\001\277\312\372\227\277\334\217\213>z\251t=\337\221\227>b\032\235\277\000\265!\277\"\240z>\331\357\004> \240}?\356Zw?\346\340\336<\330\005\214\275\304KM\276\260q\264<:\346I\275\352/O\275\316\026\003\277\353\0229?\013\371\215\275b\325\306\275z\004\003?\271]\215\275n\006%\277z\316\033?\233{\014\277N\235\253\276k\224\260?\243\363}=\032\214[?\306\203\272?\312Y \276\310\331\312<\030\234\r=\350\370B=\006H\024\276\034\300\221=\370\267-\276\000\"\032>\334m\266\276Tv\336>\262\212\214?oGt?y\372\000>\355\203??\376H\020\277=\334\254>+\230\374\274A\245\206\276\303\222\260>3\203\313>\326m\254>^d\237\276\230T$?\340T&\276\371dF?_\315+?\312z\210>$\230h<\266:\221>\352\230?\276\030\340|>\207+i>\321\206\347\275\'\004R\276\367E\271>\325\037\320>XU\323<\034\206x>\262b\021\276\026[\031>m \000\300\236\305\265\275\261_\214\276s\335g\277\336L)?I*\342\276\177\217\230\276\2257\r\276\270\326\350\275\261\225,>\037E =\346\006q<\256\223Y\275B8]>\005\005F\276V;K>\236 \202\276\221g\206\276<`{\275\250\316M\277F0<\276\215\265\363>\200\007\265\275\242gJ\276\246\223f\275Uo\265>\276\360\022> \rc\275\377\254f?\002]\202>%.\340<x\343\233>\020\357\006\276\362\347W>NW\364\276H@\007?)\221\252>\000\331d\274s2\302=qJ%>\353\250\335\275H\213\234\275\0228q?\023\331\242=>k\336>\234\330l\275\341m\006\276\271u\025\277\t$\005\275+\370\247=\027*\370\276C\341\304>\342\365\202\276\001\242v\276\325\351S>\310\237\242>\245\014\256=\321(R\300\311b\243?N\337\236>xP\002\276\202p\362=\373H\201?\000\204U\277yB\326<zFq=\202\227\324>\007\265\235>>|\351=\324\000\'=\257d\321=\3017/=\374\334\261\275\200\037f>\206H:\275\265\225\340\275e\003U>\r\237\277=\371\263\002?Y\037\005>]\t\244\274\376\306l?\305Z=@B\267\376?c\375Y>\3059\306\275d\346\014?\335\010\302?\350\314\315=X\236\272<\316E\017>\350\2048\276\302\311\220\275h\224Q\275\000up:\262QK\276D\352\003?\266\263N?\351\023\232?\264%\212?\t]C>\235i2?f\215\273>(\2045?0\306\247>\206\263\030\277\\6a\276\260S\222\276(B\347\276\03697\276$\202\242\277\202\212\036\277+R;>\246\n\342>\322)\310>\243\354\274>r\037\030\275\202\213\">\177o\001>P\007\277\275\216P\031=\036\256s\276\366]\323=\333\370C\276+\016\347=\361_\023>fi!\276\271\211+\276Vx)?x?\t?\366\2716>\0034\017\277\245\224\363>\014)\010?6\017\233=*U1>\006e\204\276\335\344#? \231\377\275\307\336`>\032\354\272\276\322E>\276\355\323\222>5\177\007\276\344\210\346\275\375\356_><\243\214>l9\354>\013\206\316\275\277\244\212\276\315\344\010\276\215\014\005\277\375\262\270=\255\244\221>\252\373\361>\246GI\276\326\300{>\013\234\335\275\'\033a\276\rg+\277?\001<>IOs\276\364c\314>:\350X>\210p1>:h\241\274\371\211K=\\\231\033?d\223\222\274\3576\217\275\010j\304>\334\037\271\274\275A\306=\226\335u>v\255\234:\312\014\274?{\356`>\345p&\276\306\2117\277\227T\357=F0\001>\225\004d\275\321\232\020?KX#?\277^&>\016\277\215\276R\342\367>RgH\276\320\207\210\275\271U\245>\023V\027>3\246\023?Pi\322=\322u\236\275\325\330\357>\026WC>\307ZD\275up\270\2752\347\225>]\"\031\275\355\274\260\275\322\341\265\276\306\325u>\360o\262>\022x\033\276\0308S=\271\006t\276A\375\336=\235\374U?\032\201\'?lF\341?)\202z>\031<\014>qV;\276i\177n\275\3074H>0\327\334= \332\250;wm\307\275\236\353\353\275`C\236\273\030x\304<6\313\025\276`.\266\274\201\nF=K5\316>\212\363q\277\347\323;>\206:5?G\225\243\275\010\365\276\273T0\373\275>\232\335>T&\375>7lB\276\252\036I\277\224+\351>\263S\260\273Zb\026?\233\371\310>\263I\344\276\263|\022\277X\020\310>\203\032`\276\377V\202\276\276>\223>\3644\026\276\030x\263\275\000\201B\275\216o%?\333\t\321>\261\250I?{\215T\275\032P\200\275\323|\014?\200s\0026\321\216\006\300\240\215\245\276\003\344|=\376\355C\276\023\034\247=\026\265\030=~d\223=\305{\365\275V)\357\2766R\353>\270\367\325\27408f\276&r\364;\215\310\224\275\225\241b>\361\351\345\276/7?<>op\275MN\330\275\270\323\204>,\323\350>\\\232\'\277p|\204\275\352\325\255\276\223\302\265\275\310\311c\276\020\377\007=\376\272\237\275\251\027\271\276\351\352\331\276I\262a\275oJ\230\277V\td<L\351(\277\316\313\335>p\211\237\276c\331\032>\260\232\023\277~\t\007\277\331=\362>Nv?>T\265i\274w8d\275\371\027\230>\360\347{\277@\031\005\276\033Hb>\226\023J=\331\260\270=\320`\220\275aA!\2775\317\001>.\035\323\275\005|\330>yR)?\217\3656?$\204\213>`\342\300?\356T\274\275\313;T>f\230\221=\016\343H=\273q\213\276\277U\220\273\3630\306\275\351\324\310\275\203\220\033\277\036#>\2743\037\253>\340\200\252<ZA\204>k\240\212=\022V\317>l\000g\276\376.\223>\205\"L>\300]\360\274\035\267\246=\003\320D\275\001\204\340=\337\024\217>T\375\256\276\244\265\361?\241\215T\277S%\242\276\221\236G=\222j=\276\030\021\035\277T6F\276,\014\311=&O\027\276w8 \276\200E/>\014B\372=l\313\374=\3647\034\2751\304\253?Ird>\345\340\331>\244z{>\226\266\333\276\367#\374\275%B\207\275[\2642\2766\303/\276PW\203>\231\203j\274\334\021\273<4\004\344>\301\365\335\275\334\314\t\277\271\211 =\3675\004?\316g\251>\366=H>F\325;\276\374\217}\275\006vv\275\t>L\276j\265\272\275H*\347\274\212\213\202>,\226\232>N\373\347>e\236\265=\272~\030?.\345i\2759f\264>\361^\263>\026\'\301>\351\250\024>\206\307\005>\274\271\266?b\303B?\235\336=\273[\002\366\275d\002\t\277\216 \007?\240\026\244\275\361\252\311<!\241\007=V\235\211>\030\354\264\276{\023\234>H%m>\346e\013\277/\316\320\276\003\230\205\276\256\336\356=H\037o\276\000\326\303<+1\005?\2108\304=\225\263\366>\250\276\213\276@\263\000<\234\3722>\275\335\312?\352L\311\275\350\325]\277\377Z\242=LV\322>\230n<?\322\212\273>\352\371m\276Y\224\227=\201/\226>\347\000\230>\025\240\374\275bP\266\274\272@\337=\t5\302=\372)\361>\202\361\236>sh\301\2767\0013>a\350\271=\304l\270=\311re>cC\225\276A2\310\276\273\331;?\331\025@\277(\370l\277\t\337\342\276o3\257\276\350c\225\276\246\275*?\335U\211\276?\304\254\275\377L?\277\310\020\263\277\237\311P>\375cN?-H1\276\325\3232\276\020\016,=\321Q\t\276\314\322\032\277-Z\337>f\027\240\276\221\3006\275\267+\236\276hg,>\210zm?o\0139>\221\371\311>6\242\347\276\246}9>y\317E\276O\036/\300\365E\002?\341?M?\320\242\237=\227\242\034\277C\247\357\275>\311\266\2750\010\224=\036S%>\270\330\035\275\264\2757>\374A\367=\330#v=L\373\334=m\306\237\276\r.\263\276Z\036L\277\2438G\277\250\007\\=\252\204b\275\\\324V>\244_\245\276lx\360\275\310\241\253>\334\254t\275)\321\257;\037\304f>\310u?>\373\230\312=F\321_>\0036\354=p\\\310\276\361\023o\277x\244p=\265\233b=\202\2019>1\377\204>\3278\333<?)\234\276\302\004_?\225\317\327\276\013E\321>#+\210\275\210\223\216=h\024\224>\360\340K>\220\233\215>\022F\202\276\2076#>-\244E?l\262.\276AS\007\276\330\343l=\236J\025>,`\200>Fu\250>\000\320\362=5 \274\274\222\335\346=\252\303\266\275\036M^>\244\325\034\276\004\344\321\275\242\344\260\276\233I\'?\000\\\273>\364\263Z\274\332\225\210\275\037\243\343=\007/\013\277\205:w\276\265\246\257=\352P\307>\330\003\353<~\304\256?\316\371\237?6\204\310>\254\027\212\277y\317\305>\375\335\024?\362\334N?\024U\224=\002\251\333>\273G2>#\0020=\355\251\276\276\240\373\004\2750\365\302\276j\213E?\365\322\206:\313\314\346>\225\003\301>\200@\243\275!\365\t?*\271z\276*\177\355=\177\374z\3000r\363=6\237\323\275\010\360\274\275\355\016\255>4#\357\276\342\004p?q\354\336>\244;\n@\340J\352\275\247\005\316<\331\202\002?\215\272,>#\232\231;\351\277\024>!9\347>\000C\346>\"\214A\276f\236\303\276]^\014\276\315P\355>\305\221\207>ve\036\276\317\026R\277A~\037?c\0027\276\260\274\240\275\337D\325>\000Z<>R\031\311\273\0211J?\3512\364>\025\317q>\245\225\010>e\301\230?X\331R\275\n\246\177>\323\010\r?\25030\275D&G\276\244\221\234\275\03009\275\310\241\037\276Ph\021\276\340\257h=\010\t\016>"
      }
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "(}f?cM`\277B)8=8P/\300 W\000@\2631\026?\376\243w\300A\352\206>\022\375_\276&\253<\277\270\026\023?|\020~>\032\367\352\276\367\235\233>|~\222\277\026\374\255\276\023\256\017>|%\022\276\333\360\024\277\253\211.\276H\327\327>/\311\215\275_K\032\276T\177\356>\236\307\235>\2159x\277Z\250\330\276GV\222=\376\263x\275\253\222\351>y\n\224=\260\263[>Y>4?U\201\214\275Yk#=\254P\252\274f\026\357<d\350\253\277\333\267E?\241\217&?ALY?\367;\034?8\nE?oo\037\277\362\211%\276@\361\266>\327\246m\276\003\331#?=1\035>\325a\224?\235\014p\276\331\264\275\276\306\221\035\275R\021\022?r\354\024>\253>\r\277T\302\203\275\360\014q>*7\030>\000\000\000\000>v\003\2772u\273\277\365\t#?\202\247:\276\'\274\305>J\336T\277I\017X>-r\005\277\227\327\233\276J\371\230>\255\350\340>\236h\261>\201z\376>>\025x\275\017|J=\004\252\020\277_;4>\201b\267=N\267\036\2775\340\352\276\001\360\321>\327\204\206<z\223#\277\270\273\327>\227\255\017\276\347\300(?a\2221>\200\314u?\337\331D?\330\234\026@\352a\263\276\0060\r>f\253\312\274\326\362;\275[\344\022\277\230\201\036\277\376\342\322=\264\352\333>W\022)\274hv1\273\010\270+?\033`H\274Q\202\376>\256\335b?E \177>L\231+?\3155\334\273\251\246#>c\026\224?K\000\356>\302\'\203<\306j\'?\321F\007\277\177y\274?\353\231\000@EXP\277?{\224?S\201%<\276C\002@\232\327\342?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\354r}\274g8\207>\226\300\353=k\300\225\276.\302\203>c\225\240\274\234t\035?\272\342r>a\272(\275\377X@?\017\367-<N\002e>T\327\316\276\303\354\344=\\t\363>\037\341\366\276\225\255\021?\005\302\">\313V\267=($\272\275\025\373\251;>\323\210=\035;\320>\207\243\242\2765\370\243\276[\333U?\316\n+>=I7\275\264\371\002\2779\206D><Z\222>@\357\370>?\212)\277\'\224\242>\211Ji>#\233J\275hA\350>\274\030\017>\002\303\007?\376PZ\276-\367\266<mf\312=\261U\025>4X\030\276\027U\303<\035\343\206\273\223\375\016>\326\246\204=Q\005\376\275\233\262\236>\367\331e<\300\242\345>i\204\024\276\211SO?B\306\370\275\301\207\360\275\023\236\250\277\032\304\242\276u\255\364\276T\340{?\026\026\225>z-\324\276\343+\333=W]r\276\334\030\340\276\327\336\013>Q\010\023?D,\341>\007l~\276=\030+>\354\013\374\275\214\216\246>\324M\266>Kah=}H\370\276\264V3\275\334`S>\270!\373>\003\300\350>\334\335\211\275\"\212}>\246\331J\276\234\327/=@\212 ?\271\022\333:\273m\256\276\0254\346>\0179\215>\227\027,<c\022\203>\310h\311=\324\250\017?\177\331\245=\000\035\335=\013R\240>k,\306\274\024\227\261>\375\375\221\276!\361n=7\241\321\275@\227I\277\270\350\000\275|\027T>M\344(\275\243t\022>\242\343\023:\207W\256\275\372\320\364>E\217\315>\200\226B\276\307\'\201>;\037\262>KNg\276\272\247,>v>\362=\317\035V=P\356\215>\001Q\345=(@\253>\026\037(<\247\367B?\347\370x?\346\217\231\276y[\221?\207v\017\300\0237q\277~\031O\275K\236\254\277 \215A>\200j\223\276\0052\244\276\357\003\031>\217\315\340>>\376\211>4\203\222>\3110\n<\272\377\360=\271Ul\276\371\243\002=\215\273\305=\303\370\346\275&\2522\276>\201\034?\340\026j=\365\031=\276\305{B\276\356\231F>\3300\227=+(\022\277\325\340/\275\032_\r?\3061\n\276\314\003>\274\210X$\276\303\253]\275]\233B?\325\231\206>\263\222)?\300\212\226>\350gn>\233\254\226\276)+\335\276\3638\020>\205\000\316\275\2740\225>\247\211\027?\342P\016\277\225\360\374\276(\035\356=g\tb\273\226\373\231>\'\214\240\276\023\345\347=W\313<\276\037\275\344>Y\261\003>uK\201\276x\376\221\276h\301%\2779\246\262<\'v\376>\254\367\332>\224\023\302>\372\360S?\002$\254=\204:\362\275\225\003/?A\230\303>WK\014?\370.K>\232n\301\275\356YT>\"\016\226\276\034\275\245>\260U\267>2\214\225>^\255\267\275\317\204N?\272\374\030>\037\016&?\252\257\271>\333q\261>\261\'\200>\341\274\031\276\346y\235=\220\313\372\275\nf\013\275^\3007\276\212\233I>2`\231>\315\206\311>\022\266\251>d\363 ?\001\315\003\277ng\t>\322\355\377<\331\034J=\241}\347=f\221\252>\363qq>J#\371=w\225\375<\347\325\001?\005\211\021?\334\200\237\276\n\214@?\000\341X\276ok!?\027R4\277UK\237>\235\216\261\275\020\366\003?\2740\r=\252\310|>z\360\n\277\306\013\234=F\237\025?c\277\307\275\266G\002?\001S\032\277\016\306\302=\036]N>\030\254;>_\362\220>\206\211\0019`\324\363\275.\202\247?D\331\201>\0069\030\300JQ?\275\237\260\317>\265j$?\351\026.?\2675\222\276\350\320\216=V\357\334=\"\335\330>\244\253\320>\265,\357>\276\nu\273\3666\245\274t\362\305\275\262\233\307=\013hi\276\2368\204\275(\217!\275\306\271\037\276#)\177>\024\023\257>$>\257>)\n(\275\204C\t\276\220\310\t=\313\216\216\274\226\336\204\274\326l\301\276\276\no>I\004\034\276\273!\307>\210\215\317\274\035D\231;4\242s\2777\211\333>\253?\004?\244\021\330>\355\206\332\275)a\240>y$D?LE\377\274\245S\022\27615\247\276 V\246>\331.\341>\276\014\310\275zr\232\276\\f\325\276D\273>?D\003.\276\211B{\275N&\200>\024\t\264\276\342X\246=\310+);R\326m?\312\376\262=PwT>\233\265\365=\302\201`\275\223E\016>\3409\207=E\017A>\035\004\354=\255E|=\203\331\204\277\t\257\017?S\324\223\276\021\205\321=\376\251\021\277\200\026D\277\342\037J\277\034\371\326>A\330\225\276\264\027Q\2770\242\217=?\215D=\220\002\317>\242\231\370>\214\2231>r\230E?\364s#\276\314\370\331:\356\003\231>\204$a\275M\024\347\276R\306\314>p\363\213=W\354\353\275\354\246s\276\342\027\215\276\201\264\342>Yu\201\276\003\265o\276\335\314\r\276\235\317\363\2764|\303>>t\345<\312!z\276V\331\007>\244\330\026=\273V\206\276\213\372\271<\030\263\364=j\340\014=\030f\254<\224\306\252\275\022\3267\276\306\300v>\007\337\001?\203|\207\276\023s\231<\241v\006\276\031\306\333>\2556\366\274\005\005\232\276#\250\221>\335b\305\276I\203\307\276@\"\033?\373\304\205\275[vR\276\003\274\326\276\252LG\276\265\271\306<\347j%>\231\327\244>\366,\323>\034\311\314\276\201\337\246<\217\242v\276\332\203N\277E\210\347\277\364J:\277\002V\217\277\323\"\003\300\001\211\201>~\033B>\237%\004\277\342\235\250>\326\323%\277\200\201~>\020w\331>:\375C>\226\301\035>\231\341\326\274,C\032\277\306\336\243=\251\301\035\276\030c\346\276\306lk=\317\207\214=LE\227\276\301;\245>\366nO\276\004\376U>&\230\002?>\343\317\274\266*`>Nm\020>\t\206\324\275\253~2>\032\233\236>`\371\264\276\277\247\003>\367Gw=\200\301P\276\370\304.=\370J4\275\313\213\217>g\360\301\275\270\336\203\275\244\020\032<\2742\013\277\325\253\264\276=\337\364=\321L\276\275\325\007\024>~\243\231\276/\312\014?\000\007j=-q\022\276b{\227\274O\240\201>\355lJ>\230\344\242>\272\343p\276\036(5>\003S\246\275\260\370\237\275O\251\t?U\313\335\276\315\031m\277\213\220E? \253\301>|\002\255>\275\301\207>\236\372>\277 O%>\246n\235\276@1/>\315\016\223\275\310\372\325>\231%\'>\322CW\276\343\377\023\276s\034\300=\322\037\027?\271)\t>`\251j>\223Ch\276$\004L=H\260\212>\220\305><P\303f> \200\007=F\'\335=\013\264d=\231\236\302>\236\034\031>\314\220\314>\217\272\331>\273#\001?\206\210\350\276\343Q\345=\203\033\004>\305\252$=z\275G\274$\243\207\276|&\260\276\033\357\234>\307\177\'\276\211t\014?\365=t\275\253\206\'?A\253\375>\206Ut=\364=\200>Z\3358>\340\035\337\276d\031%\276\224D\341<\364n\304\276\020\332\022\276\206\345\002\276g\270\301>6W\221>\207\225e?\310%\004\274H\224\347>[\022\242<y\376\003\276\016:\352\275\2709\334\276\027\265\333\276\017C\240>\366A\204?t\245\000\276-\271\221\275\344\350?\277\276\311\225>,\246M\277\002&\315>h\263\027> \'\333\276wE\226\275+<7?\336N]\276\332\331\\\276nr\016\275\017\342\\\277\324_\324=\"\261\331>3w\223=\273}\362=~\356\304>Vb7?\231\215B\275f\306\254>\221d\210>L\344\272>2\005\035=\375\212\235\274\357{=>\3545\221\276\374\236=?\007F*?1\240\251>\327\377T>:\177\245\276h\333(\276\310@\205>I>x\276\357\035\332>5\"\315>/F\037\276\232\210\254=\331\277\220>\244\357\257\274\207\313\376>\361\265\026?\2566\305>\365\027\007\276\210\254\350=\244\247C\276\0034y\275\306\233\274<V\2149=4 \272>\007\242`=\217\014\273\275J\265\210\276J\031\273>\264T\272\274]\341\023\276\264z\013?\301\237\217\274\343`$\276Z\256\231>\332\024\314<\013|P>t\376\225>G\336y\276\031\024+>\3327\276=\366-\327>\310\267\337\2756\007w\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "8\243d=N\317\230=(\326\347>\224\313l\2762\"\375>\213\314\030\274\244\272\303\276d\371\327\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\220\2344>:\237\345\276C\353\331>\004\014^>\006\264\374\276#\311\250>\234\251\233\275S\271\210?#(-\277\203\331\'\276\335\020\025\276\325\324\024\277X#\026\277|\302\264\276\254%\320\276\377\344f?vv\013\276e\354\350\276\267\252\224\276!\252\332\275\026}\241>\277\2154\276.8\027\276w\207[?cL\326\276@\352p>\311\203z<\262\177\000\277\374`\310=/\221\235\276\000}\027\2769\002\275?c>\024\277>\267\005>\003k\270>pu\264\276\2044\351\275\rR\036\276\356R\020\277x@\215?4\336\374\275\205N7\276\311\200\322\276Z\221\314\276j\216\306\276\003\334\013\277\306\263\344\276#\'\220?\340\026\330\275\212=L>\327\004\272\276\202\036\201>\274\313\010\277X\300\030\277\231\321\301<2\265\207?\271\301\244>L\007\241=Ms\261\276\267>b=R$\231>A\354\342\276\016b\306\276x\214j?\322\313\010\276\204\225\223>\275\313R\276g\340H\276\024\345\243\276\344\343\333=\340\332\343\276\366E\374>"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.48313459753990173
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense/MatMul"
  input: "decoder/dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense/Relu"
  op: "Relu"
  input: "decoder/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/reshape/Shape"
  op: "Shape"
  input: "decoder/dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/reshape/Shape"
  input: "decoder/reshape/strided_slice/stack"
  input: "decoder/reshape/strided_slice/stack_1"
  input: "decoder/reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/reshape/strided_slice"
  input: "decoder/reshape/Reshape/shape/1"
  input: "decoder/reshape/Reshape/shape/2"
  input: "decoder/reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/reshape/Reshape"
  op: "Reshape"
  input: "decoder/dense/Relu"
  input: "decoder/reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Shape"
  op: "Shape"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose/Shape"
  input: "decoder/conv2d_transpose/strided_slice/stack"
  input: "decoder/conv2d_transpose/strided_slice/stack_1"
  input: "decoder/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose/strided_slice"
  input: "decoder/conv2d_transpose/stack/1"
  input: "decoder/conv2d_transpose/stack/2"
  input: "decoder/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose/stack"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose/conv2d_transpose"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Relu"
  op: "Relu"
  input: "decoder/conv2d_transpose/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/Shape"
  op: "Shape"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose_1/Shape"
  input: "decoder/conv2d_transpose_1/strided_slice/stack"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose_1/strided_slice"
  input: "decoder/conv2d_transpose_1/stack/1"
  input: "decoder/conv2d_transpose_1/stack/2"
  input: "decoder/conv2d_transpose_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose_1/stack"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose_1/conv2d_transpose"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_transpose_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "^decoder/dense/BiasAdd/ReadVariableOp"
  input: "^decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
