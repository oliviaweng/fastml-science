node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "encoder/encod_qa/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_act0/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 512.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/input_qa/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/input_qa/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 511.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -512.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 512.0
      }
    }
  }
}
node {
  name: "encoder/flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
        }
        tensor_content: "\000\000\260>\000\000l?\000\000\360\276\000\000\330>\000\000\206?\000\000\000\277\000\000 \276\000\000\330\276\000\000\250\276\000\000\300\275\000\000\240=\000\000\320\276\000\000P>\000\000`\276\000\000,?\000\000\210\277\000\000\200>\000\000\204?\000\000\000>\000\000\340\276\000\000\200?\000\000\270\276\000\000\014?\000\000\260\276\000\000\350\276\000\000\200\275\000\000\020?\000\000\310\276\000\000\350>\000\000\270\276\000\000\330\276\000\000\014?\000\000\350>\000\000\020>\000\000\350>\000\000\200\275\000\000\\?\000\000\244?\000\000D?\000\000\200>\000\000 >\000\000\220>\000\000\014?\000\000\340=\000\000\320>\000\000\014\277\000\000\000\000\000\000\000>\000\000@\277\000\000P\276\000\000\320\276\000\000\000\000\000\000\230?\000\000\220>\000\000\360>\000\0008?\000\000,\277\000\000@>\000\000\000=\000\000\320\276\000\0008?\000\000\330\276\000\000@\275\000\000\230\276\000\000\260\276\000\000@>\000\000\300>\000\000\200\276\000\000\000\276\000\0000\276\000\000\000?\000\000\230?\000\000\000\277\000\000\260\276\000\000@\275\000\000\330>\000\000\230>\000\000\034?\000\000p\276\000\000\220?\000\000|\277\000\000@\275\000\000\000\275\000\000\000>\000\0000>\000\000\342\277\000\000\270\276\000\000,?\000\000h\277\000\000\230\276\000\000\350\276\000\000,\277\000\000\200>\000\000h?\000\000`\276\000\000\000=\000\000P\276\000\000\350>\000\000\024\277\000\000@\276\000\000`>\000\000\376\277\000\000\340=\000\000P\276\000\0004\277\000\000@=\000\000\030?\000\000@=\000\000\000?\000\000\234?\000\000\000\000\000\000\230\276\000\000\350\276\000\000$?\000\000 >\000\000 \276\000\000\240=\000\000\340\277\000\000\320\276\000\000\020\277\000\000$\277\000\000\000=\000\000\300\275\000\000\010?\000\000\004\277\000\000\214?\000\000\300=\000\000\240>\000\000\200\276\000\000\024?\000\000\014?\000\000\000\000\000\000p?\000\000\210>\000\000@\275\000\000\200=\000\000\200\276\000\000\200<\000\000X\277\000\000\300\276\000\0008\277\000\000\004\277\000\000\000\276\000\000\310>\000\000`\276\000\000\010?\000\000\200>\000\0000\276\000\000\216?\000\000\200<\000\000\220>\000\000\220\276\000\000\240\276\000\000\020>\000\000\200=\000\000\200\275\000\000\240\275\000\000\340\276\000\000\300\275\000\000\230>\000\000\310\276\000\000\350\276\000\000\240>\000\000\340\275\000\000\274?\000\000\300\275\000\000\000?\000\000\200\276\000\000t\277\000\000\014?\000\000`?\000\000\310>\000\000 ?\000\000\250\276\000\000\000=\000\000d?\000\000\270\276\000\000`\276\000\000\200\274\000\000\000\000\000\000\242?\000\000\220>\000\000\300>\000\000\220>\000\000\030\277\000\000\210>\000\000\000\000\000\000\000=\000\000\260>\000\000\350\276\000\000\240=\000\000\200<\000\000\206\277\000\000\010\277\000\000\370>\000\000 >\000\000\240\275\000\000\200<\000\000\300\276\000\000|?\000\000\200\274\000\000\240=\000\000\220>\000\000p>\000\000 ?\000\000(?\000\000P>\000\000\370\276\000\000\270\276\000\000\310>\000\000`\276\000\000\240>\000\0000\276\000\000\304\277\000\000\000\276\000\000\320>\000\000\240>\000\000\300\276\000\000\340=\000\000H\277\000\000\330>\000\000P?\000\000\200>\000\000\216\277\000\000\240\275\000\000\350>\000\000\240\275\000\000\240\275\000\000@=\000\000\344\277\000\000\020\276\000\000@\276\000\000p\276\000\000\200\274\000\000\000=\000\000p\276\000\000\200\275\000\000\214?\000\000\000=\000\000\370\276\000\000\030?\000\000X?\000\0000\276\000\000\220\276\000\000\000=\000\000\000\300\000\000\200=\000\0000\276\000\000\360\276\000\000 \276\000\000\214\277\000\000\240\276\000\000t\277\000\000\212?\000\000\240\275\000\000\000\275\000\000l\277\000\000\004\277\000\000p>\000\000@>\000\000\254?\000\000@=\000\000\300\276\000\000\000\276\000\000\220\276\000\000\360>\000\000\330\276\000\000\320\276\000\000\240\276\000\000\310\276\000\000@=\000\000h\277\000\000\310\276\000\000\300>\000\000\000\275\000\000`\276\000\000\200?\000\000\240>\000\000\310>\000\000\030\277\000\000`>\000\000\270>\000\000\340\275\000\000\210>\000\000\004\277\000\000\300\276\000\000P>\000\000\250\276\000\000\340>\000\000\200\274\000\000\320\276\000\000`\276\000\000\274?\000\000\200\275\000\000 ?\000\000\000\276\000\000p\277\000\000\034?\000\000x\277\000\000<?\000\000l\277\000\000p\276\000\000\000\000\000\000\320>\000\000\340=\000\000\200\274\000\000\240\275\000\000\000>\000\000\242?\000\000P>\000\000\270>\000\000\020>\000\000\020\277\000\0000>\000\000\000\277\000\000p>\000\000\270\276\000\000\330\276\000\000\230>\000\000\300\275\000\000\220>\000\000\200=\000\000\020>\000\000\034?\000\000@\275\000\0000>\000\000\020\276\000\000\202?\000\000\300\275\000\000\004\277\000\000\240\277\000\000D?\000\000x\277\000\000\014?\000\000l?\000\000\340\276\000\000\320>\000\000@?\000\000\230>\000\000\200\275\000\000\320\276\000\000 \276\000\000\240\275\000\000@>\000\000 ?\000\000\340=\000\000\300\275\000\000 ?\000\000\350\276\000\000D?\000\000\020>\000\000\034\277\000\000p>\000\000\000>\000\000@?\000\000\200<\000\000\000\276\000\000\216\277\000\000\034\277\000\000\020\277\000\000\330>\000\0000>\000\000\340=\000\000@\275\000\000\200\276\000\000h?\000\000`>\000\000X\277\000\0008?\000\000\200<\000\000\024?\000\000 >\000\000\000>\000\000\240\277\000\000\260>\000\000\340=\000\0000\276\000\000@\275\000\000\370>\000\0000\276\000\0000>\000\000X?\000\000\220>\000\000\350>\000\000\240\276\000\000\020\277\000\000P>\000\000\230\276\000\000\224?\000\000\000>\000\000H?\000\000 \276\000\000\300\276\000\000\020\276\000\000 \277\000\000\200\276\000\000 \276\000\000\340\276\000\000\200\274\000\000\330>\000\000\270>\000\000\200\276\000\000\000\276\000\000\200<\000\000\242?\000\000\300\276\000\000\320>\000\000\340\276\000\000@=\000\000\030?\000\000\200\276\000\000<\277\000\000 \276\000\000\220\276\000\000\000>\000\000\204\277\000\000\240>\000\000\000=\000\000\340\275\000\000\340\275\000\000\244?\000\000\200\274\000\000\230>\000\000\300\275\000\000\360\276\000\000\360>\000\000\340\276\000\000\200\275\000\000\230\276\000\000\230\276\000\000\240\275\000\000\320\276\000\000\210>\000\000 >\000\000\240\275\000\000@=\000\000\234?\000\000@>\000\000\220>\000\000\340=\000\000\004\277\000\000\200>\000\000\360\276\000\000\000=\000\000\250\276\000\000\300\276\000\000@=\000\000\220\276\000\000\000=\000\000\000>\000\000\330>\000\000@\275\000\000\020\276\000\000\300\276\000\000\000\276\000\000,?\000\000\000=\000\000\300\275\000\000D\277\000\000\270>\000\0008\277\000\000,?\000\000\020\276\000\000 \276\000\000\310\276\000\000\000\276\000\000H?\000\000\320\276\000\000\310\276\000\000\000=\000\000@=\000\000\034?\000\0000?\000\000@\275\000\000d\277\000\000\300>\000\000d\277\000\000\020?\000\000\230\276\000\000@\275\000\000\300\276\000\000\000\276\000\000\226?\000\000\210\276\000\000\220\276\000\000 \276\000\000\230>\000\000\020>\000\000\310>\000\000\210\276\000\000\030?\000\000\240>\000\000\300=\000\000 ?\000\000\300\275\000\0008?\000\000\000=\000\000\004\277\000\000\204?\000\000\270\276\000\0000>\000\000d\277\000\000\340\275\000\000\200=\000\000\030\277\000\000\300=\000\000\030\277\000\000\010?\000\0000\277\000\000L?\000\000\210\276\000\000x?\000\000\370>\000\000`>\000\000\200\276\000\000L?\000\000\000\276\000\000@\276\000\000\246?\000\000\210\276\000\000\300\275\000\000\340=\000\000(?\000\000\000=\000\000\000\000\000\000\200\276\000\000p\276\000\000@=\000\000\220\276\000\000\000\275\000\000\200\274\000\000\204?\000\000\240\275\000\000\024\277\000\000\000?\000\000\270\276\000\000 \276\000\000\340\275\000\000 \277\000\000\020\277\000\000,\277\000\000p\276\000\000P\276\000\000P\276\000\000\020>\000\000\340=\000\000\200\274\000\000\034?\000\000@\275\000\000\300\276\000\000@>\000\000p\276\000\000\230\276\000\0000?\000\000\014\277\000\000\350\276\000\000$\277\000\000\000\276\000\000t\277\000\000\024\277\000\000 ?\000\000\000=\000\000P>\000\000\020?\000\000\000\275\000\000\000\275\000\000\340\275\000\000\340=\000\000\370\276\000\000x?\000\000$\277\000\000\270\276\000\000\020\277\000\000\240\275\000\000\200\277\000\000@\277\000\000\200=\000\000\300\275\000\000@>\000\000\300\275\000\000\340\275\000\000p\276\000\000\000\000\000\000\000\276\000\000@=\000\000`\276\000\000@=\000\000\220>\000\000\000\275\000\000\200\274\000\000@>\000\000\220\276\000\000@>\000\000\200\276\000\000\200\275\000\000\020>\000\000\220>\000\000\000\000\000\000@\276\000\000\200<\000\000\000\275\000\000\000\000\000\000\020\276\000\0000\276\000\000\300\275\000\0000\276\000\000\000=\000\000\240=\000\000\200\275\000\000p>\000\000\000=\000\0000\276\000\000@\276\000\000\240=\000\000\340\275\000\000\220>\000\000\200>\000\0000\276\000\000\300=\000\000\020\276\000\000\200<\000\000\000\275\000\000\240\275\000\000@\275\000\000\310\276\000\000\240\276\000\000\020>\000\000\340=\000\000\340=\000\000\020>\000\000\000\275\000\000@=\000\000\000=\000\000P\276\000\000\020>\000\000\220>\000\000\240\275\000\000@\276\000\000\300=\000\000\260\276\000\000P\276\000\000\030\277\000\000\340\275\000\000\262?\000\000 >\000\000 >\000\000h?\000\000\330>\000\000,\277\000\000\000\275\000\000\200\275\000\000\300\275\000\000@=\000\000\250\276\000\000\000>\000\000\240>\000\000\360>\000\000\200\275\000\000\330\276\000\000\254?\000\000\200\274\000\000\340=\000\000@?\000\000\310\276\000\000\200\274\000\0000>\000\000\000\276\000\000\360>\000\000D\277\000\000 \276\000\000\000?\000\000X\277\000\0000\276\000\000@?\000\000\330\276\000\000\200>\000\000\220\276\000\000\270\276\000\000\020>\000\000@\275\000\000\020\276\000\0000?\000\000T\277\000\000\300\276\000\000H\277\000\000\300\275\000\000\274\277\000\000<\277\000\000H\277\000\000\320\276\000\0004?\000\000\220>\000\000P\276\000\000\340>\000\000 >\000\000\014?\000\000 \276\000\000L?\000\000t\277\000\000\014\277\000\000H\277\000\000\310\276\000\000\322\277\000\000P>\000\000\300\275\000\000\270>\000\000\200>\000\000\020>\000\000\340\275\000\000\240=\000\000\200>\000\000\340\275\000\000 \276\000\000\240\275\000\000\000\000\000\000@=\000\000\300\275\000\0000\276\000\000\000\276\000\000\300\275\000\000\200<\000\000p\276\000\000\230>\000\000\200\274\000\000\240\276\000\000`\276\000\000@=\000\000\210\276\000\000@=\000\000@\275\000\000\200=\000\000\200=\000\000\340\275\000\000\220>\000\000@\276\000\000\300\275\000\000\270>\000\000@\276\000\000 \276\000\000\200\275\000\000\000=\000\000\200=\000\000\000=\000\000@\276\000\0000\276\000\0000>\000\000\200=\000\000P\276\000\000@>\000\000 \276\000\000\220>\000\000\270\276\000\000 >\000\000\000\000\000\000\000\276\000\000\260>\000\000\340=\000\000\220>\000\000\300\275\000\000`\276\000\000\000=\000\000\240\276\000\000\240\276\000\0000\276\000\000\240\275\000\000@\275\000\000@>\000\000 >\000\0008\277\000\000\310\276\000\000@=\000\000x?\000\000\000\275\000\000 >\000\000`>\000\000`\276\000\000\210>\000\000p?\000\000x?\000\000p\276\000\000\360>\000\000@\276\000\000p\276\000\000\216\277\000\000<\277\000\000\330>\000\0000\276\000\000X?\000\000\200\276\000\000\230>\000\000`>\000\000\020>\000\000\230\276\000\000\220>\000\000\000?\000\000$?\000\000 >\000\000\240\276\000\000`\276\000\000\230\276\000\000\300\275\000\000\240>\000\000\350>\000\000\320>\000\000 \276\000\000\260>\000\000<?\000\000\340=\000\000\310\276\000\000\034?\000\000\340\276\000\000$?\000\000\200\277\000\000\250\276\000\000\220\277\000\000\246?\000\000\340=\000\000 >\000\000\030?\000\000\300\276\000\000`\276\000\000\240\276\000\000d?\000\000@>\000\000\020\277\000\000\034?\000\000D\277\000\0000\277\000\000\030\277\000\000\260\276\000\000\000\300\000\000\216?\000\000\220\276\000\000p\276\000\000\340\275\000\000\020>\000\000\300>\000\000 >\000\000\230\276\000\000 >\000\000\230>\000\000\240=\000\000\020\276\000\000\260\276\000\000\300\275\000\000@\276\000\000\020\276\000\000@\276\000\000@\276\000\000p>\000\000\000>\000\000\340\275\000\000\300\275\000\000\270\276\000\000\200=\000\000\210\276\000\000\000\000\000\000@=\000\000\240\275\000\000\200\275\000\000p>\000\000\020>\000\000\340\275\000\000@\275\000\000\000\000\000\000\230>\000\000\240=\000\000@\275\000\000\210>\000\000P>\000\000\250\276\000\000 >\000\000\300\275\000\000P\276\000\0000\276\000\000\020>\000\000@=\000\000\020>\000\000\340=\000\000\340\275\000\000`\276\000\000 \276\000\000\000\276\000\000@\275\000\000\340=\000\000\210\276\000\000\200\275\000\000@\275\000\000\300=\000\000\300\276\000\000@=\000\000\200>\000\000\270\276\000\000\020\276\000\000\240\275\000\000\340\275\000\000\200\277\000\000\000\000\000\000\230>\000\000P>\000\000@\276\000\000\000\275\000\000\340\276\000\000\260\276\000\000\000\000\000\000\210?\000\000\360>\000\000\034\277\000\000\340>\000\000\020\276\000\000\304\277\000\000\222\277\000\000\204\277\000\000@\275\000\000\004?\000\000\300>\000\000`\276\000\000\200\275\000\000\000>\000\000 >\000\000\320\276\000\000\270>\000\000\320>\000\0000\277\000\000\014?\000\000\250\276\000\000\270\277\000\000P>\000\000`>\000\000\200\274\000\000(?\000\000\270\276\000\000`\276\000\000`>\000\000\014?\000\000P\276\000\000\000\277\000\000(?\000\000\240\275\000\000\350>\000\000`\276\000\000\260\276\000\000\350\277\000\000\030?\000\000\360\276\000\000\000\276\000\000\030?\000\000\000\276\000\000\200=\000\000\030\277\000\000\024?\000\000\004\277\000\000\310\276\000\000\222?\000\0000?\000\000\004\277\000\000\240=\000\000\240\275\000\000\360\277\000\000<?\000\000\220\276\000\000``\276\000\000\210\276\000\000\240\275\000\000\240\275\000\000\200\275\000\000\270\276\000\000\300\275\000\000@\276\000\000P>\000\000\020\276\000\000\300=\000\000\000\275\000\000\300\275\000\000@=\000\000@>\000\000 >\000\000\340\275\000\000\210>"
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 128.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 127.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -128.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 128.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp_3/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "\000\000\014?\000\000\004?\000\000\004?\000\000\330>\000\000\340>\000\000\210>\000\000\310>\000\000$?\000\000\210?\000\000p>\000\0000>\000\000H?\000\000l?\000\000$?\000\000\310>\000\000\220>"
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 128.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/Pow_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/Pow_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value_1/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 127.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -128.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/truediv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 128.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_act0/Pow_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/en_dense_act0/Pow_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/en_dense_act0/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_act0/Cast_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/en_dense_act0/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 16.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_act0/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_act0/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/en_dense_act0/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "encoder/en_dense_act0/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_act0/truediv_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_act0/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        tensor_content: "\000\000\200\276\000\000\300\275\000\000\210\276\000\000\240>\000\000@>\000\000\310\276\000\000\216?\000\000P?\000\000\000?\000\000\320>\000\000t?\000\000\250\277\000\000\240>\000\000 \276\000\000P\276\000\000`\276\000\000\240>\000\000\350\276\000\000@\275\000\000t\277\000\000\250>\000\000 \277\000\000\334\277\000\000\000\275\000\0008?\000\000\310\276\000\000\340>\000\000@>\000\000h?\000\000\200>\000\0004?\000\000 ?\000\000\350>\000\000\330\276\000\000\256?\000\000\210\276\000\000$\277\000\000p>\000\000\010\277\000\000\210>\000\000h\277\000\000\370>\000\000\230>\000\000\230\276\000\0000?\000\000\240=\000\000\340\276\000\000<?\000\000p\276\000\000(\277\000\000\206?\000\000\264?\000\000\010\277\000\000\340=\000\000 >\000\000\024?\000\000 \277\000\000`\276\000\000\\?\000\0000?\000\000 >\000\000l?\000\000\240\275\000\000P\276\000\000\256?\000\000\020>\000\000\262?\000\000\262?\000\0004?\000\000\000>\000\000\250>\000\0004\277\000\000\216\277\000\000 >\000\000@>\000\000\300>\000\000\000\276\000\000\300\275\000\000\200\275\000\000\250\276\000\000\320\276\000\000\030?\000\000D\277\000\000<?\000\000 ?\000\000\000\000\000\000p>\000\000\264?\000\000\212\277\000\000(\277\000\000\220\277\000\000@\277\000\000\340\275\000\000\240\277\000\000@\276\000\000\236\277\000\000\340=\000\000p>\000\000,\277\000\000\324\277\000\000\330\276\000\000`\276\000\0000\277\000\000\300\276\000\000\252?\000\000\300>\000\000,?\000\000l?\000\000\210?\000\000\360\276\000\000 >\000\000\014\277\000\000\230>\000\000\000\275\000\000\014\277\000\000\000=\000\000@?\000\000t\277\000\000\230?\000\000\240>\000\000\330>\000\000\000>\000\000\014\277\000\000\222?\000\000|?\000\000\210\276\000\000\226\277\000\000D?\000\000\004?\000\000P?\000\000T?\000\000|?\000\000\206?\000\000\310>\000\000\360\276\000\000\320\276\000\000\350>\000\000@\276\000\000\200?\000\000H?\000\000\370\276\000\000 \277\000\000\202?\000\000\300>\000\000H?\000\000 ?\000\000x\277\000\000\340\276\000\000\014\277\000\000<\277\000\000L?\000\000\030?\000\000\350>\000\000@\275\000\000\020?\000\000D\277\000\000\000\277\000\000\000=\000\000H?\000\000\260>\000\000(\277\000\000\340>\000\000\210\276\000\000\000\276\000\000\034?\000\000\000=\000\000\230>\000\000\300\275\000\000\224?\000\000\240\275\000\000@\275\000\000<\277\000\000\300>\000\000\300\276\000\000T?\000\000@>\000\000\210>\000\000\202?\000\000\200\274\000\000p\277\000\000`>\000\000x\277\000\000\272\277\000\000\320>\000\000P\276\000\000\214?\000\000\340\275\000\000\206?\000\000\350>\000\000<?\000\000\200>\000\000\260>\000\000\200<\000\000\240?\000\000\220\276\000\000\370\276\000\000\300\275\000\000\014\277\000\000\270>\000\000\000?\000\000\250\276\000\000\260\276\000\000\370\276\000\000\230>\000\000\322?\000\000X?\000\000\252\277\000\000H?\000\000P\276\000\000@>\000\000\010?\000\000`>\000\000\000\000\000\000 >\000\000\360>\000\0004\277\000\000\024\277\000\000@>\000\000\212?\000\000\310>\000\000\250\276\000\000\360>\000\000\200\275\000\000\\?\000\000\330\276\000\000T?\000\000\204?\000\000\200<\000\000\352?\000\000\000\275\000\000\220>\000\000,\277\000\000\240\276\000\000\320>\000\000\200=\000\000\240\276\000\000\330\276\000\000\340=\000\000\370>\000\0000>\000\000 \276\000\000\000\000\000\000,?\000\000\232?\000\000p>\000\000\240>\000\000\206?\000\000\300=\000\000t\277\000\000\226?\000\000\200\274\000\000\024\277\000\000\240?\000\000\300\275\000\000\210?\000\000\240>"
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 128.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 127.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -128.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 128.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_3/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "\000\000\024\277\000\000\240\276\000\000\260\276\000\000\376\277\000\000\212?\000\000\370?\000\000\202?\000\000\302?\000\000\322\277\000\000x?\000\000`\276\000\000\340\276\000\000\350\276\000\000\266?\000\000 ?\000\000\260>"
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 128.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value_1/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 127.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -128.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 128.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Pow_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Pow_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Cast_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/encod_qa/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 16.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "encoder/encod_qa/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/truediv_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
      }
    }
  }
}
node {
  name: "encoder/input_qa/Neg_1"
  op: "Neg"
  input: "x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/mul"
  op: "Mul"
  input: "x"
  input: "encoder/input_qa/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/Pow"
  op: "Pow"
  input: "encoder/input_qa/Pow/x"
  input: "encoder/input_qa/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/input_qa/Cast"
  op: "Cast"
  input: "encoder/input_qa/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/input_qa/truediv"
  op: "RealDiv"
  input: "encoder/input_qa/mul"
  input: "encoder/input_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/Neg"
  op: "Neg"
  input: "encoder/input_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/Round"
  op: "Round"
  input: "encoder/input_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/add"
  op: "AddV2"
  input: "encoder/input_qa/Neg"
  input: "encoder/input_qa/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/StopGradient"
  op: "StopGradient"
  input: "encoder/input_qa/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/add_1"
  op: "AddV2"
  input: "encoder/input_qa/truediv"
  input: "encoder/input_qa/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/input_qa/add_1"
  input: "encoder/input_qa/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/clip_by_value"
  op: "Maximum"
  input: "encoder/input_qa/clip_by_value/Minimum"
  input: "encoder/input_qa/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/mul_1"
  op: "Mul"
  input: "encoder/input_qa/Cast"
  input: "encoder/input_qa/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/truediv_1"
  op: "RealDiv"
  input: "encoder/input_qa/mul_1"
  input: "encoder/input_qa/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/mul_2"
  op: "Mul"
  input: "encoder/input_qa/mul_2/x"
  input: "encoder/input_qa/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/add_2"
  op: "AddV2"
  input: "encoder/input_qa/Neg_1"
  input: "encoder/input_qa/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/mul_3"
  op: "Mul"
  input: "encoder/input_qa/mul_3/x"
  input: "encoder/input_qa/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/StopGradient_1"
  op: "StopGradient"
  input: "encoder/input_qa/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/add_3"
  op: "AddV2"
  input: "x"
  input: "encoder/input_qa/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/flatten/Reshape"
  op: "Reshape"
  input: "encoder/input_qa/add_3"
  input: "encoder/flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp_2"
  op: "Identity"
  input: "encoder/en_dense_0/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp_1"
  op: "Identity"
  input: "encoder/en_dense_0/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Neg_1"
  op: "Neg"
  input: "encoder/en_dense_0/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp"
  op: "Identity"
  input: "encoder/en_dense_0/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul"
  op: "Mul"
  input: "encoder/en_dense_0/ReadVariableOp"
  input: "encoder/en_dense_0/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Pow"
  op: "Pow"
  input: "encoder/en_dense_0/Pow/x"
  input: "encoder/en_dense_0/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/en_dense_0/Cast"
  op: "Cast"
  input: "encoder/en_dense_0/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/en_dense_0/truediv"
  op: "RealDiv"
  input: "encoder/en_dense_0/mul"
  input: "encoder/en_dense_0/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Neg"
  op: "Neg"
  input: "encoder/en_dense_0/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Round"
  op: "Round"
  input: "encoder/en_dense_0/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add"
  op: "AddV2"
  input: "encoder/en_dense_0/Neg"
  input: "encoder/en_dense_0/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/StopGradient"
  op: "StopGradient"
  input: "encoder/en_dense_0/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_1"
  op: "AddV2"
  input: "encoder/en_dense_0/truediv"
  input: "encoder/en_dense_0/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/en_dense_0/add_1"
  input: "encoder/en_dense_0/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value"
  op: "Maximum"
  input: "encoder/en_dense_0/clip_by_value/Minimum"
  input: "encoder/en_dense_0/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_1"
  op: "Mul"
  input: "encoder/en_dense_0/Cast"
  input: "encoder/en_dense_0/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/truediv_1"
  op: "RealDiv"
  input: "encoder/en_dense_0/mul_1"
  input: "encoder/en_dense_0/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_2"
  op: "Mul"
  input: "encoder/en_dense_0/mul_2/x"
  input: "encoder/en_dense_0/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_2"
  op: "AddV2"
  input: "encoder/en_dense_0/Neg_1"
  input: "encoder/en_dense_0/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_3"
  op: "Mul"
  input: "encoder/en_dense_0/mul_3/x"
  input: "encoder/en_dense_0/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/StopGradient_1"
  op: "StopGradient"
  input: "encoder/en_dense_0/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_3"
  op: "AddV2"
  input: "encoder/en_dense_0/ReadVariableOp_2"
  input: "encoder/en_dense_0/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/MatMul"
  op: "MatMul"
  input: "encoder/flatten/Reshape"
  input: "encoder/en_dense_0/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp_5"
  op: "Identity"
  input: "encoder/en_dense_0/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp_4"
  op: "Identity"
  input: "encoder/en_dense_0/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Neg_3"
  op: "Neg"
  input: "encoder/en_dense_0/ReadVariableOp_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp_3"
  op: "Identity"
  input: "encoder/en_dense_0/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_4"
  op: "Mul"
  input: "encoder/en_dense_0/ReadVariableOp_3"
  input: "encoder/en_dense_0/mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Pow_1"
  op: "Pow"
  input: "encoder/en_dense_0/Pow_1/x"
  input: "encoder/en_dense_0/Pow_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/en_dense_0/Cast_1"
  op: "Cast"
  input: "encoder/en_dense_0/Pow_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/en_dense_0/truediv_2"
  op: "RealDiv"
  input: "encoder/en_dense_0/mul_4"
  input: "encoder/en_dense_0/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Neg_2"
  op: "Neg"
  input: "encoder/en_dense_0/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Round_1"
  op: "Round"
  input: "encoder/en_dense_0/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_4"
  op: "AddV2"
  input: "encoder/en_dense_0/Neg_2"
  input: "encoder/en_dense_0/Round_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/StopGradient_2"
  op: "StopGradient"
  input: "encoder/en_dense_0/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_5"
  op: "AddV2"
  input: "encoder/en_dense_0/truediv_2"
  input: "encoder/en_dense_0/StopGradient_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "encoder/en_dense_0/add_5"
  input: "encoder/en_dense_0/clip_by_value_1/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value_1"
  op: "Maximum"
  input: "encoder/en_dense_0/clip_by_value_1/Minimum"
  input: "encoder/en_dense_0/clip_by_value_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_5"
  op: "Mul"
  input: "encoder/en_dense_0/Cast_1"
  input: "encoder/en_dense_0/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/truediv_3"
  op: "RealDiv"
  input: "encoder/en_dense_0/mul_5"
  input: "encoder/en_dense_0/truediv_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_6"
  op: "Mul"
  input: "encoder/en_dense_0/mul_6/x"
  input: "encoder/en_dense_0/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_6"
  op: "AddV2"
  input: "encoder/en_dense_0/Neg_3"
  input: "encoder/en_dense_0/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_7"
  op: "Mul"
  input: "encoder/en_dense_0/mul_7/x"
  input: "encoder/en_dense_0/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/StopGradient_3"
  op: "StopGradient"
  input: "encoder/en_dense_0/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_7"
  op: "AddV2"
  input: "encoder/en_dense_0/ReadVariableOp_5"
  input: "encoder/en_dense_0/StopGradient_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/BiasAdd"
  op: "BiasAdd"
  input: "encoder/en_dense_0/MatMul"
  input: "encoder/en_dense_0/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/en_dense_act0/Pow_1"
  op: "Pow"
  input: "encoder/en_dense_act0/Pow_1/x"
  input: "encoder/en_dense_act0/Pow_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/en_dense_act0/Cast_1"
  op: "Cast"
  input: "encoder/en_dense_act0/Pow_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/en_dense_act0/Cast_2"
  op: "Cast"
  input: "encoder/en_dense_act0/Cast_2/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/en_dense_act0/sub"
  op: "Sub"
  input: "encoder/en_dense_act0/Cast_2"
  input: "encoder/en_dense_act0/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/Pow_2"
  op: "Pow"
  input: "encoder/en_dense_act0/Const"
  input: "encoder/en_dense_act0/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/sub_1"
  op: "Sub"
  input: "encoder/en_dense_act0/Cast_1"
  input: "encoder/en_dense_act0/Pow_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/LessEqual"
  op: "LessEqual"
  input: "encoder/en_dense_0/BiasAdd"
  input: "encoder/en_dense_act0/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/Relu"
  op: "Relu"
  input: "encoder/en_dense_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/ones_like/Shape"
  op: "Shape"
  input: "encoder/en_dense_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/en_dense_act0/ones_like"
  op: "Fill"
  input: "encoder/en_dense_act0/ones_like/Shape"
  input: "encoder/en_dense_act0/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/en_dense_act0/sub_2"
  op: "Sub"
  input: "encoder/en_dense_act0/Cast_1"
  input: "encoder/en_dense_act0/Pow_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/mul"
  op: "Mul"
  input: "encoder/en_dense_act0/ones_like"
  input: "encoder/en_dense_act0/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/SelectV2"
  op: "SelectV2"
  input: "encoder/en_dense_act0/LessEqual"
  input: "encoder/en_dense_act0/Relu"
  input: "encoder/en_dense_act0/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/Neg_1"
  op: "Neg"
  input: "encoder/en_dense_act0/SelectV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/Pow"
  op: "Pow"
  input: "encoder/en_dense_act0/Pow/x"
  input: "encoder/en_dense_act0/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/en_dense_act0/Cast"
  op: "Cast"
  input: "encoder/en_dense_act0/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/en_dense_act0/mul_1"
  op: "Mul"
  input: "encoder/en_dense_0/BiasAdd"
  input: "encoder/en_dense_act0/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/truediv"
  op: "RealDiv"
  input: "encoder/en_dense_act0/mul_1"
  input: "encoder/en_dense_act0/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/Neg"
  op: "Neg"
  input: "encoder/en_dense_act0/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/Round"
  op: "Round"
  input: "encoder/en_dense_act0/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/add"
  op: "AddV2"
  input: "encoder/en_dense_act0/Neg"
  input: "encoder/en_dense_act0/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/StopGradient"
  op: "StopGradient"
  input: "encoder/en_dense_act0/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/add_1"
  op: "AddV2"
  input: "encoder/en_dense_act0/truediv"
  input: "encoder/en_dense_act0/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/truediv_1"
  op: "RealDiv"
  input: "encoder/en_dense_act0/add_1"
  input: "encoder/en_dense_act0/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/truediv_2"
  op: "RealDiv"
  input: "encoder/en_dense_act0/truediv_2/x"
  input: "encoder/en_dense_act0/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/sub_3"
  op: "Sub"
  input: "encoder/en_dense_act0/sub_3/x"
  input: "encoder/en_dense_act0/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/en_dense_act0/truediv_1"
  input: "encoder/en_dense_act0/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/clip_by_value"
  op: "Maximum"
  input: "encoder/en_dense_act0/clip_by_value/Minimum"
  input: "encoder/en_dense_act0/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/mul_2"
  op: "Mul"
  input: "encoder/en_dense_act0/Cast_1"
  input: "encoder/en_dense_act0/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/add_2"
  op: "AddV2"
  input: "encoder/en_dense_act0/Neg_1"
  input: "encoder/en_dense_act0/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/mul_3"
  op: "Mul"
  input: "encoder/en_dense_act0/mul_3/x"
  input: "encoder/en_dense_act0/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/StopGradient_1"
  op: "StopGradient"
  input: "encoder/en_dense_act0/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_act0/add_3"
  op: "AddV2"
  input: "encoder/en_dense_act0/SelectV2"
  input: "encoder/en_dense_act0/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_2"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_1"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Neg_1"
  op: "Neg"
  input: "encoder/encoded_vector/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul"
  op: "Mul"
  input: "encoder/encoded_vector/ReadVariableOp"
  input: "encoder/encoded_vector/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow"
  op: "Pow"
  input: "encoder/encoded_vector/Pow/x"
  input: "encoder/encoded_vector/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encoded_vector/Cast"
  op: "Cast"
  input: "encoder/encoded_vector/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv"
  op: "RealDiv"
  input: "encoder/encoded_vector/mul"
  input: "encoder/encoded_vector/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Neg"
  op: "Neg"
  input: "encoder/encoded_vector/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Round"
  op: "Round"
  input: "encoder/encoded_vector/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add"
  op: "AddV2"
  input: "encoder/encoded_vector/Neg"
  input: "encoder/encoded_vector/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/StopGradient"
  op: "StopGradient"
  input: "encoder/encoded_vector/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_1"
  op: "AddV2"
  input: "encoder/encoded_vector/truediv"
  input: "encoder/encoded_vector/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/encoded_vector/add_1"
  input: "encoder/encoded_vector/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value"
  op: "Maximum"
  input: "encoder/encoded_vector/clip_by_value/Minimum"
  input: "encoder/encoded_vector/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_1"
  op: "Mul"
  input: "encoder/encoded_vector/Cast"
  input: "encoder/encoded_vector/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_1"
  op: "RealDiv"
  input: "encoder/encoded_vector/mul_1"
  input: "encoder/encoded_vector/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_2"
  op: "Mul"
  input: "encoder/encoded_vector/mul_2/x"
  input: "encoder/encoded_vector/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_2"
  op: "AddV2"
  input: "encoder/encoded_vector/Neg_1"
  input: "encoder/encoded_vector/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_3"
  op: "Mul"
  input: "encoder/encoded_vector/mul_3/x"
  input: "encoder/encoded_vector/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/StopGradient_1"
  op: "StopGradient"
  input: "encoder/encoded_vector/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_3"
  op: "AddV2"
  input: "encoder/encoded_vector/ReadVariableOp_2"
  input: "encoder/encoded_vector/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/MatMul"
  op: "MatMul"
  input: "encoder/en_dense_act0/add_3"
  input: "encoder/encoded_vector/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_5"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_4"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Neg_3"
  op: "Neg"
  input: "encoder/encoded_vector/ReadVariableOp_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_3"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_4"
  op: "Mul"
  input: "encoder/encoded_vector/ReadVariableOp_3"
  input: "encoder/encoded_vector/mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow_1"
  op: "Pow"
  input: "encoder/encoded_vector/Pow_1/x"
  input: "encoder/encoded_vector/Pow_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encoded_vector/Cast_1"
  op: "Cast"
  input: "encoder/encoded_vector/Pow_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_2"
  op: "RealDiv"
  input: "encoder/encoded_vector/mul_4"
  input: "encoder/encoded_vector/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Neg_2"
  op: "Neg"
  input: "encoder/encoded_vector/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Round_1"
  op: "Round"
  input: "encoder/encoded_vector/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_4"
  op: "AddV2"
  input: "encoder/encoded_vector/Neg_2"
  input: "encoder/encoded_vector/Round_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/StopGradient_2"
  op: "StopGradient"
  input: "encoder/encoded_vector/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_5"
  op: "AddV2"
  input: "encoder/encoded_vector/truediv_2"
  input: "encoder/encoded_vector/StopGradient_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "encoder/encoded_vector/add_5"
  input: "encoder/encoded_vector/clip_by_value_1/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value_1"
  op: "Maximum"
  input: "encoder/encoded_vector/clip_by_value_1/Minimum"
  input: "encoder/encoded_vector/clip_by_value_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_5"
  op: "Mul"
  input: "encoder/encoded_vector/Cast_1"
  input: "encoder/encoded_vector/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_3"
  op: "RealDiv"
  input: "encoder/encoded_vector/mul_5"
  input: "encoder/encoded_vector/truediv_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_6"
  op: "Mul"
  input: "encoder/encoded_vector/mul_6/x"
  input: "encoder/encoded_vector/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_6"
  op: "AddV2"
  input: "encoder/encoded_vector/Neg_3"
  input: "encoder/encoded_vector/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_7"
  op: "Mul"
  input: "encoder/encoded_vector/mul_7/x"
  input: "encoder/encoded_vector/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/StopGradient_3"
  op: "StopGradient"
  input: "encoder/encoded_vector/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_7"
  op: "AddV2"
  input: "encoder/encoded_vector/ReadVariableOp_5"
  input: "encoder/encoded_vector/StopGradient_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/BiasAdd"
  op: "BiasAdd"
  input: "encoder/encoded_vector/MatMul"
  input: "encoder/encoded_vector/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/encod_qa/Pow_1"
  op: "Pow"
  input: "encoder/encod_qa/Pow_1/x"
  input: "encoder/encod_qa/Pow_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encod_qa/Cast_1"
  op: "Cast"
  input: "encoder/encod_qa/Pow_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encod_qa/Cast_2"
  op: "Cast"
  input: "encoder/encod_qa/Cast_2/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encod_qa/sub"
  op: "Sub"
  input: "encoder/encod_qa/Cast_2"
  input: "encoder/encod_qa/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Pow_2"
  op: "Pow"
  input: "encoder/encod_qa/Const"
  input: "encoder/encod_qa/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/sub_1"
  op: "Sub"
  input: "encoder/encod_qa/Cast_1"
  input: "encoder/encod_qa/Pow_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/LessEqual"
  op: "LessEqual"
  input: "encoder/encoded_vector/BiasAdd"
  input: "encoder/encod_qa/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Relu"
  op: "Relu"
  input: "encoder/encoded_vector/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/ones_like/Shape"
  op: "Shape"
  input: "encoder/encoded_vector/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encod_qa/ones_like"
  op: "Fill"
  input: "encoder/encod_qa/ones_like/Shape"
  input: "encoder/encod_qa/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encod_qa/sub_2"
  op: "Sub"
  input: "encoder/encod_qa/Cast_1"
  input: "encoder/encod_qa/Pow_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/mul"
  op: "Mul"
  input: "encoder/encod_qa/ones_like"
  input: "encoder/encod_qa/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/SelectV2"
  op: "SelectV2"
  input: "encoder/encod_qa/LessEqual"
  input: "encoder/encod_qa/Relu"
  input: "encoder/encod_qa/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Neg_1"
  op: "Neg"
  input: "encoder/encod_qa/SelectV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Pow"
  op: "Pow"
  input: "encoder/encod_qa/Pow/x"
  input: "encoder/encod_qa/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encod_qa/Cast"
  op: "Cast"
  input: "encoder/encod_qa/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encod_qa/mul_1"
  op: "Mul"
  input: "encoder/encoded_vector/BiasAdd"
  input: "encoder/encod_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/truediv"
  op: "RealDiv"
  input: "encoder/encod_qa/mul_1"
  input: "encoder/encod_qa/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Neg"
  op: "Neg"
  input: "encoder/encod_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Round"
  op: "Round"
  input: "encoder/encod_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/add"
  op: "AddV2"
  input: "encoder/encod_qa/Neg"
  input: "encoder/encod_qa/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/StopGradient"
  op: "StopGradient"
  input: "encoder/encod_qa/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/add_1"
  op: "AddV2"
  input: "encoder/encod_qa/truediv"
  input: "encoder/encod_qa/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/truediv_1"
  op: "RealDiv"
  input: "encoder/encod_qa/add_1"
  input: "encoder/encod_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/truediv_2"
  op: "RealDiv"
  input: "encoder/encod_qa/truediv_2/x"
  input: "encoder/encod_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/sub_3"
  op: "Sub"
  input: "encoder/encod_qa/sub_3/x"
  input: "encoder/encod_qa/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/encod_qa/truediv_1"
  input: "encoder/encod_qa/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/clip_by_value"
  op: "Maximum"
  input: "encoder/encod_qa/clip_by_value/Minimum"
  input: "encoder/encod_qa/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/mul_2"
  op: "Mul"
  input: "encoder/encod_qa/Cast_1"
  input: "encoder/encod_qa/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/add_2"
  op: "AddV2"
  input: "encoder/encod_qa/Neg_1"
  input: "encoder/encod_qa/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/mul_3"
  op: "Mul"
  input: "encoder/encod_qa/mul_3/x"
  input: "encoder/encod_qa/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/StopGradient_1"
  op: "StopGradient"
  input: "encoder/encod_qa/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/add_3"
  op: "AddV2"
  input: "encoder/encod_qa/SelectV2"
  input: "encoder/encod_qa/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^encoder/en_dense_0/ReadVariableOp"
  input: "^encoder/en_dense_0/ReadVariableOp_1"
  input: "^encoder/en_dense_0/ReadVariableOp_2"
  input: "^encoder/en_dense_0/ReadVariableOp_3"
  input: "^encoder/en_dense_0/ReadVariableOp_4"
  input: "^encoder/en_dense_0/ReadVariableOp_5"
  input: "^encoder/encoded_vector/ReadVariableOp"
  input: "^encoder/encoded_vector/ReadVariableOp_1"
  input: "^encoder/encoded_vector/ReadVariableOp_2"
  input: "^encoder/encoded_vector/ReadVariableOp_3"
  input: "^encoder/encoded_vector/ReadVariableOp_4"
  input: "^encoder/encoded_vector/ReadVariableOp_5"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "encoder/encod_qa/add_3"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
