node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_0/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        tensor_content: "\341|\340\276\300\337\274\276\323\377Z\276\352\364;>\0272\005?\236\302\275=\002w\027?\350\351\356=\273\253\351\276\257\325P\276\211\231V>\341$\344=\247,6?\035\nd\277\344\363\231\276#\265\306=f\342\361\275\016\025\305>\212{\000>\005\031\207?j\277J==\034\030\273\357\006\317>\262\310\004\277\303\337\025?\362N\302>\345Am>vu\312;\232\367\366<\367\351[\276A\246\373\276\351\026\001?\335S\304=8\356\243=\345((>^jj\276\017\300;\2768|G?\234(\266\276\nMx>\277\001\t?r\207\217?\013\364:\277\363O\317\276\017\201\001>)\016\244\276W}\252\275y\0365>4\207=?\233\340\246\277E\304\023\300|\254\t\275K\307K@\305\307&?\261\327\266?3\250M@\350_\271\276\242R\315\276yg\217\2768{W?i\277\"=J\246\027@\230\307\331>rF*?\345\0149?H\344S\276\014\273\264>\362\014\323=\014\020T?\301s\376>A\245\022\277\036\3042>\331c\224\275\374\'\022\277\n\246\313>.S\007?\205\356\206?\345\3506>\232\230\324>\270\360\364\275$k\035?\325\275\320>\302\007\'?.\010\236\274\213\350\245\275Hs1\277\0018\001?\347\240\021?~\203\007?\003\304\257>\354\001 >\022\252\031>|e\300\276\340\237m\277\312[I>\360(\335\275p>%?\275|\250>A]\214?\026b\231=[\272\215>\"`\022\277\376\020m?X\247\261\276\250\345\324\275\276U\312<CZ^\277n\034\323>\337\361[>\325\347.\275\270\250\220\275\315\213T>c\362\273\275\332\032\033@\260SR?\310t\252\271Q\030\214>}d\230?\317\326\220\276$\253\336>\003\024\276=\327\246(>\2762&=!R\206>m3\214?\347B\323\276uU\022>tq\211=^\'\245?X\234X@9\300\315>R\343~?\201M\340?S\267\022\277\033\347)@\230z@?\021\340\261\277\017\316.\276\260o\305?\333\263.@\321\263\272?\274xL@z\262\177?\3035\271?\365N\201>\200\177\363=W\320\210=\217d\215\276\223\323\236\277o\211\251?\\h5?\211cd\277x\240\013\277\223$\353\276\213\215\223>\002L\027\2770\300\024\276\374\007\277\274\356%\307\276o\353\036=\020\222\312>\314\236\365\276\345{\024\277\271\336\024\276\266\221e?!?\341\276\212m\201>AK\207\277\322~4=\342Q_> \321\204>\304[\204>!1\016\277\354\335\335>-\274*?s\001(?w\362\207=\231>\222>F\272h>\247\004\200>qh#>3\2264\276!\203\352\276cC8?\327\256f\2779\010 ?mrS>*\217\010?Y=\000\276\211}\230\276\265C\023\277-G\246>d\204\315\276)\342\367\276\200P\323\276\245\260\223>\030}\230\277]\014\227\276\372DY=\356\312\230=@\271\024?\217(0>:\027\351;,*\343>\353\030\261>\3713\215?\240\336\342>\'\241e\273\026\203\362>$\243g> @\022>>\021\357\276\362\336\022?\004\343Y\277T\211\203\276\016\372\304\275\023Rh?%\264v>\257\315\322>7$p\277]\271\240?\030\300r\275\000mi\277\303\304\322\276\257\202\306=b\026\220?\305\273\255\276^\205+?!\300\010\276\234;\032\276\200O)\276*{\365?\251b\235>\016\355\036\277H\033\337<Z\276%>\204\347\033>\014\0100?\203c\271=\300\342\024\276?\303\355\276\205\266\332\274\027\023_?\230l\233\275E\347\370\275\235\020\273>\250\200\230>N\365;?\257\251\203\276\352\263\343\276<\225C>\177\2600\276\225-\033\2777\264\t\276\0347\330>\236\217\302>"
      }
    }
  }
}
node {
  name: "decoder/de_dense_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "\251$\314?@\326\274>\221\351Q?\'\341\305?\354V\276>\304\324T?1&\350?\227O\214>\241\2149>\005\312\331?\321\336\316?x\205^>hM\037\300\213`\200?w\306\006@~\336 \300"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
        tensor_content: "\301\021F?\362\353\n?\215\301$?\'\213^?v\201\275>\235\303\025>\035Cl\276\262;~>\323F\270?\270hU?\341\333V\275F\343\374\276+gF?\324\337x=\213\261\217\276\326^W\276\346Mo\276\177\245\373>\022vO\277\214\324\232\276-=D?\275\243q?\352?\340>Up\317=\325\362\t>@\320R\276V\214\016\275\214\244\210?t)F\274\236\211\247>8\366b>/\323\241=a\2075\277\346\r\025>\261\264\234\276\277)\202?\2736\326?\332\267\354>\242\033\301>*\n\371\276\177-\001?oO\002\277\014\307\027\276[\205\025\277\315\200\013?\000\261\023>qP\r\276\210\353W=\333T\356\276\323pZ?N\264F?\257\224O>\017\255\262\277\006\237c>\3347\323\275\030f\201\275\205$\017@\232F\307?gd\247?\376\337L?\243>\212\277\246\275\035>&\377\356\275p\236-\276\336\234\356>\352\201\340>\260\222&?\321\200\300=4\220\245\275\313\221\003?\271L(?\025.\'>\311\351K?\360\351\034?\032c\315\275\346~W>Xa\304:\265r^<\000@i>\'M\230>\340l\214\276>\014\022>\316\237\353>NY.?=\001n\276\235.\277=#bz\275\332+\024>\371\321\321=_\366\302>\034\014\350\273\220c\000@S\034#?\205}\336<\320\323\023\275\203\215/>\266F@\277\376,\254\276\307{o\275\3452\025\277\002S\025\277\323\2060\277\310\263$>\261\230@>0\327\353\276&\315\331\276\300\357\325<\202q3>\371,\235\276\270\231i\276\030\235N>\352\264\271\275\322\305\235\277Z\337\301\276\365a\021=B\340\373\275\030\032\306>\332\220\252\275Ju\204>\256\301[\276\304,[>631>\0357\307\276\273\344\023\275_\016\243\276\374\275\255\275\005\271Y\276\020\326~>T\221\201?\013\355_>)\323\220?\347\240\246\275R\253\350<P\031\022\277\230_)\276D\372=>\352\261l?\021E*?\312m}?\322\262=\275\202$J\275\255\017\010\276\004\nd>\031k\210>}\324\013\276\342\244C\276\004Y\204?y\305\312?\254\205\200>\3408\017\276\246\332\265>\016\226\257=\310\017\242\276#\300\033?\250\344z>\314\344\312?\263\346\206\275\222\r\r\275\301\312\223\275\232)1\275\006\360_?\017\220\365>\212\205\211>*\312\333>\222~\244>\354\205F=\320\251t>;\3427\276\272\372\275>\363\037\024?\211\226\017\276\002\323\241>\026\202;\276pB[>\240A8<\252|8>\300\331\272?\310\355\306>\346\242{\276c@\327=\005GV?\250\334\016=\244\304g>q\256p\276%\370`\277@\252\256\276\333\216\267=h\237U\275^C\334>\000\266\003\275\335\302\t\276\010\365A\275_\223\200?,(\353>\242\207^\276Xv`=\265z\'?\204\025\316=\201l\025\273\274\336h?\226\206v?a\201O=|\241\201>\214\343\001\277\266|\021\275+\022\271>\016\000\027\276\032u\207?\037\027=>\351Q\213\277m\246\201\277%\226\214?+\177\356=o\202\004\277\375\304i?.y\030?d\264\010\277-\322\276\276E/)>\216$\220\276b\213\223?Nd\t\277?\032\204\277\264\360\021?N\214\003\275\300\026T\276\265=U>\211D\314>\260\242\313?+\2110\300\235\2320\277\331\207c>jz\013?\025\205O>\210\001\261\275H\3132=\3637V\277\324\365\203>@\364\352;\372\211.\276\255\261\023?y\304\273\276\001t&?P\315\347>^6\236\277\306\377\206>\200\351M=\210\226\005>\332\201\275\276\352\223 ?\201\277R\276\312\377\t>\340zB\277\272\356\202>\332\016\205>\3143u>\320\345\344=\221O\350\272\201mc>D\320r>\306\365\256=\244\254\t?\023\371c\275\216\200\020\276G\270\257\276I\322\252>\342\\\367<3\206\205<Q\033\245>\351!\005\276U,\336\275\027\331\234>W=\313\276\t0\032\277\304~\267\275\271\323\236>8\303\355\276A\322C\276\372\245\215>+\014\024>K(\031\277,\312`?4\353\256=M\242\333\276%\005_?\224<u>c\027\352\276\'\314T?\333\314|>\332\244\330\276\276F\203?\350\365\245\277\372\217\267\276l\245\276\300\246\021Z>\006?\222\275\307!\215\275w\364\307>\236\247L\276fr\210\275\362\205\205\276\000\022\364<\312\320\363\275\360X\304<7x\326>v\266G\277\261\236\216? Ks>\256TS>P\245\213\276\220\327X>\350\371\221=\000\'\221\277\267/\037\277z\267`=\255\307\203?K\342\300\277\243-\210\276\000*\345;\230\266\265\275\333\"\256>gH\254=\230\204\360\276[\353^<`\265m>,\342\352>X\242:?\310\235M=\213ax\276\337\317\355\276\036#?;\317(\257>\022\262\004\277w\314\230>\264\327=?\240\024P\276\262f\027>1x\312\275\276\321\034>\034\320f>B\333\267=\352\311\236\276\240\220\316\274\"`\205<\214\271E\277\376\207 \275m\344^? \244\211?\357\254\316\276\014Dw\275\330\325\350\276\273F\340\276\242\033\000>{\317L\275\223x9>\321\no?\035:\303>\230\202\373\276\311\220~> \230\246=`\260D>\377\332Y>.\314\000\276`Z\203\276\300\274*?@\370\356\273\336h9\276V\312\'>\242N\253>\271\366\317={\177\341>\262\'\367\276\274%\237\276\370\254N\275\250\315\033>b\2501\276\366\361\'>o`6\276IE\361=\313\261\312=\034\263\270>\252\217K\276\346cf>0\351\303<+\266{?\306\005\004>\231\346\243\276\006\255\350>\033l\014?\375\236\"\276\241\353\300\276\236H\201>v\241\313\275\343H\204=\272`\233>1\365\217\275\231\217\375>\276\326\361>6\360\234>N#3>\033R\355>\244\325#\276<\252\241\277\005\236k?w\221\212?\026^&>\320N&>\273\277\277=\254Xu>\374\357\232>\034)\362\276\\B\260>\260\226\227\277L\344\327<\351W\213>\027l3>\025^\016?\003\367X>\241mM?\362V\024?\002\021\337\276sD\321\2764V;?\350g\026\277=\214\027?Us\260>wy\026\276\037\036\205\276\204\n\352\276~g\211>F\323\022>\224\006\267=\317\033 ?\233\274\364>\305\220\025\276]f\257=Y\345\032>\010\006\205>\2008e<L\004\252\275w\342\032>\265\001\222\275;\372r\2771\230\024\277\206^L>.h\310\275>\351\201\276dx\036>8\312\330<SA\222\275|\236e\276\222\320p?\036\366I\277\257,\017?e\362g>61\003\277&^\205\277\r\023\203\276O\332\342\276\256\236\260=g8\007>\371\375\241\276{z[?\025\320\000\276\007j\010\277\330M\357=\331|\205\275\275\232J>eH\034\277\356\010\027\275E\340\277>\2222\311\276\343D\361>\312w\257> \031\010>!\262\023\277\364,\032?g\202\307\276\366Z\362>Z\344\237\274W\001i?\350O\023>\231VH\277\017#\242\275[y\n?\204\235\355\277\271\214\355>\023\207\237>\330g-?v\215\r?\232\006\021>CN\026?\0166a\276\334A0\275h\205;=\240h >\217.\335>g)\347>\223\002\244\277*\247(>oX\274?\350*\236\275\226\366@\276K8\023\276H\230\303\276\261\374\265=\221b\372>\266M\025?Y\315\n\277r\r\230\275]\336M\276\000\237};\263\226Z\277a~\'\276-\376\206\276\210/\325=\340\336\253>\300P@?\247\274\276>\360K\236\277\034\'~<,%\245\276\033\226s\276\031\354\361><A\373=&\r\305\276\036\345\344=\315\352\244\276\243\320\217>\004v\221\275\332\336\n?{\260\230?\021< ?\305\204V?\253\214X\277%\372i=\330\275\204>\246]\252\276Lw#\276L\334\303>\243B\237>O\336\254?\201\013\221\275\251\303\222\276\026\276\365>\223\227\245<-\254\207\276\231$\201?])L>}\234&@\010\352\203\277\225\344\270=\304\211\266:1|\373>,\277\307\275\261\311\273=p\303\223?\000\210\237<\024\245o>\340\350\210<O\032\340>\225\016\337\275\005z\216=\2108\331=U\313\031\277PE\307=\314\240\201>\234M\362=\332\301\215\277\313\224;\277\273\314\026?w\370\343>\215\234\016\277\346\346\207>$\223s>\324\310\221=A\315p?\222{\374\275\000>C\277\226B\'?j\364\235>\250\334\275>\230\025\224=W/\'?\363\302\017\277\2347\342>\347\021\033?&q\212\275b\005\316\276\324\021\250\275\374*\031?[\253V?#\303\016\276\250\234\262\276\007W\024=+\032\325?\225J\026?\032B\227\276\240\366\334>=!|\275\251R\321\276\"\252\266>\t\272E\276\273T\037\276\376\016Z\277\200\251\007\275W\013\257\276\301\374\253=]\017\345\277\004\324\322\275\343\231\r>\337z\312?\277\241\251\276\031\236\350\277L4\020\277\227\210\013>\010\230\344;\024\236\331\276~\341\322\275J\361\017?L\301\240\275\374\310\270=Jq3>\224\330\235=\300\265\365\277*\327\232>\256w\256=\266k\224>>yN>\226\315\002\276|ay\276\200\222\367\273\265\310\337\275\307\\\325\276\224\221\311\276\2136\013\275\355\001P?@2\246<\330\376X>V\247>\276\303s\371>\370+\317\274\300\342\032>=L\301>\346\021W>z\227\224>T\334<\277\206\211\271\276\035\253b?\271\010\027?aS??\270\344\325\275u\037\213\275\322\254)?\276\202\227=@\036\202=\317\377\211?L\313t>,a\324=8\014\032=\2452\224\276\010y}\275\002~\257>\252\304t>\266\252`?\224\215H\276Zm\304>\034\256\217?y\331\023?l8\327<\335\320Z=\223Et?RH4?\307\037\252\276\024\036\206>\036P\244\276=NO\277\217\r\002\300\310\216\003?\265\327)\277\005\202\211?\366G\351>\"\267\272\275\345@\203\276\237\201\017?\220l\217<\213\314I\276\206\335\205>w_\032?\343Q%\277\212Gw>\210tB?\301\023_<\024\203\316=\3540\300=\274\325*>@B\254?\224\303Y\277\353v\017\2772\035\226\276\325Y\276?\274]h>(O\203\276\020\227\306=f\003\005>[\331\005?d\221\210\2770\n\365\276`\'\317\276\302\307F?\371\t\275?A\006\366?\332\356\311?\372Z\254\276\342\307u>\324h\204?\305\213\330>?\311<\276\222\337\221\2766M\332?\307\310\327>\021\315*=[\270A\276#3\331<\370\206\007\276\357OD?\253\203\250>Y\031\266\276\264Z`?\363:y\277K\356\375\276\013\030\315>\242@\023\277\247\375\031?\271i\256\276\035\262c?\024\317\347\275Y;\205>\215\2208\276\324\334(?x\032\004?\257pW?{ 6?p\330\004>W\346Q\276X\006\n\276\310\261\000\275]\304\351:I\352\322\276\352\277M\276\\\317\277=zV\300\275\016\330\334\276\021{\362>\254\341X\276\264s\353>\272\200$?\340%g>|&\342=\000\365\212\276<\376A\274l?J\276\306\250\347\273\255\305:\277c\263\315?\226\034^><\330\351=x\031t>p\305\242\277c\374\204\277\031\311\272\276\365\217\331\276\374y!\277\277J\203\2753,h>p\264h>\343\252.\300C>\241>\016wr<\201\027\234>%dW>\207Y\266\275l\351\350\275\303XS>6\347\350\276\njb?sQ\351\276Bb\030?\033\\\376\276\000\321C>\2323\306\276H\223\325\275Y>x>\023\377\024?\213\256i>\277\331\177@\324\2069?\177\036\240>QQ\244?\256\217]>\264h\006?\305\377\351=[\206\256>O\367\314\276\351!\262\277\001\355\306?\214H\236\276y~\004?\213N\223\276\320@u\276\260\370X\275\013\367\006\276\344\210\267?\000\210T\271\222\225\030>\324\357Y>?\311\000>G52=gU\222\276\201\226\355\276=7\001?xcO\276L\201\206\275m\333\213\276\203L\t?\361.\361=j?\201?\350Pj?\221\307[\277(W\202>~\376\213>\374\204\307=\370\365\243>\017,b=\031W\216?\250\271e>m\"\"\277\035K\222\276\257h%\277\356\322\220\275\275gK<\"\2717\277\232h\032\276/i\262>\233\327f>Q\2568?/\244\276=m\203p<\265a\320?\255\214>\276\302\322 ?h\240\336<\030]\005\277\251;g\276\202r\r?\027\211t>M\025S?\315QN\276\350\337\230\276\030\342$\277\365\372\014=\025\200\267>\242()=\374P\340\276k\323G\277\260+\351\276\366\303\237>\315u\205?\337\340R?r\327\205?\306\242\032\277\016\002\014\277\277\031\375\276F\353L\277\360\036\344=^#s:\311`X>\214\214\334\275\020\326\215\274X-Q=;a\274\2778y\204>@)F\273`V\271\276m\357\361\276\314\340\204\276\300\275\315=\236$\361\275~H\021?c\344\246>\222&\242=\303\306\204\275\274\035W>\300%\021\274\000\300\265\272\210\331\211>\264\244\312\275RxY\277\023\216\206\277\202\242\t?\373\326\265>\256\321\016>\205\350\006>\261F\325?Ou\302\277\032\\\315>\342%\226>\257!\224>\014\255\251\273\226i\237\276fD\322\276\247`\325>K\3203\276\321\330\221?\306\000\210?\\J\361\276_D\274=\264\3119\275\231\266G\274]t1\277\230\372\266>\374\005\357\276\351\021\311\276\006B\302\276Lj\"\275\263\325@\276\nW\313>~C\354>\016\337\272=\027\3677?\314c\034\277n\3148=\223\241U\277V\351\\\275\003cD\277\373\374\035?\261\303\241?bN\332>\362\236\315\275\t\274\303\275J\236\321>\322\344S\276N\"\207\276\234\305\214\275\203V\234?\265\342\001?^\036\363\276\007\244\225>I\333\330>o\315\206\276.\276;>\250\177\346\275Z\006\020?\344Qn>LW\r\277\323q8\277\366C\307?\240\"\203<\370|\016=4l\240=\236w\326\277.e\003>\025v\253\276\375B\351\277\326\0229\277\213\n^<(4a>g\203\212\277\3218(\277\002\363A;\nP3\2773\204\220?\331I\231\277\356\306\214\277s~z\277\210Q\352\275\360\007F\277\037\324\024?\222\354\026>\350Jh?\243Gx\2760R\313\277D(-\300\304dZ\300s\314\325?/x\303\276\222)3\277t`\222@\215\264\337\276\265\031D\277\373\375\300?\013\3235\277\237\307\001?\365\321\371\276\377=s\274G5\250=\206\316p\277\367/\t@\035\321\273>\r\267<@\031\033\276\277\021b\220\277\214\017\332=[q\213\276\240\204\357=T\235\234= 8E\276\006M`>g\037n\277\203\207_\277Q.\200\276\257%^=\207\201C\2758\365\024>\372wh\276X@\371=M\244\250\275\365\315\260?\340\326\333?\371,\240?\025\236D\300\210QT\275\264\316\205=\320\035\207="
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content: "\247\3711@[\332\026>\342\035\210=\032\342\346?]T\202?\243Q\236?n8V\277\016h\316?&\020\262\277\322\2053?J\265\355?(<Q?\217\024\240?\200\240\013@\227\340\342?8\341\033\275Q1\252?\374\225\341>\305\201\016?\006\371T?\\\337\260?\374\350\273?1\005\266?h\2304@R\264\210?\3655\226>N\302\257?\375\213\312\277\360O\223?h;\226\273`p\"\277=\227\204?\000\312\311\2767J\235?!)I?\005\327\255?\327V\304?\226\332Z\300 >\004?\213\260`\277\010v\006@W\0209?\000\000\000\000(\245k?d\326\313\276\000\000\000\000\000\000\000\000\000\000\000\000]B\343\277{\233\333?\344\254\217?4f\346?u\005\214\275\000\000\000\000\000\000\000\000\000\000\000\000\263;\253?\276\365\002?\222\262$\277~\265\t\277\377\330\342?\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        tensor_content: "#\264\262>\241\364\347\276\036\246~>>f\n\277\310\226\024\277\366\354\227\276\257\327\325\276\216\t\026>b3\334\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 2.934704065322876
      }
    }
  }
}
node {
  name: "decoder/de_dense_0/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_0/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_0/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_0/MatMul"
  input: "decoder/de_dense_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_0/Relu"
  op: "Relu"
  input: "decoder/de_dense_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "decoder/de_dense_0/Relu"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_0/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_0/MatMul/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
