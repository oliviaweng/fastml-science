node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\377\205\260?Y3\260>^\353\235>f \244\276\371je>,@T\277\004\375\244\274\'G\360>\014Ie>\216^\326>_>j\276V\326J\275\t\3667>\306\313^\276\317k`\277c\362\347>\213B\276>\2738\232\276\273\303\257\276+\024\367\275<rW?\367\213\353\274w\216\010\277\236\001\222\274\262\235~\273Hy\014?\031\257X\276\245\213\306>n\377:=tf\020\276h\241\035\276d\372\214?Q\022\337=\275\361\242\276\255\300J?]t\206>\312\262*=\366\030\016\276\204\204A\275(\364=?\222\202.\275),\'\276v\335v\276\037k\273>\354Cj\276\210d\267=\314\262k\275;\272\245>\030\345\341\276\217\253\207\277M\306\n?<\222\241\276\016\020\200\277\350\004\316\276\345\3466\276\240]\212>\031\374W\277Z%\014\277\023\211\310\275\253\370\221>\272\0024>\037\363D>w\002\326\276\322B\314\275\r1\230>\\\317G\277\022$\260>g\366+?X\325\330>J\377\323\277\357]W\276\346\331G\274\250\353\243\276\226\301\010?\376\234b>\202\220P\277\007\034\005\276f\336\365\277B\361\032=\3520M\276\316\205\030>{\220E\277\260\240$\277\304\213\343\276\362\232v\277\310\231\367\275\200\346\215\276\353\300\n>Y\270\217\277t\262\372\274\244p7>\t\221\212?/\032\201\277\301\037\022\276\360\n\013\277\314\212\324\277\026\300\312\275\375\264\234>\357a\026?E\373\360\274\007.z>B_\203\275\221$\304\275\274\037\221\276\257@\255=\025P\337>\241\204\200\276Z\005E\2775x\034>\276\325\231\300[hi\276r\350\204=\335\256\230\277\020\030\000>\340`x?@\306\035\277\232\233i\276c\353\014>\252\022?\277\304\305\"\274$\240\267=\310\027\033=\375&\333\2756\\\300\275\270\013\206\274\255\211\260\275\270\254*=\022\3106>\212\347\007?\301\216\234\276\206\200?\277\035\n\272\274m=\370=\004\226C?G\374\217\277oU\274\276\332S-\277\353`Y\274\356\310\346>\201\346\342\275\275\340A>\274\377U=\036\375T?\263\323X>\301\246\323\276\020\344#?:\2276\276\354(g>\260\211\232=kR\254\275\225y\026\277\324\242\004\275\347\306C\276XK\177\275\236.\016?\233=Y\276eo\r=\265\3122>\265\300?\276\244\233\266\275\350\365\374\275~q2=`\206C\277,{\242>J\325 \275\250\316\020?\306 \362\275\340\375$\277X\213\033>)\325\025>\377\347\316\276\256\247\315\276d\037\312>\332\357\035\276\313Df>\367\010b>q\023\003?\363E\224>\3318h\277\316\227\225>\202\221\353=\237K\323\276\204,\307\276\350R\371\275\251\000\033\275\307\221,>\251\007\304\274\300\353\353>\335|n?\331\223\233\276x4\033?w{.>\234\346\241=\275\346\022?$\017\027>\322\314\272\276<\034\223\276\271h\371\276B\347\261\276\341\"\022>\351\253\212=W\352\177=c\307$?\332{\323>T\001\244\275\325\305\006\277g\263\363>p\344\034\277\347\024=\275%gU?\252\370#>\304)\226\277f/Q?m\263)\277\032@\352=\262\221q=\312X\245?bc%\2769\273\372\276c\212\332=\'\3464?\274f\207\277j\332\344\275\356\354\241\2751\234m\277W \241>\355\021\206?\313\337\033?\241BH\276\353\221\354\275\367/U\275\221&`\277E\301\222\276J\005\000\277\'@\336\275\265\263U?\212\2405\276p\004i\277\242*?=\020\3612>\256\345j\276\326b\031\300c\337;\2777\204j?\342`\220>d\303\310>\214B\226>\3576[=\272\372\016>\251\337\261\275\350M\365=\200\036\002>\200\346\225=\024z\315=\303\215\n\276\020\277\267=|]8\300\211\210\260\276\327\325\256>\315F\373=2\032\260>tg\216\277\034fG\276=\030E\276tS\205>\365\027a\275m\301q\276\231\304\230\276\n\216\324;\304~\232\276\320\204\335\276Caw>\360HG?-^\n\276\326e\005?\355\036`>5\340\263\277\260\306\013?\014j\240?Ih\365;W\247\241>X\0273\276\321\352?\276\021F=\276\357ib\275\272\211\014>[\306\275=\256\203\205\276\222\231\033\2761\337A\277\376ac=\351u\031\277\227r\203\275$N\366\276\342\243\226=\211GA=\030\365\232\276\027\031,\276*\351\236>\202\030\216\274\365r9>\212\240\013\277BT\323\275l\001\310=\327\022\232\2762\305\255>\200\327V=\226p\201\276\232bz?E\033\'\275+\3639?&\376\211=?2\233>-V\220=w\006u\276]I\007=\006\006\200\277\217\332\210>v\377\227\276\244\244]@\305\256\310=\237V\314=)\327\213\277\246\032\312>\003\211F>\357\322%\277\264W\024\276r\3536\276\023R\300>\034\236/\277\325q(\277\361\300l=k\313\227=+\211\242\277\321\2560\276y}l>\341G\347=\242\240,\277\341 \r>4\241\222?\337\356\021>+K\252\276\351Z4\277\370T\350\275\306/\024<S\372\255?\006\335z?\252\207F\277\230l\377>^\t\300\276\252\232,?qY4@\013JW\276\036pq>Pl\216=\205}\307\276\327W\355\275\n=\016>\007\321:\276k4[\277\315.\n\277\372\352D\2771\301\206=\214)\260\276\002\225\266<\210\271F\300\024B\345\275\204\007Z\277\213\325a?\002\374Y>\356\276c\277\270.\241\276\024\371\327=]3\t\276ST>\276\023\030P=\336\026\006\276\200V\033>\020\215\036=\020\247\026>\3503\374=@\247m\275\014\337<\275\331\233%\276\330\357\003\275~\306\211\276I\233\307\275\246U\360?\004\333\220\276\270>\356\274\377\367\203\276\313E\334>#Z_>.\224.>\201\0003>M\350q\276\354\201U\277\353\2331\276s\357\264\276I\267\022\275\212Qo?y\374\304;YMC\276\233W\216\2764\032\214?\361\371\236\277\322\307\215\276\n{\024=z\002<>\0073\201\276\"`\214\276(\306\313\276\226\'a\276`\021\255<\225\347\022=\332\253\243=M\221\034\276\244\366\266\276.\317\037?\376\233\034=\301w<\275\035\3737=\263)\006>\260\253\235=\350R\230>\366\267\254>\360\017\267=|\026y\276m]\003?\247\337\321=\375a\312?\200h\247=\367\275\223?u\020A=A\233A?\202N\023>e\370\204\2761\237\253=\205\212\342>\334\\\377\276!\003r>\016_\353>`\371\315=ux\276>\364GX?\203< ?Y\342\000?\206\264.?C\301\267\276\211\373\266>\331A\245\276F\245\364\275\270\023\n\300w!+==&E\277\370\306\034\274\243\367\273\276\227\207\333>\025\335k\276\3245\002>\353\336#\276hT\331;\250\332\206<\263A\320\275i\007\003\276[\n\246>&\340\234>W\322o\2760\215\270>\324!\217>\031\273\221\275\373U\"\276\324v\367>\275\3679\277\023N\225\275W\256\213?\264\3366?\213\017`\277\016\036g\277s\307Y\277\234\246\226>N<$@\025\3326\275F 5\273\'\310\236\276T\3453\276\026\317\325\274N\021\004\276\342\333\313\275\307`8\277\266\035\274\276||\301>\264G1\276\0354\230>\\\301$=\317Z\003\3002\006\265>\213\376\311>\332W6@|\335D?hs\312=\001\332\204\276[7\024>\207\366\245\274\220\331\023\275X\310\277=F6D\276@\352R\275\024{O>$\000,>\014#\330=\024\000v\275\222z1\300{\255\000\277\306\271\344=a&\n?3\010&?\262E\t\277e\023\211\276G\323\262\275m\022_\276|H\340=2\024\037?\344k\325\276\227X$\276j_\232=\374\330\345\276O_o>2\224\005\275\342_\206>W\323\307\276\"[V>4\035k?\217\020\241<%\030\006\277\'B\n\276\3729\005\277uK\023>\215y\276>4D\244>\362m5\276\031\273\003>\317-\324\275\333\373\'?\024\340e\276\017\242\222\276\\f\020=)(\220>\036\000\033>\347J\026\273]Q\313\275K\377\200\276\364O\332\276\225\320\023>\217\352\320\275<\367K\276o\020\222>>\3425=\270\220\313;\260\235\331\275\320\2236\277\2114T\277\242\362\303\276\302\315\222\276\003<\223\277g\354\002\277^v/\276\010\274\301=\270DM\277u\\\207\276\365\215O=\311ro>\320\007\377\276\033\034\253<`w\257<\355\331\316\2776\344\250>\220\222\362\275\030\250N?v\334\023?&\360\317\276\206b}? \034E>\210uV\276m\335m\276\241@\200\276a\006\231>\325\374E\276\260\321\202<^^\333?nb\220\275l\206K\276\366VS\276\026c\237>\253\242\237>{\264\'\277\252>\201\275)\252.?r\t\000>i>\260\275\301\232\242>TsJ?\215ZU=\342q\034?\247T\031\277\"l\232\277\267\222\035>\327J\351\277\227e4?\3310\345>B\305\321\276\256\314\204=\300-\002<\334\271S<rLP\275\307P=?\363\r\200>\003\n&?\333/\357>\233\331\345>\2019\014\276\226\276\355?\005\271\"\276\034\245\363>\340\233\225\277\275\210\236?\332\217\020?\355\201\344>\265\331\235>H\007\325>\211$\232\2757\307>\276\000\365:<\340P\362=m=\274\275\002~1>\234\"s\275s\3776\276\340\245\370<\330\217\273\275\325\037.?Ir\356>\260\207\000\276\371\'\236>\030x\006>\026]\024>L\374O=x\323\214>\032\374\177\275\270$V>\013\255\274>\233\361E\276\315;\340=u\202z\275\371G\374=[\0246=\320\222\331>\377\r\247\275\277\221L>\330\371V=\2750s>Ku%>PT4=O9-\276\377\2670?\322_\202\275\227\363d>s\377>>\026U\353\274\362\330\237>z\305\027\276\265w:>\203\017\232\275i\353\023?\246|\364<\263xt>\345\310(\276\274\301m\275\224\375\301\275\256\027\220>\211\2403>\000\026\352=z|\307=\005\354h\275J\337X\276\360\273\202>\037(9\276\020B;=\024\242\212>E+\013>\314\353\220\276n\372\350>\023\341\262\2749\033\031>\035\256\231>\341\272\335=\335\301\211\273P\233\213>j7\006\276!\372\225>\2208\251:\242m\200>\233\303\361\275\335\244\321>\321\231s=\302$\303\275L\374\311=t\324\031?\203Ps>y\347\207>q\027\216>]\3363\276\200\023\355>3~\302>:\365>=,|:\276\027\002\206\273([\034>/aO\275\031\261\363=GZ\r\276\232x>\277A\211\245>\250P\302=J\241F\276\221\362\240\275tU\032;wX\227\275\245\262\220=|Z\337>\213\337\251>\3727\340\274\330\024<?\357\304\014>`k\217?\262?\240>\311\234\037> Y\324\276\225\376\215>\030\3112\272\323\230g>EY\300\275\271}[\276pu?>\310J\237>\347e#?8\364W\275_\031\244\276\007BU\276.:t>\243% >\376\301\311>nA\215>\306\244\202\275\336\244\372>pV\245>I\351\276=\344\334y\276\330\025g;]\216V\276\313\371\346\275\024\230\210\275\004\305^\275\224\314(=\t\004\'\2760\010%=\2024$>Xa\006\275\260{\230?\332\355H>]\274\004>\177V\203> R.=\243.h\276\177\310\204\277\331P\030>\036\223\273\276W\312\204\275\216?:\277]M6?\305\211\022\277k\312{\276\245\020\240\275\220\201\346>N \252\274q\271\010=\246B+?\001\020\241\275-\242\204\2768\242\272\276\205\241\360>\352.\377=/\024z\277\366\313r\276\026\224\332\276\213\263]>m\000c=\372c\244\276\223\221\027>DO\265\277\211\352\245=\377\342%\276>/\256>!n\262<u\372\032\276\314\254\300>7-&=|fp\275]%\347=\016:\200\276=:\336\2767\372\242>\252\007`\276s5\266\276\354\227\330>3(\006?\351\210b\276\306\311\210>-m\000\277\376\206\341\276n\0308\277\346\026\030\277?\223\002>\3234|\276\331X\223\2761\341\321\273\204\243\020\2743~\304\275\301\367\271\275nW\224\276g]c>\313\017\236\300n\330I?oWb?K(x\277a`\372>QV\363>\373k\001?\334\327h\277v80\275t\364\340>\262C\222>r=\203\277\235\361N?{#\357\2750\036\370\276\210\232\265<0\t\003?a\276%=\260+\303?\0102\206>\210\022\030\2760\221\312\276\350^8\277\207\215^\276 P*<a\211|?m\226\203>x\035\022\276\223\277\351\276Y\276\262\276\246\241x=e\226\201?\014#p\276!\332\022\277\345\177:\276\020\002\003\276\267L9\277\226\310\001\277\343.\300\275\207h\264=k\270\337\276\023K\214\276\362\tC\277\331<\204=\251\246\007\276\3125\233\275*\271\030?\0166\210\277\016bw\277y\216l?~\217\252\277\322\225\322\274\354\210o\277T\200\241\276\352H\'?\253\216.>\007\372M\275o\002\023\276\340\025w=\310u\246=\264m\204\275\n++\276\021\2263\276\230\247\024>\334\035\262=V\254\017?\030?\277\276y\245\216?1v\034\276\276\212\234?\351\356_>\372\271\017>\362\314z\276\322sy?\016\013,?\2420\027\276\222\246\226\276g&\256>\2623\205>\241?\255\275\000\346z>\377\352\363>~\205:=>\242\367<R\260\030?[\356\004\276\314n\266>`\360{?F\2354=\362\3628>\346@-\276\307h\202>\354\034\317=\366x\377\275q\226\274=\276d\022<:\000\205>.\263\344<\r\355\226>\332,\017\276`\034\221>r\351\201=\013\036\010\276\277\"\004\276\227\224\246>N\314\037\277\3067\355>\177\270\267\276Yq4\276=b\002?L\274\212\276\317\020[\276Y\3462?5\337\327\2765\237\273\275\373\350\237>\336A\014\277v\225\025\276\031P\345=\246\020w?x\214\316=\2465\341\275\030/\234\275bH\361=*_h\275`\351\200\277h\255=\276\241\t\362>\320D\360\276\213\250\212\276^\252\370\274\024\232\363\275V1\274\275\3545\236\277_\326\020>i\353\002?=\315\246\275\006N\215>\372\263\307\276\320\037\254>\366T@\276\274-r<#\220-?\211\005\263=dS\215\276e\300\355\274\007\314H>\274K\226?8\312\274>,5m?n\217\302>=H+=\317\375|\273\003@\031\276q\333\244>17\316>\307\033C?5\220\177\274f\005\370\276}`\010\277nD\301>Y(\213>\346z^?\251/\251>@%\337=\323%\222>\031}$\276\002\254\020\275\345 \023>\342\261\264\276r\333\366\276e\326\213>\"z\024?s2\031>L\200\210>\337\261\341>:\326\200>\312Z+\276x\372\211?\301)\005\277\016\r%?\256\254)=C\276\233\276R\344\342>\255\361\263\273|YM>\250\030/>5\207$\276d\241\317=\217\325\271\275\300\033\254;\363\020\364\275\004\206\030>:Z\310>\355\251q>#\313\302>)\316\365\275\3423e\2768\000\363\275\242\317\315\276\306\257\230>\312\337\007\277\317+\306\276\340.\200\276}\226~\276\376\356\225>4\'-?\264\017\203\276i\201M>\322\2739\277\335\r\233\271\312@\207\276\r&\267\276/\310\013\276\n\037\252>\017\n\017\277\232LX<J^\305>0\202P?9\327\305?C\322\223=\214\367P\276\035\364\026>\376\314\310\275\265\323\315>\305\344\3438\"\332\273>>Y\202\277\340D\3429\026\330/=\254#\032?\327\256\220=mY\000\277~\372d>a\t\250\276\321\233\033?\002\326\262\274\341XU?\250\261\347\275\364hv\276\tQ\013\277\311}X\277X\014m\276\352)A?\372\3547?2s\223>|;\256\277\341\275\"\277;\212\256\276\302\365\275>\204\275W>\007*\321\275\376\010\351\276G>:\277\300Rl\276\007\r\n\277\001.\036?\203p\227>\rr\263\274t[\024>\351bX>W\344\\\276\300\262\336;7\216g\276n\251?\276\267\253\202\276\003\257\201\277\357\237\275>\\g\036>\273=4\274hu\034>\2241\220\276\013\264\316>-\341\252\275\336\025\363>7\235j>\203\270_\276Y\007v=E\331\271>\377@\316=\354x2\276Tkc\276\352e;=t>_?4S\201\276\211{\211>#\246v>\261\203\252>6a\241\276\203\025\302>\205^\210>\007$\263\276\304\255\\\276\23702\276E\365\304\275S*\252=\021\236\010\274E\300\266:\276l\245=\362\0251?$\311\302>.c>\273h\013V\276\214%\032\276\2546/\276\023\307\346\276(\221c\277~\261\004?\314\256\303=\207+\207\276\264\013\010?.\271\017>f\tL\276_\025L\276R\204\234\275r\233\354\275\220\367\'=,c\024>@<.>\224 <>\300;\360=GQ\007\300\036Z\374>\307O\035>i\212\316>\356\233\t?e\306\312=\265\017\\?\350K\017>\251\3726\275\351\034\244>V\3056>#Q\353>\217;\233\277\355G\361\275\212\214g>\377\300\317\274\263\200\322>\362\376\346\274\372\351\267>gx8\276\016\377\264\274\221\274#\274 X\346\275KD\034\276\033L\315>\014\257C=\313\232\026>S\203;\276]\232[\276B\0052>\370\362D\275%1\327\276l\023d\276q\235\316>b+\330>\016KA\275\252Y@\276\306\034b\276\360\\V\276\200J\004\277\255\010\213\274\222\020\201>#\374K=\366\315b\275\rZU=\260x)>X@\364=k\323\263\276\256\373\315=\273\264,\276I\034\004=\316,\010\276\324V\260=\265\315E\275y`E>\346(\242\273\006@\205=\367]c>\321\223\315\275\023\356<\275\320+\344>\302/\231>!\220t>X0o\277\007\312_\275\177\372\022>\363\243a>\022\2236>\022,\342\276-w/\277CFY>N\214c=I\245\212>YFg\275nF\223>\024\3736\2746\2537\275\202\317\325\276\322\246\014\272c\247\211\276\272\263s=\010\263\200\276\001\276T> \271\221>G\351\243\273\204\255\232=\324\324\257\276G\350Y=\332H\275\276\343{\311>F\025\223>9\364\334>\r)\207>\240\035\250?S{\323\276}\337\016\276Zt\227\275\212\300\336>\212\265\221=\253\373|;\202k\244>]\310\371\275\002\276\r\276\265\010\220=\346\301\237>m\261[=(\350\360=G\007%=\374\"\245<Gc\226\277\311\243\344\275\262$\030?s\222L=*\230\215>\364\025+?\243\207k>7\270!\276\247\251\306=\374|\006>\315\352\237=\250\254==N(\214\275z`D\276\334\275\346=X\036,=\204\023\324=\361\177+\276\010\231\316=[\260\342\276\201\323\177:\217\373.?\256\377\021\277s\215\027?\371\340>?\016\024\360>\177lx\275\267\002\246>u\364\220\276\232*\215\276\223\235\217?\206\006\356\276\310d\317=\201\231\342>\254\2567\277\006\200\274\275\027\275\305\276E\265\013\277b\320\321>)\212\266\276\236\024z>gX\304\276\ry\006>\246\244y?\2108\246\276\257\3361\276\374\"\033?M=\260\274\367\3436\276\366\3708\275\252\313\367>\305\224\206\275H\2173?=/`?3\227\226?E\036\334\275SYN?x\t\335=\371\005\325\274g\257\001\274\261\"\327\273\024:2>I&\020\277\005\024\004>\356\356\272>&\3018>\010#{\276V\242\267\275J\256\341>\304w\267=\276\333\260=\335,??\357\324I?\0235z?>f\212>#\347\203\276117\276\343\226\373\274\331\256Q=&\343M\277\244I\227\275\352\375\324=\023\350%?bq\367>N.\034?d\020\301<W\251)\275}qo\276\030U\303>,\244\021\277\344\366\010>\246\203\245\276\333\347\023\276\030\370\225>\233Q\031?gv\272:\221\242:>N\004\027\277\3375\230?1\364+=\374\003\363\275\033\214\333\276\367\365\371\276\227g\302=\330\n\326\275r\027\232\276\370g\317\275c\252f\275S\350\022\277q3\321>w\211d?x\'\205\277{[\311\275\225\000h\277\352+8\277\305\333\207\276\244\215\"?4\3755?\313@\026?\034\013\026\276i\233\254\275\223\200*\276\021\352\304\275j\020\331\274\374C@?\252\003I>Z5\016>l|\001\276^\247\227>o\3561\277JG\203\277d\347\204>\355\252\034\300DU\254?\3003\236=R\350\251=\350\243\022?\213\031#>6A\227\275\212i>>\014z\255=\314\253\222=@\315?=\000\347\366\273\264\322\247=\016BK>\244\334\037=\036\270\321\276r\306\201>\200\212\200?L\342\006?\231w\374>^ \232>\017\341\233\276\3000\231\275X\375\217<\002}\306\274r\312S\276\263\315>\276\001\200\204\277\312}A> \230\375>\320\032\244\2768\'G\276X8\251\276B\251\027?p*\322\276?\'\273>\240p\353\276\310\211=\276\370\373\r\276/\205\005?\273\347\265>\216\261==\0067n\275\226\213l\276#\230i\276\257\037Q\2769\027!\276e\033\257=\361\005V?\200\260\201=\020\312^\276\242\032\020>\030\3655\275\212\336\360\275\256<\214\275\336u\241\276\221\320\330=\022\212\002\276\365s\362\276\207\r9?\233\353I>\253\357|>\224\232\003\2769J\305>\374.U>\235\377w?\221\025\177=]\346\005>\206|\017>\214ai\276\255k)\277\010\331\251>\341B\366>\333\225\030\275/\023\333<F\270\261\277\270d\200<\017<\364>9\364\314\275ZQM\276\213\014\377\275dd\304>\233\017\227\276*\312\350>\250%\340\275\276\202Z\276\212\031V\275\014\321\351=\272\274p>\344\335D?\211\225\272\276\340;\365<\221\005*>hL\337>I\014\270\276\256d\341\275\332\310\263\274\023[\241\275\266\303\216\276\225b\213\275mha\276\215\372,\276\361\251@\276)j\263=\232\033\300\276,\220\031?C\225\002?wN\002?m]k>\256\223d\277\265\027\377\276\241\364U\276k\256\002?v\375\013?h\025\037\277y\n\304>\031\321\337\275\023\274\r>\026*\025>\227a-=~p\347=\252\007%\2766\306\033\276\355\341\305\275\032\215\027>h\263\370\271\377\226S>t/`>80\026?9|\223\277\324\032\354\276\004\313O=\031.P\276*X\205\276x`\327\275\340\233S\274t\325N\275\363\037\003\276,\222;=\374\271\320=9\365=\276x\345\272\274\315\305\014\276o\301\263?\0359\340>\200\215\253>C\312\272> Y\026?\353\'h;\tX\262\276\312\264d>\037I\"\276\307D\236>J\204$>eo\240<\213<\260\275\267\316\271=\222^\230>\032\0261=\'\'\326>\013\217j>4\336=\275l\252,<\207j\322>\032`8>7\020E=1\260\'\276\023\021H=\247\360\225={\030\021>/\343x>s\305(=\247\202\211>[\326\273\275Of\354<${\313\274\226\025\257>\265\024\240>\270\307\210<h\312\372\275\037\210\275\275\215\346\204\276\r\336\310>\177y\355\275\\\252\242>t\336G=p\030\312>\023\215q\275\001R\227>YJ?\2768\365\227<\244\225[>\032b\211=\3305b>,\245\313>\237,\237\276t}\207>\211\304\217>\016\311\022><\223\320>A\n\000?u\034\020\276\324\366->\227 \202\274\226Q\'>\265\023\221\275\266V\215=\254\356\t>\366\351O\276->\026=\234\031\235>\354\344\203>\037^\321;\221\026\014>\235&\215\275\353Yy>!\373\252>\313\207!>\027\277\335\275\374\216a\276\375\306x\276.\315\213>Q\365>>\\6!\276}\t\030\277\310E\263>\372\276\244=\250\341@\276Rv\013\276\360\017Y=\370v\271\274RK\201>/=\357=\244\325\226>\224A;\276\205(8?j\234X\275\370X5?F\215\344>N\277=>\207\251\311=\\\0238=\202\341\031>\264\2254>G\313\361\275cH\031\276\311\004d>qk\226>\261\r,?\335e9>\256R\252\276\035Un\276j\256~?\252\301\024\276.B\341>O\0203\275\214\315u=q\370\355>\345A\257>H\220\277\276\231;\264\275\002\035q\274I\235\365\273\275\256\035\276\000\202$\276\340\021\004\274\240\356C\274\263\255?\276\360\2357\274\3207\215=\300zx\275\026\373\313>\025\304\013>\346\243\270\276\345\362\212\276\241+n\277\327\177y?M7\311?\262Lr\276]I\301>\236p\213\276z\357\223>z$\023\274\177A^>xT\247>\n\343\231>\2269\206\277s;`\276f\263\032>\357\356m\276,\314\002>\217\333\322=\312\200\354\274\tMS=\3520\246\275n\224\273;\264n.\277;\024\\>|\221|\276oCU\276\335\221`=\272\327\235\275\317\356#\277\347\341}=\006\200\235=.K{\276\374\303\020\275\206\0138\276\010x\241\276~\343\356<\322\"!>c:\177>\010\t7>\257h\022?x\334\242\276{@$\277\020G\206>]\273\335\276eS;\277Q9\276\275\026\277\300>\366\317\272\275,J\026>_\263\207\276F\270I?bU\263>\366I,>\341u}>\033\320\213>\207\253\005<\225\031\362\276\177\010\r?$\262\272;<\361\353\274h\347\312\277\212\336*\277st\274\276s\000\262\276=N\265\276\n\017\204\277\347R\202\276\251v\342>\365}\034>\267\226\277\276\334\256}\277\034\031\221>\246e\334\275\320\243\367\273_\2426\275S\0278\277\301f\t?\325\313$\276\013.\305\276\2544e\276\005k\002?\241\2740>`\210T?\356PB\276\024\272q\275\260\005\276\276\027\277\302\276\002L\272>*\370\312\276 \356\212>\365\025\016?\003w\027\276\347\022\304\276u<\n?\300h\202>P}\314\276\020GB?8\245\330\273\334@\273=\376\335\214=\217\377\260\276Q\202\224=\274h$>\216\326c>\260l\247=\373i?=\336\254\027\300A9U?\246x\036\277\257\353\337=\354\002\305>\337\267\204?\0249\036>S\266\202\275\\Q\325\276\305$\344>i<K=\214\347\003=\340\301\034>0\203\000\2764\001\206=\314\307\273=\220\220\346=0F\246=\032Q6\276\360\275b>\204\252\352\274\202\327}\277!\255\206>\2473\007?\304\305#\276\270\232#>!,\200>\327\314R\277\301\361\020>\3608\205>\033\311r\276\316\006C>E\234\210\276\356\t\305>&\243\330\273\236\221\230\274\342b\036\277\'GT?T\220\023>\245`S>\315Y\\\275\211\014\312>-07=I#4?9\372\234>%\252<\277x\006\343>\n\357\332=\241\360\237\275\204\217\262<\201\\\247>\323\264\323\275\310q,?\354e\344>\2655\363< \231(\2752\331\234\276v\306\316\275\272t`<NJS\274V\024\363=\213\203\036\276><\323>\\8\355>\037\325(>j\313\257\273V\266\022>\341pC\277\255\355\267\2753\273\361\276\217\250\271\276\313O\221>B\"1>\341\037\224=\365\\\257>\311\250\013\277n6\237\276X\357a\276Z\351\275\2761\356\030\300\307\027\267>\320\211\004?\3014\302>D\334&>9\226\331>\205\247\307<\350\303Q?\206\255~\277]C\334>\260\201\314>h\250>\275I\331o>J\305\243\277I\376\332\276\033\255\206>\243\357\n\276\242I\025?\377\274\253\275\270\007J\277\351\226\214\2754\242U?\310\267\211?Zl\200\275TD\244\276\252\212\244>\236\225>\276\206\206\311\275M6\214?\370\317\320=\325]m>\032\032\'?\000PW\277Q\357Q?V`~\276\242\021A\276\361(\272>\010\361\261?\337\261J?\377\327\275?^_)>57\327<\2572R\276^\036\302=\271\243\t?\347\3215?\224\032p?}5\231>p\037\027>\375\025\214?\010A\r>\023gk\277\271\276\246?8}\327?|Eb\274\014\365\244=\331cK:\377\217\001>\334\376p>\326\250\256\275\014&\253=\224\203<>\020^\266<y\007\257\275\220\333)<xju=\305I\354\275\250/u=\217hP\276\177fk;\002\335\342\276\331\324\231\277\035B\313>\322e?\277\206;\315=\205C\035?\013\251\037\277Mg\360\275\376\323\374\276;!\247=B\304@\277\001o\223\276.`\241\276\030\325\265=\001\016\226>\r\267\336\275\207\007\334\276 \\\242\276l\250\331\276*\314\302\276\367\303\315>\222B\033\276_\034\014=&\004\004\275\364\010F=\351\034.<\250\"\372\275a<;\276x\202\035\276A\361\362=Z\273B\276v6\306>B\252G>]>\241>\202\305\245\275\014\212~>\330}d=\217\254g\276\365\304\036>!^\226\276i\216.>5\337\354>\264\177\304\276\320\351\375>\031c\010?\r\t\023\276\202^D>\366{\343\274\351\020\231?\237\025t>\323\256\255\276\312\323\324\275\236F\205>\314\333\303\276\202l\006=x\222\222\276\366\034t\275s\306e>\342`\327?_e\226\276\341\246\216\277\206\223\037\277E\362c\277\214\330\320>\332J\363\275|K\217\277\275BR\300 \335\312>\221\317@?J\007i\276y\371\007?\300\365\312>\361Y6\276o/\022?R|\351<U\253\371=Q\262\337>\354\317\314\276\030\237\203\275\270\277a>AS\002\275o\230\207\276\233\205\001?\3331+\277\312\361c\276\330\253F\276~\312]\300\257K\267\277\0340\203?ZJ7>\251\360\213=iX9?l&\013\277K\037\230=\327|I\277\rV\232>\317\220o?\351\233\226?*\366\220>\203\033\356=9^\021>.\255\211=_\022l>L\212\335\276\202\352\302\276B\234\034>\335\300\t\2766W\023@\0237,?\222\005k\276\020\271\222>\207\315\346\277\270`\255?\023\213\365?\020\364s\276\021\2754\277\226\256\331>\000^v<\300\332\264\275\033\210K\276\231\310\006\276\004\357\037\275\370\2460>\200\271\323\2740\323\342\274\010\027\204\275"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\262\375&?O{\035?\254\025\217\273\301\370\214>=\330x=\014\214\237>^\326\237=,qU>\335\035\370=\243\220\266>\366d\304>R\216\006=\020\0040=\207\277;>\0223\276=Z\205\300=\316\330\322>\216\206C>\034m\201>\253j:>\002\341\262>\343%\202>\3615\303=n\356/\274@\363 >Dv\227=\263\236=>\331\n+>\330\023j\275c\242\265>\302\267\n\274m6b>Z*?\275\361j\373>@\005\034\274\323ZJ=\344jD\275Mcz>`@M\275#HF=#\302\211>?x\242>\254\266\263\274\021\220\375<1`M\276/g\224>\353U\370\275Fh6>u\325\317>y\2159;][\305\276 \\\006?X\0344>\221\233\002?Z\362\305<\232\204\035=\314?\317=\267\225\315>O\\\323\274\374\271x>\237\272\022\276\207@\\>\220\3056\276\365\r\014?>\r\340=\3049~\276\244\206f>N\211\005?\030\342%>\245\035<?0\035\321=\241\035\272\274TG\217>\351\272\222>3\373\'>Z\271\034>\272\314\025\275\026PW>\r\330%>\352\224H>4\357\244\274\350\352\026\277\213\'\347=\023Nh>\366Y\213\276$e0\276\314\231\207\274\313/l\274\200\276N\275\343\316)>s\317[>\261\221\026\276O\335\007?4\264\327=\214\332_?3\002\035>\277\243\241\274\204)e\277\342\036-\275\177U\324\274\244\324\270>D-\014\275\'\305\223\274\343F\220=\305G\304>\272J\357>n\377\250\275\277\344\214\274\362d\272\274\255\020\300>\306r9>Z\247\261>\001\342\312>.\237h\275S\273)=\332\255\231>\224\267%8\306\202\306\275@d\353=5E\205\274\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\341?&?\200\201%\272\315\234.>\300\327>>e\230\005>T\202\214=\026\200\273\275\334N+=4zO>\024\345i?1\201T\276\'g\224>\255/\365>F\252\036?7d\304\275\325\243\261>J\263\273\275\210F\177\276\310:\031>0\316\001?\257\270%\276\343E\225>\357\224I>\020\326\222?K\266\035?P\331[\277\236^\246\276QIQ>\340\276\327>.%\000\276hH\371>\3311\365\276\033\215\302>\207\247\026>a\017;\276\207\304\270\275c%G>i_\243>\351\210\216>\267\0343?{\220&\277\2530S\275\312\317\276>\352\002\021\277O%D>I\364\340>]_8\277\"\332<>\351\205\322\276p\331\222>\345Ri?(\\*>\022N[>\331W\324>\270\230\207\275\200p\200\277h\031\344>jd\310=\"?F\277\202\310\273\276jy\214>\372\032\177\276\350\023Z\276\375\032K?\206\354\177\276\277*\033;d\321$\275O\022\211=\200\013\262>\017\003\307\275\370\177K>\340\256\263>\0042\302>+X\036?\322\031`>\204\366\236\274\023\350\367\275\375t\326\276\221\224z=\212\366\003\2744\217f>?^.>\235\230B\276\034\332\236>\222\326\000\277\360\224\267\2765\341A?\233\370P?\177\265\372=\333J\341>-\330$>\016\036\216>B^}\276\337f\003\276\254\027\234?\243\334\324\276\024\306K\276n\021\217\276\314!t<\346\202#?\363\322\326\275\000\316\323\275v\216\264\276/\230\327\276\323\357D\276\200\332\016?k\022\n\276\273\017S\277\323W\005?\352]\226\276\222uU>\262\\s\276m\205\224\276\017\312\026\2772]2\2768\203\210=@2f\300\345\372\245>\371x\241>V\347\306>o\335\311>3\265\220= \214\266\275Q\313D>%\337?>D\245\322>\0034o\276\356\272\177>\354\027\226>\003\232)\276\202G\010>`L\334\275\0262\205=\362\345\372\272\002\273\033\276u\220)?8W\000?)6\r\275\272\272B>\t?\225\275\231&\276\275\212z\r>\023>\213>o\373\343>\0024\243\276\250h\200\276\352\031\301<\024\224L>\024\337\324>\220\333T\275XL:\276#\234d\276\27225\276r\352\202>L\3161\276\377\363\206\276\347\301U\276\032wG\276\277 \224\275.\004o?7\207\234\275HT.<\313\375\333\276\275\2277\276;\010\211>7\367f\276\216S/\277TT\004?\313\352\323>\205\365z>\325YO\276\362&Y>,\336!\277\256\255\023?\347%\r?3\270i?\205\272e>_\r\022>\014\305U\275\305\317\260>\250\313S\275\306e\304:x?\227>\376\325\000\276v\205V>\351\347-<\233\214t>\2668\310\276f\245\007?\216\210\350\276\030\315(\276\030\021\255=5\271\232>k(\030>\270\265\210\276\253\333\235>\241\r\232\275\'^\221>\224\004\306\275x\342><k\305=\276\332y\241\276\304\205\310>\231\030\311=>\212\014>\025[A=\013\2471=5(\t\277\252\373\020\276\271I\216>\265\347[\274\222\377Q\275\231\212\030=0\001\r?U\361\273>R\337\010=\364\272\236\277\356\326\243>\304\247\013>\314\316/?\212\334\'>.\266\032>\311\345\203\276<\337\324\276P\004\254=y\343\010?X\331\205\276\023]i>Vu\301>\306,\253>\000\010Y<\214\324\">\2632\376\274N\177\334<\014\231\366>b\030\211\275\2449\206>\313[\002?{u1>t\205\016\276\223V^\275\n\2118<\200R\032?\252\275s\276\270<h\277\367\310\267\277P\031\205\277\2548n?v\337\000?J\3265?\264\212@\277^yD\276e\027\014=\022\315\334\2739\336\246>\333\377\024?\245\243\030\276\n\253\205>\362\266\177>_\2533\276\343\362\321\276\327\215.\276\265\274\r?.c\263>\nM\311\276F\370y\275\321\234\221=\251 :?\323R\336\275B}\212>\246\025\004\276e\367Y\277K\202R>\222\364\362>\374\0258\276}pI=_)\212>itT>\243~\317\276\r\243E=\222\250(\275\200\212\234>\270\233\275>\0325\225\276-\331\354=B\036\225>\363k\372>\025F{\276\356z\206=L\274\250>}\347$\277\253v\323>\026\236S>Oi\000?\236w{\274g\207\247=4Y\"?{xp;\034H*=\2530\275>\215\213\007>;w,?\312\3570?\235\362\261\277L\341=\276\213iF>\320\246\221>\206\200\244\276X\205d\2775\376\346\276\224\263\216>!N\240==\031|\276=\275\261\276\370(#?\223\021\001>X\2300>\256;\310\275+\264\343\274\016e|\277\275\227h>\355\346\250>l\227+>\023D\217>j\2237<\362O\351\276X\372.<\341b\354>\261M\230=\007\004\216>\221\002\251\276W\313\"\275L?\177\276\205d\006?P\014\200>\\\014\014\277\006!X>\2712\202\2752\300\227=\034:\033>\330?$=s\320E>-\231\034\2759\370X\274<;\020>\020\242\276=\253/\306\276`\356\310>\023\340\241\277\022\r#\276\253\352)?P\343S=a6\272>\214V~>\335\370F>\000$5>\013\251P<\3056\242>zw0>\224\322\212>\033\252\010\277\030\333\371=y\301\t\276\342\245\205\2760\033\204\275\031\354\334\275\016\256[?9\332\362\276\256\214\203\276\377\204\260>\373\232\224\272y\2072=\206\225\376\276n\013\232>-\277N<\337\205H\277\333\215\315=,\024\364\275\3451\226\276L :\275\016\210\214=\364\010\003?\246i\036\277\310\216\351=\237C\244\276\220\306:?Q\347#>\0002\346<&\005\225\276\376k\316=\2724\233=YH)>o\375\234\276aD\352;\351\321\265>\037n\220\276Y\025\242>D\370\002?\211V\030?)\347\373\276\'(\220\275T\271\311\276\227\327\240>\250^.>;\034\225\276\302\273\214=\204|\215>me\370>WK\255>\344\032\310><>\004?\022`\220\277\347\235\205>cSm\276\267k\016>\222N\343>\355\201/>\245l==\237\203>\275\036>\346\274\315\353\271\274!\0247=\211\321;\276Q,\242\274\260\250\304=\203\345\023\277\246\013\223=\023\211\n?\334\004+>\231Vg\276k5\216>\347\351\237\276\226\023\021\276\331\277\365\276\271\200\366\276\355\006P>\356\300(?\217\000F=\276\223\322>\034\013\210\276\217\257\374>\375\024\'?^\361\002\277\233\317\377>\2166\016>\202\211\324>q\2218>\246\234\010\277\263\320D\275zy=>\247i\025\276\355\027\257>\014\016y=\326\322\004>\317Ti\276l\272\035>\202z\314\275\311\225\233\276\346\006u\276c\365\253;/8\210\276\024_\375\274\375\262i?_N\243\276\360\005\023\277\034\347\255\276\301\333\273>\251\261\272>[\230\363\276\325\341,\276M\253\233\276v5X>f&\201\276YJ\231>\007|\031\275\227\346y\275\360\013m>h\265%>\334\317|>$\217>>\362\370F\274\360\211\227\276\3329\374>\244@i>\"L\203\2763\355\373>\r\230\344>;4\374=\3736\213\276\376\330;\276\372=?<\2728\010\276\002)s<<z\020?\204d_>v\215\300=\245\2020\276%\317?\2774@\017=\373N%\277n/\r?\332]]>+u\000\276\273\302C?\326\022\311=\021b?\275\374\207\341>\017UL>\216\371\314\276\267\310\256<m\'v\276N\031\324\275\277\362\215=X\370\223>=\321\266=5\344F\276=\\\234\276\207\303@>\253\243r>p\t\210>\200%\327>\271~\202\275\022q\230\273h\002\024\277\276R(\276e\260\307>V=\330>\010\225\001>{\r\260>\273WW\276\252\t\250>=\306\316=\251\276z=\305\006\021\277\364\277\010\276\035\233\206;\024\333\232\276\360\373\355\276y\346.\276Xc\025\277\251A\304\300;\355.?\302\252\334=\276\347\003\277^\000\315>id\314<\337\300\276<P\005\260=u*(\276\327\224\013?\320\275\202>\236pQ\2759H\367\276\246\2308>\364\314a\276\237\332\007>\303vF\276\260\2533>6\201\220\276\226\025;=\307U\231=<5&>\277HG\276\373F\350>\370\330\030?\324\233\213\275\233\215-\276`\331\254\275F\357Y=\'\213d\276q\255\372>\020L\344\276\376\211V\276\252\313\355\274\376\353C>\351\324\260>"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "V\202<=0*e=\276m\000=[\352\021\277\004\342\207=lh\363<\237\014\364\274#j\257\275"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: ";5\010=/k\004<\255\"\230\276L\277\320\276AG\310\276e\2734\276\260|\326>\274\nx\276\"mS\276\315\034\354>\357\325\251\275E?6?\"\230\\\276\'SP\276\360\212\002?\0057\230\276\367\364\031\27735\036>~\\\003=\236\334s>V\302v\276\243=Y>\240\242\364\275\230h\t\277\2454\324\275\t\201\334\275\373R\225\276W]G\276\200\034\307=\300I}\2768\255\275>c\247\232\276\247\375\215\275:\2424\276Pb\020>\373\'\211>~p\n\277X\341r\275W\360\007?\013x\224\276B;\004>W\233\267\276RE~>4\332\010?\270h\207=\230\325\022\277\007\323\361>\357\252\276\276\032\203\036>*\255z\276\n\343\343\276\364\014\004\277CS\t\277x0\226\276\024\263\332\276L!\205=\3156P\276\364\001\231\276\2349\220\276u1\206>\340\207\250\276\322\304\330=\244\234+?\336\377\001\277}\020\235\276\363~\255\276cv\220=\001\337F\276h\004\025>\353f\020\276\212z\276>\261\361!\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.2104712724685669
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
