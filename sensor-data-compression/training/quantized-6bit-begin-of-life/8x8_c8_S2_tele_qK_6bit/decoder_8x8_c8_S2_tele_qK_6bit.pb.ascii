node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "`\306\300=r\213\247\275\203$\022\276b\251$>\314S\023\277\000\337\325>M\331\037?\304F\246\276\020i\321=\2427\026\274\275\000\037?M(\313\276\017x\234\276\325\217G\2726\316\335\275\202R?\276\234c\252\276\330\232:?@\304p?\244\300\370>\034\204\307\276\227+5?O\002\022\275&r\303\276\214C\307?\201\344\021?\255\207\253>e[\005?\354\017\321<\024\204K>\306\323\031?\325\331i>\321\254\276\276\023\307\205=\2078\301\275\222\342\236>\225\257a?\247c\310>}\023\260>\233\367\233?b5\204>CG\204>\256\017\232>\242\204\227\277\321s.\276\321c\303>Q\327i\276\004\205\023>1G\236\276\277NF?\276\313\247\276\246\035q\276b\202\236=\331]v:\317~*\276\211\201\177>\340\354\001? \027D?B\276\003?\001{\351\275\277\215\010>U\243\220>\233\236]?\226\213\022@\351F\336\275?\262\316\276M\326g\277\357(\030\276\375.\202\274\314a\317=\243L=\274\365\346\371<m#I=m\312\267>;\256\277>\374i\201>#\271R>\243\374\231>%3\024>VU(=R\000\274?\033=\313\275m\034\211?kY\216\274\034=\303>\0073\333>\206\3778>Z\350N?\346\tI?\237\343\231?\020UQ?\373dJ\277\347\305\341\276l\263&@c\245\034\275\324\375e\277h\016{\276!\203l\277\260\274\217>\260$\321\276\3005\027>%\321\276\276\201\215\214>\271RR>d\254\217\274D\215\372>ZZp=M\274\300>\314X\231>(\345\322\277p[\245>\241\371\t\277\336|\031\277\013\250\257?\323\235\305>Jm\337=\272\317\361\276\251\035\231\276\321\\u\276M\341\370\276\300\177\335\274\3641\006\276(@\231=\221\257\013\276\220|\256=\276\201\">\234\325\'\276\354\rD>\366\330\355\276\221\277\022?iL\234>\036\305j?\221\014\236\275N\337.\277\302y\363\276\311!h>H\025B\276I\214\247=\251\254-\277\314>\371=\037+\000=\"\377\"\276\343\263\336\275xD\374\275gM\306\276#\312\240\277Z\226A=k\343\004\276\300)5\276\354k \276T\346\336>\336\201\344\274[\220\363\275%\3737?o\315\016>\360:\241>g%\333\275\356\314V>\035,\260>\323MQ?\001\234\341\275\356kF\277e\335\244<\260\003&\276\024=P>\230\261~\275\030f\371>\345\362n\276M\374\250=Rn\242>\362X\344>\221\251\264\274\206E\217>\352\244h\273\r\023\253\275\262\022\266>\311o\314\275\374;`\275\301\252\310>\225+C\276\027Y\373\275q\273\013\276\3466\027>\026T)\277.\305S?\234\341\216>YA\332>\2353O>Y*\322>?\320\206>\363\364\205=\342\255\217\277<\304\245>XZ\037\276\343\224\224\277T\220A?\211C\352\276\234\200\021>\272{\010?\302W\014\277\321\037g\276g\206U<\275{@\277\303(\223>\211\004*\277\006\303F\276\211=\006\276+\327\275\276\270\274\315\275\331\366\355=\271&\217\276\316C\317\276\314\010\032?_\264\215\276zs\277\276\227@P\276\001Wg?A\262o>m\237\013@\027\366*\275\355\242\016?\215\036-\300j3>\276\355\262\245\276\332{K\276:vM?\305\363#>S\207\221\276\373\354*?U\275o?\240\307\222\276\357\016\025>\237\341F=\271~\274\274\345\223\352=\267\302\227\276\371\206G>q\231\262?z\277\203>h\362D\276)\242\233\277N\255\t\277U\221\232<y\016!\276F5~\277\000\257\261= \353#?\006P~\276`\000&>\250/U\275 \n!\274`\035^=\240\"\361\274\354{\256=\275\304$\276\256\000\020>\376^\026>\266\202\003\277s\204\333\2760\312\216\2766\217\025\276\206\305\202\277\320\357\200?CrW\276\236\316}=*\257\210>\0371\020?z\261\006\277p\2606?0\362\362>\202eA>O\204\370>\312\374\330\276\273\220\206\276\246n2\277\027\034\337\274\3553v>oO\\>^\337\025>]\240\205>h\rK?\212\027\345\276\274c\234?\231\365^\277S\347E?\224\311)>r\263\204?\247\247K?\202x\300>\333\221\250>L`H\275\373b\236>l\020\031\276g\210\272\275u\3169?\326\364\345=G\340\233\275\257\264\014\276v\3538?\336\010\232>D\361\006>)\266\"\275YU\313\276\261\035\211\276g\341\370<+\307\220>\031\263\222\275\221x\231<\340\314\224>\220\225N=K\'\323\275\300\006\317=\264\305\324>\363[\246?E\310\362<\276n\377\276#\321|\276\217\206F\276\207K\000>\024C\002\300\026\274\020>\341u\201>?\321\251\276\352\327\250=\250\r\005?-\305\265>\366\304R<E\254\331>\226\"\233=\337\221\030\277\227\201\006?\340\311\311=V\306\323>\252e/\277MaB<|\276\373=\311x%\277\375<\265=\350i^?\361\345\002>\004\331_?\213\200N>\236\314\003>\025\203\210\276\365\274K\2755\322\200?|!\215>\305\272\020?\017\207\002\277\0256\272\277x\265\216\276\344\233\251\276\307\333$?>1\251?Zj\371\272:\347P\276\n\276%?\262t$?Y?\007\274\252\267\277\276[V\321\276\241\340\360<%\n2?\231\334*\277\000\244\203\275\324\277\227?\234\341)\276m\017K\277\344\316\311\2778\003\t@_\265\322\276\2559n<\306H\347>\034\005\037>C\2545>\361\337\016>4,\023>[\220H\2767\213D\276H\350P=\264\356\014\276\000\270\315=\344!\002\276\023\265G\276\305\316\020?\317\255\033:2\254`?\024\376.\276$N\277<\030\333\262@\203\217n?\253\331\372=\245\010\027?\237G\020>B\301\247>\317@\212=\013@\310\274|\306I<s\247K\276{\0105\276W\020\224\275\252s=\276\032zq>|O\275>d\373\312\276\032v\320\275\301\236\314\276\0064\344\276\263$\257>\201j\006\276j\304\323=\326\246\355>\027\312\214\276\325\305\352\275\310\350\213\276P\334\220\276\315ax=}C\357>\231\3018\275H\371h?\352\232\026?JE%?\226lD>\000\271\203?\350\334\006>\230\006\376\274\364\302\230=\203#\032;\234\362\311<Y\313\241=\223\350$=d\356\010>\0063\344\275\364\230I\276\217\211\"=\356\314z\275=.#\277@\366\256<=\220\324\275\0317\321<P\303\001\276\235x@;\022\220K<5\252O>\032=\200\276\177\364\244;\005\312\331\275\222\021\010\276F\371\020>\027qh>c\374q\277\233\276N=n\007m>\331\317~>P\274\310\275\177\241&>9\035\333>\354\304\255>]C\037\276H7\232>\266U\203=Q\323\005?pmG\274\034\013\335>2V\005?[\333F\276\2009]=Kr\363=\223u\037\277\262\311\007\275w~\211=\326\205\035<FxE<\207\3470?\326\206\343\277\003\206\000>i\024\010>mF\274=\036u\014\276\026\010s\277\356\252\002?\261\357(?\224\366\222\275\261\235:?\221\356\334>[\000G?@v2>;\364\215\275U\001S?\345\203\'?\035\370@>\217\321\222<w>\033>\244\374\257@\177mK?\347/\220>\304( @\351\371\275\277\247\203\010?\020\251+\276~\262I?`\177\007>\344\020\002?\214\325\336>~\217\013\276\\\010\240=\220\002\216=\256j\255\275T\373S\275\250\344\304\275\030{\252=\010u\304=\222\310\252\276\316\227\014?P\n>>f\377\270\276\343a=>B\227\023?}\201 \277\242h\236>s\376\370>\013\203\206\276Y\340\250;\\T\241>l\2463\277\345|\014\276\3433\233\275\016K;;^\210\261\275(\351\227\277\316\221\033\276\337\245j\276Q\312\212>\020\203\\\276\261\312\233>\230b\326>\252\030g>\200\343\201\276+.3>6\363$\277\016\037\254=M \230>\321\241h\276\205\346\226=\347\252\326=\225\374\354\275\346\262U<f5\224>\262(\007>\026+\267>k)e?\236\010\010?(T\236=\315\354\274\274T!.\277Jw\027\277\032\330\033\276+=\244\275\213\036\312>\375\307\244\276\347@\316>\315\313\037>\345\317\330>\235DI\274\017\n|>\322a\006\276%&\243>\265fG=\023%\n\276\276\177\241>ix\241>C\304\251\275\274&\332\276\233\201\002=wi\002>&|q\277\320\337\221\276u\243\000\277\014\215,?\216\321\177\276\016\220\224?\370\276\354>\352\005j\277\314\215\270\275vQ\017\276QE1>\237\020]?P\014\240>t\264\211<E\212\210\275\260\365\027>\235S\231\276\263\346\256\277\014\222t\276\252s\224?(\232\303\276\036-\275>\367\nY=/\210>\275\265\313\204\277\006\363\233\276\005\007\340\276\026\272C\2770\005\207\2767v,\277F5\364\277\305`}<)\212@?\301\0071\277%\210\224\277\n0\332=p\031\233\277?\313\223>\225\320\230\276\354\3058>\213\346\333\276\344\225\252\276\370\010\310\276\017\3375\277B\233\260\276|\3104>\363\243v\277\376\221#\277\014\342\022?5\217F\300\363\332\036\2774~v?\361m\016\276\371\371\273=\003\320C\277ow\016?\201\033\373><\253?\276\326\351\205\275\320\251,=\200D\027=p\r\234\274\300_`;02\010\275<\361\305\275\207\216?\276IK\275\276\271\251&?D9\206>\241\247.>\207<\230\2756\247Z\276ox\316>+\334\357\273R\206\014?l\031\342>\3358\222\275,\027\037?\301\r \277\317\376i>\361\200e=,\313\033> \243\333\276\360bq?\371\227\371>\003%\006\277]\251\311>\2750\355>\3312D\2765F\365\275\036b\002\273M\371\307\276\217\033\201\277r\024\245\276>\2123>\255\021\327\276hd\223\275]N\230>\004\020J>\215\330G=S\213\201=C\224\224\276<\032\225\275Ea\344>C\230\'\276\035\305\032\277\310\026{>p\302z>\371f\220>\342\271\220<}2\226=;\204\234\276sq\263=Gc\276\275\2100\210<T\020\211>\314\256\216>-\270\204\275~3u\276xG\250\276`,\004\277\302\360\376>\343d\013?\025.\345=\340\024-\276\263\313\271>\332&\246\275,\202\274\275\345\274M\276\314h\\>\'\263\010\2760\037a?\327\006\"?\373\247\004>\236X\357<\377e\217>\\\354T\276\374I\"?\352\007\266=\3109\026\276\037J\006\275\265\366\326>q\030\263>\366Y(\276\321\202\351=\325z\214>\245\262i\276\326\003O\277\262\232<?\004\317\370\276)\270Y\276]\177\206\276\377U\240\277\216\177\305?\002y\216\277o\233\017?}\313S\277\250\2041?\340\376\233\277\016\311\001=t\362\333\277\234\304C?\362\037\000\277\376J\017>Uq\210>\205\025\277=\274\335x\276;\252]?\001\246\337\273H\270\261>j\352\353>\332e\226>N^\027?\213il<_\315\'=-h\355>\201Z\224>tw\314\2756\255\211\277\265\255\263= \"`=\334\032Y?,\3364\276\010\361\033?x\363g?\356`\357\275~\264\024\276\2742\001>\330B}=\304\355X\275\370\271\251=&X\'\276(\226\211\275es\216?\037P\210?\244\352\322>t*S>4\350=>\217\\N?\35049?4\231\005\276\352%\247>\013\324\"\275\034{\330>Y\2060>\330\010\205\277\342\315\004\277\tJ\224\276\217\241\237=h\226\351=\031\364q\277\027\260\300>.R\364\276\375e\">\032\\\371=\335\3334=N.8=\255e\001?\364\020r>l\330\371\273\247&\030?(\3157>n\344\035\276+\357 \277P\370\360=6D\353>\354\306v?\274<]\276\232R\306?\254*\244\275\326\245\027?\374\037\201=\013\010\360>\300\301\226>\344t\036\277\377\265V=v\312J\277\005\230\205>\366\037\301\276\300\375\206\276\004#\244\277\263O\243\276w\321\023\275>\356\262<\177\343\260=\226\030\356\275)]\250<\320TD\276\034\236\306\276E\341-?z\252\367\275\200\214\253>3,&?\333\330\202>\321\307\324>\331\341\272\275\346\323\r?\335uI?\033<\241>\213E\301\277\006\024\355>x;\351\274\271\273\260;\352\0313\277=\003\217\277\014H\261>\341\215M\275PP\367\277\377x\353\276\014\304\244\277\177\337K>*PL\275\010\200\323=)\034x\276B\230\005=6\232Z?\033b;<!\343\253\276@\236[\276\007\337\270\275\272C\372=\237\363\275\275Mi\004\277\253C\266\276\271\031d?\351\263!?j\313\347\276!a.\276\002\010\225\277\231-i?\246\314G=\2242F\275X\226\273?o\330\002\276fL\317>\203\254\322>\255=\305=\370\305X?\n\361`?\253t\313>V\341\263>>\014B>\334O\370?n\233\213?\177%\023?w\311\327?ey\221\277\360\300\017>H\356\237\275\357\207t?\240p\316>\004.\235?l\322\257\275`\241\377\273\3561\006\276S\211-\276\0206h<d|\234=d$\233=\205\217\017\2764\310\277=}\361\016=\331\204w>|g$\277\324e\343>\006\350\273\276.\214\357>z\014\323\276!8\\>@\330\352\275\252\007\006?-\216/?\314\212h>\332\352#>Q\363\207\275\341\351v=:;\007\274\2209E?\222G\207?@+\003\277\240\227\025>\300\325\254>/\215\272>\323\211\311\276\2206\250>+>5?*=j=\374\221\016?\020\3628\277\000fi>\343\rx\276\305;\263\275\270\326Q\276.\213\207>A\364\214>O\2431\276c\207\342\276\025C\335\273\314\223\230><n\322>\177s*\277\201\212\231=L\223\355=T\350\024\274Q\036\013\276\302\233(?\217`\003\275n\227\257>\243\200\032>\221\t\331\276\244\022\222\275m\240\216\2753\006\225=\013b\320>l===\271\3011=\352h;?\271\350~\277!\374\210\277\243\311\211\276D\311\366=\203\373\220>\336\214O\275T\370\344\275\003OT>r\001\004?d\345\200\276\036O\364\277\027Y\241?A\300c\275\202rY\274\231\307\345\275o\332z\277\207\252\322\274k3\341>\037\220\323=\220\316\311\276\035h8\276\306\034j>\217g\356>\351\350\217\276F)\330\276\363(f=\362\344\035?\203A\377>\255\005\035?g|:\276\266\263]=\316\023+\276\206\300\313\277\221\230\356\277=\205\227\277u\020\215>\342\346*?\206L\341?\36259\276|\361\224?V\265\261\273\212l\266\276C \214\275\306i\272=\241\270V>\361\347\263>\025\312\004?\376\212\310=\212\037\220=z\323\266\276\273+\240\276\255\031\277>\263G\224\2761s0\277\230s\027>\302[\261<\227\252\336\277KJ\000?\327q\336=\335)!\276\217\246`>\347\236\216\275i\367\274=\334\302N>D\201\024>\274\210R\275\370\247\231=Ht\264\275x\373\315=\250\361,=\304\267\231=\334\220*\275\341\345\272>\370\310\206?I\260\276>\363\320\024?\257{\323<\007\240\246>\032\356\232?\200\200\361\275XE#>r4\020?\r\021*\275\215Q,\274\006\326\200=Y\272\320=\243T\t\277\t\317\203>\254\224\360>C\334e\275{QA\276\325\234\253\276\217w\027?\004(\217>R\276x\275m[->q\2041\277\220\356\177?\032\342\332\275\245\006\227?d\333\004?z\301}\276\312\021\303\276\335\026\202\276I\3175>-A\371=\352\317A\2769\373\030>\034\264\336\274\311\007\322=_(*?\260\271\001\277\341\3319=[Ov>\035\313l>\201\260\320=q~\220>\214\257\003\276\374[\341=~\315\217>\232t\206\275H\003\315\275\313\215\261=%^D>\317\217.=z\234\376\273\277\251\340>\222\"\235\275\301\022\233\276\346\364A\277&\217\002?\357\3611>\200\234B=D 9>\334\251\177>\354i}\276\354\177\237>\355\342\312>\343\316\032>\\\253\233>\317t~?\242\342\352>Q\032\214><I\034>L&\243>\304)O>+\022\000\2777\356\357\275\362\344\014\275\346\035O\276\241RV>\021\224\305>\213\2416=/\365#=\233i\357>\025\002\236>\254\006A\277\363\234\273>e\274\372>\033\333\224>\222\226 \277\251\213\244>\350\246\313>\273E\236>\357\214\207=\266<\274\277\256v\255\274\323\203H?8\234T?\251\332~\277\210j\001?\230W\330>.\361\360\276\3647\233\277M\250\r>Am\033\277#\346\333=Z:\372\275\241\205\222?\213\367\032?\236@>?\276H\320\277G\205O?7\363\350>4\2178@\325\257j\300\020(d\276\002\n\375\275\202MW?\031\211\265>\217\0265?kx\t@A\251\341\275\232\013\226\275\344\261\237=\354`\016\276\230no=\260\014O\276\260\275\216=t\237\351=\373_,\275\213\343G=\232\200\315>\032f\222>\243+\270>\334\244<\277\207\325\313\276\320\230\305>o\020\031\276\242\002I>\360\347\375\276c\247\006\274\224q8?\335\256s\276}\334\010\276\306<5>0A\303>L\013\225>~\014{?\233R ?\025\207*\277\250\264B>\260\347\222\276#\354\372\276\234\275.\277\316M/?\332\251\036?h\006\377>\246\347\225\277I\277\244=\"\354\035\276a\367\344= \002\311\276\321\016&\276O\233\177\275\201\033\206>\250\221\212\275\267\225=\274\276\014\311>\211\327\254\276\270MG\275\316 \204\276\352\313d\275P\361\323>\201\224+\2769A\220\275\331\327\341\274\"*\305\276j#\367<w\332\270?\017\013\034\276/Vn\276|\037X\276\221(\003\2768l\032\277:}\210>\246\261F\275\213\303\221?\332\265\214=P\'\304\275\377\377I?\032l\326>\003u\314>\314:z@\370RS\276tC\016>\306\330)?\201\275z>\266\227\367\275KM\226>i/\330>\222\004\014>/d\264\274bU\"\277$(\033?\331\r\333<.\330\203\276\372r\356\276\325 \">\005\334y>\316\345\230?FV\202\276\312\362Y?\0217\231>\336\236<>0[\017?\370\226\301;\335\\\264\276\227\016\037?\366\230\242>*$\360<\022\276T\277\263\312-\276\313\340a@\370\\,>Z\302\325?\334\"\026?A\002\202?\010~\217=I\224\313\276\r\3169\276\314\375\267>\242\361\003\277\nD\217\276\357\323\272\276SI3\277\312\034\207=O\016R\277*\236\263=\263\033q>)\177\302\276\226D<?&\036\226>\234\330\250\277\261\361\305=\373\216S\275\273b\242\276\235\027H>Rh\232?rr\307?\300m)\274~\271\023>\244?\253\275\340\273C>\370\300A\276\034\034\036>C\240\367\275\210*\311=\261\006\301=Tr\247\276\034E\256>\'iw\276%\303\217\276\032D\033>A\210\205?\353c&\276\376S\020?C2\321\276E\017Q\275H\031\236\274>\344\337<\220\367\322=\320\322\251\276\272\037e>\001\232\237=\317$\000\277\273F\023\277\277\361,\277Hz\n?C+]\276\246\327&\276\340\324_>w\013\000?p\234@\275\177@\223>\373\005)?\346\317[\275\263\037\343==\360\371\275\020|\267\276\016\037\r\276_\370\326>lh\206=\261\017\303?\311&l\275h(\253\276O\220v?\225 \257=`\361\222\276\275\204\307>\266\035\t\277\216\254\323>1\3007<6\343\250\276\243\313\361>;\314\022?\026\343\246>4\251\021\276\251s\212>\350\330\274=\247~\\\276\276\354\274\275\314\326\276>\311\345\321=\263\310\353<w\254\322\27664b>\032\230\001?\311\037\344\274\310\005V>7\206\231=s7\340>\346\251<>\274\"\370>a\247+\276\247\302+>\3460\201\277S\320J\276\252w\221>\177B\264\276\3736\313=\322\021_\277\317\331\233\277\035\221d?\237\352,\276^z\275>n\250\211\275\340\236\021=\020|\201\275\316\266\311\275|/@\277\345\372:\276\017\033\020\277\254\300\020>\264\234\255\275O{\303\2769\257\036\275*t\304?>\3216?\333!3\276%\000\005>\274\373\256=\273\333s\276\334D\336?\026\tx?\'\250\034?\270\036\267=\0266\211>\253\305\021>-\316\223>\331\274\326>\360/\t?\tI\027?\243r\224>9\332\245\275\313\264\265\276\367\342j=\317\240\210?\273\246\356>\031\273\362>\023)\374?&\320\034\300rPM\276\225\211\300\275\255\216\276=e\234s>P\366t?iw\277\275de\213=\210\350\275\275\030\202V\275\370\032\311=\300\330\335=\334\376\252=\306\336\r>\032T >\333W\264>8\367\250>\014#@\276\310m\010?b\271\023\277\244*V<D\307\345\275\017\362\330\276\256\0058\277\324\030\005=\225\247\360=\'r\231>L\017\341\276y05\277\301z6<\031\334\251\276\246\275\300>9\031\311\275M\372k\276\301S\366\275-H\025<\305=\360\274Ni\212=\244\337s>Bt\023\277\006DA\276\307\026\200?\032\337\200\277\316}\023\277\307H\246>\010\311x>\246\204\033=\364`\357><\251r>2\007\221\274v\317\261\275\361h\002=\203\246\255>\274\263C\277z C?\2163\374<\377\345t>\300\256)\277b\203?\277\323\265\253>t\005+\276C8\016>\201\021\252>\315\203f>(\225\n=\267I\320>\275\351-\276\016|\372\275\001\277M\276\215\254\300\275\345\272\251\276qDf\276\rV\236\276\330\202Y\276j\217+?\230#/?e[\321\275\024*6\276\374\366\033>\350e}\275\231|\007?4B\304>s\377/\277\365L\010?\251\271\253<\002\212\205\276\224\234\341>\026b\363\275\0012[\277b\331\215\276\005K\265\276\364\010\330<\360\345 \277\267\354\342\276\327\005\365=\242\317#\277\334\031\\\276\263\250\000\277I\177\361\276\226\t\204\277\372\007\t?\351H\222\276vk\210\277\326\177\001?\002\341\261\277\023\n\343\276\266\357\\\276A\023I?\342j\231?\270\245\017\276\003 \250?\351\2770>\251m\'?\247r\343=\037\005\370>\260\"\214=\202Aq<\360\323\035\277\255\203\234\276\203-\207\276?cK> \250O?$\347\025\277,\257a\276m\2435\277\013C\265\276,+p\276\261\322\022\276\373\3617?\237*\021\277p\365K\276\341\361\027?\241\310\007?\326\360\211>;\316\306\276\026L\300\275(R\030\276$\374\037= \253\034<t\205\275\275vh$>\300;\317\274\360Y7>\214\367\304\276^F+>\253\357+\277\241\002Q?\003\342<\276D\r\246\300m+U\277m\244y\275[\033i\277\266zU\276\231\030\341\275\231d\202\276\245 )=W\\\267\276\324\257\005\276!\322A\275C_c?\027\315\013?\206\271n>\324\346\245\276A#\006?)\354:?\227_\223>\311i\350>\302\247\376\2772\201\002?\264:3?\234x\240>\314\244\223<\244Hl>\r\303\225=\007\303\237\276\037R\237\276\244\345&\2778N\200<VKb\2773\306\253=\034M\245\276\300j\215\276\030\025\272\276\0162\271>\240\336\215=\226\262\222\275\252\243\t\277\001\371\202\276\307\356\364=\025\361\360\276% \014\275\234 \024\276\"c@?\236\341\002?L=K>\331y\000?\025\253\026\275\371.\265>U\250\017\276\273\224\215\277A\264\025=\367%C>\334\374\207\276\312\253\303>\240\263\362\275\007\034\250>\310A5\276T\026\264\275\274=\345\276\333 W?\213\374\331>r\231\347\276\346b\003\275$1s?\246\036\217>\252\037\273>*9\202?\223\0259\277i\262\353>\352\033o=\360\0014?(\331\035>e\370\233>\246\022+?\024KU\276\364A6=}?:?\220d\026\276\033F!?\307\030\247=W\3417?\305\307*=,\034\276\276$\031\245?\212D\205\276\236I\302>\031\300v\276\240\376\206\276[=\242?\273\363\326\274@\207\"\275\205\\\024> \261\345=n5\005?\253\350\361>\375\356\321>\212oK>\355xM?\370\"R?\200E\243\275\340\356\036?\303\326\251>A\227\254@\315\037]?\340\251\036>\013\235\222?\266\001r\300\327As?f.\316\275\322L\225>\224\376a\276_-\206>\373\377Y?d\374!=r89>\\k\013=\333\372\262\275\000\034\021=h\256\030\275\320\226\023=*\023.>\337\334B>O\251\204\276\304~\217\276\330\021\213>\354?N?LF\214@N0[\276\241!\212?\303E]\276\326\337\021>\032M\300\276\263\252\244\276\036G\212?$\221\251;\006\300\367\275YI\375<\214\032\372>^\347\210\276\3413&>\034bW\276E\312(?)\3669?\274\344\275>\210\360\361>r\200(\300\324\313\225\274\344n\212?\000$\235\275\20371\275\014.)>\246\204u>\313h\244>\331k\n\277/$\247\276\331\232\010<\241\344\302<\254\265\206><x\243>\377\007\377\27564\002\277f\357\217>J&\350\276C%\265>\026\2256?\301/=>\376u7=^(K\277\325\215Y\277\355\210%\275:\032|?\222W0?\"\213u\274bf\273>\222\355J\276N3^>\303\223\262\276\263<G\277\035yn?\341\342\346=\340\037\343\276\320\250\202>y(\230\276\261\337m>\276\t\320\2778N_\276fq\036\276\212dV>\022\352\214\275\250\177;\277\326:\330\2757\033\311>?JE\276$=7\276\023\204\300\276\306\"$>\\[\243=\271\003\347\276*m\030\276\010\275#={\362\303\275\356\033\010\276E\004v\276N\031-?p\353\354=\217\253\214?+\246\272>\22272\275\331\303\016?\345\221\302>ZLF=:\266\262?\316Z\205>Q\022\340=\2579\323\277\017\r>\275\027)c?\251\256\211=\0242\245=\317\233;>\3215\007\276\023#q\276h\177@\276B\263\331\275\254\037\313>\253T\277\276\212\332\211\276\272\241\202\275\372\231V\276\206\262\350< `\210\300\231\004\213\276\362\307\260\274\217\262d\277\254\\\273\276\017\275\260\276\247^\256\276o\345*\277\030\365\277\273\037\023v>\033\324\350=Psu\274\317{\364\275 \013\362\274g\016D\276\030lN> \020\\=\340 \317;\000$\362<\n\"\351=42Z>3\273!\277b$b>\017\252\305\276$_\277\276\350F;?\251\016\027\276(+\207>(\225s>w\220\007?{4\260\276\306\366\337\275#eq\276\2244\341\275\330\312l=\000^\230\276\204\370(\277g\321n>\032\354\206?\244\365\205\277\273\354\026\276\201*\036\277\215\022\212\277\221\203\036\277\361I\335=\010&\251>\272\327\227=\272W\221\276\377+\037\276(\351\017>\326}\345\274\026\312d\276bQa>4\020f\275\232\0278?o\030\372>\330\311\256=\325\372n?\037\301\220>%\272\250\275\267\232\211>\213:1?\013B\270\276\035\025\014\275\272\003\216>\347\241\213\276\273\311]>\261y\307\276\310\033#\276\361\330_\276\200\345\025\276\300P}\277\252\340\374\273\252\247\261\276\035z\204>/\214\313\276~\037\000>\266\036\274\275\201\260\324\275\000\321\231\276U\225\322\275\271\351\353\275\220JH\277\346\326\025>M\237\242\275\2666\232\277\036\255\017?6I6\276\345\177\256>&\027\356>wA\024\275a\265\206>5\353\246\276\364|\235>\363\305\247>\244\374v>igW\276\004\252r>\343\010\034>\250\\\361>\001\335\276\275n\347:?\272f\014?\227\344\275>\036\\\367\276]\226\000=\216*K\275\313\301\363\275\375\"\007?\301\0053\300V\355^\276c\021{\276\225\307\320\276*\026\260\276\n\236\355\276\210R\005?\354\0000?\000}j>\266Q\212\276\243\303\014?\310\034\363>xI\013>\365\021\243\274>\324U\276\334-%\276_\035\215>\351\212\341\2765\265\262=\250\004\225?\366\334\013>\240\200\307\276\307\014\214\277\214}b?\361\221X>\264mv\276\334\255f\276\005\245\204=j9\247>e\211\305\275$\302\"\276@\020V=\340\316\236=`x\275\274\346e\225\2754\265\267=\376\376\237\275\270qf=\215\357\345>fm\322?\363\265\343\276\340E\010\274\220\320\014?\312\211\003?\007\221r<N\226;>^\317&?\375q\302\275\203D\251\274\2211g=b\031u\277\262\211\000\277D\277\333\276\017\032\003\276\0018s\276x\346\230\276E\000\306\272\337\377\006\276\'\014\374=\251C,>\323n\356<\005\310e>\337\243q?\200{\232>G(\237\2767\020\314\276\301\032\322>K\001,>\363z\241>\"\343\202>-\230\004\277\237_\333>\013#\001\276\226\271&?\371\320\256\275\255\300\252\275\303\371@><V\366\276\323N\203\276\361\237\223>K\333H=]\262\010?*Z\222\274\004\232\372>\243\321\253=\026\020M>\361\037\023\276\357:\332\273\370G\010=\377\035\224>\027y\260>\2564\030\27614\330=9z\261>\006\377\001\275\025\331\234<9\202\257>\003b\354=4\'\220\276\214\307\'>\031\017\305>\373c\260\276\313\224\004\276\335d\032\276,\n\025>o\266J?J\332\257\276\004\211\005>\t\336\033?\304\374\035>\241\252\023\275\025,\354\276\250\324[\275\2346\307>JX\n?\377\341)\275\3753\332>\340\377\213>ff@\276\270mP=\212BT?2\351_?D\027*\276\023\310\211\275\340Z\246>[_\335=\371\323\"\277\247\240\207\277\277\351A\277S\251\210\276^\307\207=+\237\272\277\000\200\320=\262\005\210\277f\224/?\001\207)?n\347\303\275v\320\032>D\325\216>\026\277\356>\t\340V>Q\021\200\274A\376B\276\245\226Z\275\"b\235>\20666\276\366\200\274\2766\351\204\274D\004\212\276\305\300\232\276 \005@\2779\353\337>X!\022>\2135\364<\032\314\270\276 \201\'=\226\267^\276)\201P?P\312\266=~fE\276lj\311=\343\005\347\275\2403Y\275\212\305N\276C+\251\275 \257R="
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\207yx\277A\211\253\277z\236\232\277g\203\332\277>jp>\367}\362\300\227\t\251?\237\024\270?\337\035\332<c\233L?\017\207R>!\027\204?\224\031\254\276\232\022\261?8\201\302?<?A\275\0348O>\016\231A?o9b\276\347#\037\276I\230\274>\243\272\301>\320\"\032>.\\\027\275\013\350/?\317w\021?!\262\034\275\314}\261<\254D-?\273\031@?\242\374W?\300\370\203?\325\310\234?\312?\014?1!p\274e\211\276\276\342\021F?\332\373\255\277z\211\277\277\270\364\256\277\006\030h\276\356\244\345\275\0212\317\276\352]\376>\324\344\300>\306&I?\362\226\244?@e\006?d\357\202?\343]\013?\222\251<\277\326\355I??\321\245\276\303\243o\275KQ\276\276h\000\271>\232\307\215?\234RT?\r*\n\277\235\302\233>\022\330g?<\327\247?\263\'\327\276wO\345\277>\234\027?{NN\275\331\037\016\277%\030f\277L+#?B\347u?\205\362\030?yr\240>\027y9>\037\327\316>\026\257\255\277U\213q\276t\215\027?\245j\371\276\326\267\033\277z\n\371>\351|\001\300\326`^\275\220\007=\300e(\326\275x\263\376>W\235\032?J\356W?\321E\255?\025\320e\2748z\262?`\301\321\277x\217\260?~\'T>\022\333\203?\2219\323\273\212\024\"?cBD\277\204\315\274\277\311\310)<\243\201\331>Y\032\027?Z,%\300\233\346\360\275\352\223\034>!\016\202\277z\367\014?\200,\233\276\031E\r?K\321 ?\010]0\301\360\037R>\315\234\336>\204\034\221>\276|0\300\024Z#=\257\317\036<\335\366l\277\221\267\201\276\364\024\253\277\232\226\000?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\307SK>\177\003\234>\307y\276\275I\267\226>\237/\236\275G\005\217\276\257\035\260\275)\231e>\343\230\">=u\271>\252\342z>\027V\252>\243\222\353\276f\034\252>f\004B;Mv\214\276\316\253<\276\ni\026>\336\245\010\276Y?\021?#\221\216\277\347:]\276\002\245\237\277h\365\322>\360\375\257>U\177\004\275\033\247\266\276^\027#>c7M>\032\270-?\325\300\303\276\276?\030\275\356h\267<\027YW\275\262Y\343\274\253h\022?\006\230\310\276\354oK>\032\345&?\244\027\276>j\300U\277\313\031\335>\227\310\301>D\313\030>+)&<ML\203\276j\003J\277\370a\'\277\337^\376\276U\006\'\275|\003\017?\034\317\351>\007s\367\275\260`\212\276\367\210\222?\324Q\t\275\3327\351\276G\034\222>d\246\000>)(\017\275\254n\211\276\345\255*\277\337k\253>\346\231\365>\360\223\034\2759\312&>H{\025:i\\\005>\276\223E?\014q\020=*\006b<\302\273G?\210O\312\275\304\221\017?\207\263\257\275\'\317->x\021m\274\224\226\326=\r\327\245\274\216\375\321>\270\033@?\342\341\333>\370R\303?\230k1?\344K\252\275S\230\035?t\013\246\277\274L\241\275\"Y\340>x\357\224\276\260GH?\347\013\341>\265\035\240=\010P\355\274\252\217/:\265\214\335=g\346\331\275Q2\350>0\0006\277rj\236>BY_?\3109\372>zI)>j\t3?\207\367\177>\264\021\343\276\223\355\231\276\325?\024\277\375**?\036\026h\276\010\322\222?\303\022H\276\304@F?\034\t\223>\000\236B?\226\030\214>\r\347D>\017\t\353\276\241c\226<\233K\217>\316R\n\277a,w\277M~\213=i\037z\277\266\265W\277D\227\353\276\224\243\377>\032\316\337\277\350Z\255>v\tb\276\006\264f?\372\020\371\2750,\270\274\211\004\337=z\007K>\326^\204\276\327/9\276\330:b\276\3737\377>6$\314=\223[\032?K\3720>\341%V>\014\342)<\234p\203\277\357\036\267\274/B\013\277\034\223L?\275\354\210>\253\200\371=\234O!\277\320Q9\276\226\002\020>\212=\237>T\215^>9\023\374\276\314\221\356\273|\034\374>\021g\207>\300\330~>P&\262\276\003\023x>yjV\277\320\2041\277\026\343\271=\360\207\321> \202\t>u\336\242>\340\024\220\276\221j\251>\010;\r?\236-\031\277\364W\230\277\360Dz\277,\000M\276>G\006\277\346\270;\277\325\237V\276Nj >\235=\016\2778\363\272\276\226\365\214>\247\247@\277\3307\240=Zj ?\341[\253\276\035\221\316>\355\306\006>\342\267\004>jC/\276aB\214\276Bf\257\276\347\343\301=0\031{\275\346j\257=\345\367\365<\307\326\330\276[\332\215>DX\r?\243Q\326>~d\317>\275\n\021\276\327\307\307\275\004\3521\276^r\035?\373\347}>\231\237\347\276\227L]?\250^\247\276g\001\201>\342po\277\371\017\201?$\352\221=\277\335K?\246\201\240\276\260\350\342>q\225\207>\231\361Q>\r\001\336\275\316\235\234\276\342,\364>)\336\236\276\2211\256>h\273Y?X\t@\277\305=@=\251\017\351\276b\304\262\276\360\377\201\277\204Hf\276k\217\250=e\257>\277\327+\312\276T\340E=I\334\223\275\023q)\276\253\334\316>\307}\000\300l:F\277\365\267\212\276\377:\334\274e\237Y>\325\251\266>\347\244b\276\013R\215>\254e\032\277\206~\022\276W\257\367\273?\006\217\276q\201&?\255)\364>z\375C\276M\263\363=O\rP\277\3751\001>O\323\014>a\306\276>\363\245G\276\316\373W\276D\376\267>\231\343\020?Y\365\254>o\232\322\276 G\230>\326~\">\250\206\314=\350\334M\276e\017\233>K_\354>@\357\312=0J\355;\235\212\241>x ,?5\275r?\315_\255<\232\374\355><\032s?\377x@>\030@\360>\356\240A?\337\213\204>\316\303\025?\366\345\357\273\312\356\264\275\244\033\205\276u^\364=\352~\231>\250\016\275>\264G\226\277+|\024\277\014Tm\276\017J2\277\004\221\027>\310q6?\370Q@?l\242\033\277T]\032?\262(\306>\347\302\313\277f|\211\276\365E\232\275V9F\2771z ?)\200E\277\240\017\"?\254\030F\275\273e\013?2Y9?\241\033\024\277hhd\277\353\037\036?\333l\314\276\225\3638\276\362\032\364>\370\034T=\353eI\276\377\023\033\276\203\304\204\277\245\253n\277\235\241\265\276\342J\035\277\373p9\276\306\305\016\277\016\302\025?\026\233\322>v\322\242\276~@R>\213w\354>\025d\016\275\204\t\321\275S\344\036\276\316\201\013;T\375\177\275\313\036\'?U6Y>am\207?d\373\314>I\374f\276}PE\276~\312\370\276\333\024\244>\217\003\023\277\277p\201\272\373\367a\277k4\202\277\260\205\362>\377{C\276\206\365\005\277E\361$>T\265\367=\220\322\027>\300e\204?kb*?\000Q*?\216F\257<k\034E>\235\211\333>_\034\224?\362\347\276\276\356\n9?\357<\332\275\323\2266?Nf\241\276\004\223q\277\2719\376>\314\031\323>\025#4\276A\335{=\357\020\222\277b\201\005?\227\245\226>\251q\341\275\322\324\014\276~\363\203\276\022m\t\276\222\214\"?\277\324\255=U\004\362>\363}\010=O\206A\276\211\235\211<\255/\213\275\tK_\276\341\214\303=\001\243\366;n\032\242>\336C\212\275\331\304^>\332<\242\273U2\256\276\301R\260\275iV\336\276Q\326R=\233\346S\276\360\r\001\2771\344\355\276S\006o\276\335\2774>\364\277W>-\034\357\272\312\321\304=[;\343>\317p4>\202\322_\274\243On=g\227?\277\\\356\022?\263\3701?\353z\333>\204\311\252<\021Jb;\257\367X>\276i\370>\240{A=qx\221\2730\245\227\275\326R<?O\324@=\310\213\r>\007Y\302\276\0002\'\276\001{y\276u\214\'>\335\333\377\276\351\007\311=\340\330\332=,>E\277\366\013\306>@\205\211?\302\226\377>q\300 \276\336\344k>\202m\032=\335\033\256>\303ID\275\247\005\031?\2764M=\305\001\336=\317\275\315>\303\356X>\001\205\035=\305\360\014\277\364\'\177\275\336{\362>\200\3632?\021R\302>s\032\024>{%&\277v,\266>\036\007\n>\246\315\202\275\025\247?>\022\223\205\276\"\320\014?\231\035\215\274\362I\033\276\017\317|>\347\037/\275\344\305\254>\314\336\255>8\314{\275;\314\261=\255\272\245\276\212d\345=\3764\303\275\035M\360\275\305 \323\276_\332\327\275\367J\325>\365B\034\277F\022J=\345\341\344>\n\332\277\276\234!\031=\236\005>>,\315\310\276\346\245\n?A5o>\023\327w>\245\013\001>\244lR\276\030\364\220\276d\244\241\274\234b\351>%,5\277\301R\023\276HJ\303\276\304\017O\277\375\355\207\277@\313\244\276:\321\350>\023\240\236\276\216\250\000>\312\261\254>Q\322 \277D\030\371<\001~\251>\344Bl\277\272\374\256>\"&\352=\201|\372=gL\216\276\230\272B\277\321[\002\277\367\013\231>`\266\213=\357I\265>.\350(?%\"\343\276\242\201\221>e\020\317\276\025\326`>\353%\t?\035\213\016\276\356\305\342>O\336W\276\246q\313\275\221\361\001\276P\370\302=\002\235K\2750A\202=\201\010\026\276!|s=\223.\212>\2617\335\276s\323\025?\006\304\241\276\247\000\266=\322\007L>\264\224\224>\253+\234>:\2769\274\261\226\255>\252Z\301>\204\312n\276{\373\243<\375\346E>\022\315\377\275K\371\270\276W\004<>\245\330%>\023\247\211>\2265%\276\006X\214\276\033\255\314>\010\363,=\243\356\256>\3315\020\276qsE\277\364A\346<\256\246\362>\"\\\262\277\201\323A?T\005\004?|\007=\277\272\020\303>.H&\276\000\202#\277I\333\225\2771\374e\277\354j\001?\237\326\240\276\257\346\203>\222\3121\277m\275\n>4\213]>\355wz\277\024\203\007?\244\370\372\274\225U3\277\273|g>\020\246\021\276\315\004\304\276\n\337\024>W\023\310\276\017\337\021\276"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\313\010\372=\221\332\264=\355\237\206\276\200\274\205\273\022mt\276k\240J?\016v\253\275\275@\230\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\315B\333>\220\345\257\276\313Q\353\276a{_\276=\2104\276\2554\254>g\326\254>\243\002\306>\3351u\276\200\t\205\276KU\001\277\231\345\316\276\013\321\210\275uO\005\277\246\n5?\201pI\276\335\026J\274\366\236\224\274KJ\326>\nP\210\275\220\330\346;9\2743\276qM:?\232}\024>&\214\204\276\303\362\212=\'A\370\276\370\373A\2779y\010\277\275\n\r>\213\247\251>g\315\007?\202\244\336\276\230l\374\275X\177\277\276\304\340\377<\236\212\357\276\277!\263\276\214\206(?\033\247z?v\340\371\276\030\353\326\276\305\226\237>\037\267\260\274\310\351\254\275_\307\311\275\327\216\273>\010KA?\2733\345<0\363\363\276\005\346#=w\240\007>\002\310L\276\250vx<\014j\352\276A\371 ?;\2313\275\2568i\276\370\351\264=k\221\273\275[\334\030\276\032\276\242>-\212\265\276\021\343\231>+B\302:\007W\022\276xPe>\375u\303\275\201\2622\276P?\277\276\002\366\251\276*\223\016?"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.2267332673072815
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
