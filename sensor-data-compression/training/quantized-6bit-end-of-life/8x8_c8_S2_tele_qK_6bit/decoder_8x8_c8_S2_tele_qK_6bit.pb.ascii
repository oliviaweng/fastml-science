node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\026\370u=v\211f\275\360GU\277\353\377~\277\035\244r\277\\\275(?\217\352\371\274\246\211\205\276\253\353\303\275\023Y\225\276}\301e\276\254v\215>\210l\035>A\272\235\275C\306b\276?.\376\276\206\351D?t 1\276VN\200>\017H\"\277\206\372\037>\021[(\277\277\365\006\276\220\207-?\262\003u>\n~\007\277\265}\325\276$\3077?\263R\363=}\206a\276\324\371H\275\312|Z\276)\203\207>\270\337\210\277\\\177\235\276\365\234j?\365J{=\230%4\276k\3704\276A7\245\275\310`\257>\023\232I>\002\256\n?CSO>\236\034\027=\332\335*\276\223KE>?*\001>\332:\013\275b\264c\276\027,C=\317\211X>\356\351\203\276\033\016\205>\005\370_?\306\\h\275\316\000\300\276\000\010L>\265r\344\2765!+\277\270Y\000\277J%\n\275\264\001F>\027S\276>_L\202\276\276\016`\275T\006S\276\"\244\344\276\220oJ\275|X+?)\372\034?\251R&=\010\341\033\276\243g_\276\207 E\2768!Y<8\232\006\276l.\263\275\246\242\262\2767\241\361=]\212\254>z\357\345<\337\247\206\275\025\2764?\354\326\316>\244\273^\275t\025!=?\360\000\277\257?\215\276\000J\r?\365\263\005\277a\266\307\276S>\313>+9\305\277M\315k\276\010\014n\276\"n\013\277H\306\220>+F-=\204\013N\277\237\372\250>\2429\366>\363f,\274\025\201\376>O\323\226>\276\303\377=\026Iu\2757xO>\321&\356\274\211@\302\274N\026F\277\"`\376=t\257L\274\230+\021?\363\'\232\276ET+\277D\320\032=\350e\264=r-\346?\002\267\034\276\270+\307=\246\306\017>L\220\332=\230yv=\274Q\232=\030Q\031\275$\223\324\275\310N\305=Y\007J?^\215\027\276\364f\031?\246\214\317\276\177\002\270\275\003\025N\273\314V\366>\227\221 >\253f\272>\227\337\325>1\3574\276\\+\215\275)\212x<\316\272\334\275\337\333\257\275\331G\223\275WQ\270>}s,\275\006\027l\277.\321\257=$d(<\262\256Q?\266\205\264\276\177\252\331>\325\362\316\275w\303\246\2768\001;>\030\3465>\253\274\244\275\205\016\017=\310\276\262\2764\333*>\225#P\277\247d\005\300\335\220a\277\"\366\370\275\345jY\276iZ\241<\307\324J?\021\255\003\276\202R\206=\200\237\277>\007\357\325;T\365\327\276\257p\367\275\034\310R\276\022\371.={\206\327>;\324\216\276\2425\237>\333@\031\276\027V\202>\306A\030\276(\016\023?\026\2515=c\263*>\217\207\330\275q\217\307\277\177\365<\275$\337\347=BqU>\014\256\315=\010D\277\276\202N\344\276\325|\315\276\346j\301=\250\005\267\275,\372\t\275\2063t\277\364\222\255?\275%\275>\233\324\"?\250L\265\276\302\351\021\2762\211\230\277L\317 \277\247\233\332=\321\202\264\275\231\325\005\277O\263\023=eWf\274\266\322n\277\366@*\276\360Z\331\276\253#\021?A\364\"\274N\364,?\375\354\343\276\234\317\361\276\334H\005\277\303\266\001\276>\250\"\2771\243$\276\204\3452\275)X$\276\204+4\276\311\350\326>\354\362\300>\t$\247=\251-\320\276\254\251P\276u\240\250\276\316\306\r>\266\352\247?\235^l?x\031S=0MD?>\344F>\027i@?\270!\205?\001\\\303\276\024T-?o\226\021\277oyL?\305m\346\276\317<M\2762\311q\276\353)O\275\323\274\017@E\272\330?\220\255\231<\340CA=J\336\016>\245\267O\276\301\031\341\275\307*H\276\270\331\264\274\210j\003>\025\030\320=\257\351\365\275\236\t*?\\\276\315>\274\n\310?F\313\313\275\0365,>\244\242w\276{\210\227\276\371\227\275\276\366d\000\276\306f>\275\271>\256\300W\356l=Tz\"\276]TE>Q\211<\276\t[U\275\007\253\340=\003X\203>\036\033-=}\215q\275\375r\273=m\353\267>\213Eq>ur\302={?\213>\017lI=e\014\200<\211e\204=\331\215v\276\016g\257=\r\240{<\214\377\337\273\031\325\342<OO\030?\005B\203\275BD\276=\030\000=>\250\371\223\275\007W\315=\362\033\214\275Q\373\321>1.\356\275h\377\275\275s\245\312\275\223&\035\276#\211q>\030k\256>l\361\222\276\266\265\010=\013\376\315\276}\224G\276\343\273\346\275xc\223\276\206\t_>Fz\345\276\3733B=/\343\220\276\020\344w\276u\260\321\276I\240\220\2764\222\037\277\207\276&>\366\207)\276\270\000\215\274\336\032b=\267\r\205\276\211\246\r?`\337\337>\216\022\014\277\303\335H?JZ\">r\225\323\275\206\322\213=\217T\365>\274b\216\275\350\266\211<\330\207\335\276f\224D>dr\275>f\033\346\274T\2273=]K\235>\264\006\366\276\251\215%\275\014\246\243?\327\307\313>\357\276=\276\305B\333\276q\302\006\276ukE>\254\206*>8Q\270?+\245\315\277\340\002\212?\362\236\214>H\306:\276\325\204\202>\177\232\256=\356\206\367>iRL>\003\n\345>\352g\364\275\231X\030\276\325u\005?\251\246\337>\222\240g\275[\350\345\2762i_>\340\344%\276\373+\265\275\273P\250\277\316H\246\276\234\000?>bO\007\277x!\203=\325y\346<+\370)\277,\375&\300\270\245E>\322\314\014>\310\n\346=\214\342,>\345x\254\275;\275K\276\000aA\273G\366D\276\017\237\177\276\244\303\"\276\332m\343>I\345\035?\326*\211?F\340\266\277\347\221\232=\375%\016<KPr\276\021\026\003\276\352\267\211>\362\244t\275\370\254\237\276\347u\334\273\225\266j=\224\211\230>\224\2141\276W\202\217\275\202\324\366\274\307(\304>\373\017\261\275\300\\\003\277\224\373\035>\353q\255>s\214\035>MT\030\277|w\006\276\350\034K\276\327\036q\276\363\004\275\274\002\235\260<\202\nj<]\207\206\276?\206\203>\217\001<>\331\340\021\275\235g\\\277J\335(\276\374\177f=D\002\014\276\332\232\263\276K\270\261\275\274W\333=\033\\<\274\230\227\336\273\310\277P\2762\364\225\274x\370M>\326\360\237\274\366\177\304\274o\201*\2765\031\014\276)R \276\333\032u\276s\374+=\321tW>*\341_\276\021\201\034\276\310\234\250\275\303\363\377\276\351\326\230>W\246l;\222l=\277)\036p=\233\267\346=|4*\274\327N\203>\370*a\276\225\307\302>\351\020C?\252;T?\227\033\n\277.\354\253>z\0272=%+\376=V\331\025=J\346/\276\244\273f\274\3309/\276\026\355\246=\315=_\276\325\004\307\275f|\240\275{s\013\276\266\235\374\276\236|\223\276\370c\321<\007\302X>\300\010\225\277\202O\227=A\275\000>\300l\246\276T\361\265\276*K\212\277K\210\026?\215\272\215\277\21409\277r\221\306<\200\300\361\275\301Ba\275\021\2534>\211(\231>G\223\264<\275C\267>\010\010\237\275\352\257\301>\024\025+\275I\314\024?\212\221\222\276\014@\017=\210\250\324\276\266\355O\276\347\262\304>\007\244\275\2766Q]\277\005\004\245>\267\265\214;\314H\367\275.\356\335?\251}\t?\020\020\205\275h\001<=^\326;\276\230V{\275\001\245\006\276\330\202\033\2752\304\231\275\n\246N\276\257\300\t>\257\002\260\275&\n\213>\350\237\271>;\264D\276\020\247\327\276S\220#>k-\346\275f!g\275\360\030 >/\332\245\275HM\324\275)\235\322\275\377\275m\275aN\243=:;\002=m3\270\276\217q\006=\260\013\221\277!\365\017\276zY\024\275Q\223\340\276\341\342\332<.,\340>?\017\026\277\222[G?U\030\315\276\244\306\251\275\204\343\005\276\'B\275<\030\200\006\276\220\037\234\276o~\230>PI\010\277\321[\300=\234\351\231>\220$*\277e\237/\276\232\275\\>A\245\230\276\270\265[\275\3106\223\276\347\024\241=\274\206\255>=\264.\276o\370\202=\375\275\275=\257S\323<\315\021?\274L!\332=\020~E>\221\267\213>\201\024\207\276\3441\303\276).\335\2753t\357<9y\267\275:\200.\277</]\276V\236\332\275\005\247\365>\337\354\001\2763\007\023?\270w\274>\346\006I=\250\331[\275\025\241\030\277\375P(>\222\205\n?{\006\264\275\214\2578>X\316\355\276\355\213/?\301y\t\274\nv\270\276\024\363\367\275Ah\275<\236\027H=\227S\006\274\270\223\247=\354\017M\275\375%/?\250E\277;\277\tB; \023\005=K\333\212=p\277\206>c\010\260\276\257(a>\020>\002?i\300m\276](j?`\320\263=\025\205\215\277\300\\\243>)\252F>\005\224\201>V!+\276\006\275\222:\225\277\r\277W\262\005\276\347}Y>L\013\270>\031P3\277~\004\211\277\"\216\356>\221\237\212\276\312\303j>\275\n\376\276\203\307\242>zH\256=_\301=\277\351i\002?\317\252\206<\034\361\246>\371\222\327>.\360\020\276&w\212=\355X\037?\2171X>*\326\034>\004[\020>K\210\361\275D{\234\275\250\375\006\276Ct\262\2758Q\021\275\210z\006\276\305\375\027\277\322v\333\275[=\204>p\010\276>\013\220N\277\351\300;\277\366C\232>?\330\301\275\021\010\243\275\\<\267\276\326\252\037?\367\2064=\274-\260:|\275\034<\371R\006\277\357\331\261=\210\020\256>\363\220\245\275:\344\003?\367\253W\275\306\364D\276\224\306>?\014U\241>~\2160?\347\352\226>\334B\"\277\324\276M\277v,)\275\322\200\345\275\025\211z\275\222\231}>&\236\271\275\345c\013>,~\325\276\300)\233>h\024\203=\216\215K\276%\250\022\276E\033\020>p\356\004?\030\201H>\323\376\211\276\360\025\"\277\004D\007\277\205\'P>\021\212\313<\270\366\211>\212\014\321\276\213Z\341\276\325\225\004\277\337z\002\277\252\037\264\275\347i\272=\230\3451?\272Tr?E\007\215\276\023\210\267\275Y\177\t?e\303\004?\260s\032?6z\350\275@\266*\276i\341.\277SW\260>O=\200<\214\305Z\276:\217\030\277d\247\225<\223\227\022>\3629\002\300\357Q\247\275V\373!?#\030\337\276\026\002Z\276)\236\214\277\250\002\306\275|\306#\275\265\205\305<4N\023>l\0102>\006H\340\276HT\376\276\326\305\302=}\374>?sO\306>\033\362C\276-\352+?\220\3060=\224\312\t?\350\312V\277\255v)\276\211V\242?3V\255>\025\274\\\277\312\244\025?\037\243\254?\310Q`?\315\242\212\276\326\024W\276\007Ol\277\217\267\007\275Z\014\203\275\037?\250\276>K\346\276$\\&?\033\n\357\276\253\260\033\277pN\004\277\301\204\"?\200\334X\276\207\343\010?\251\361\227<B\326\n\277\010\"w?y\355\216>\241\243\245\277\270U\231=\371;D\276\377\270\210\277\306\332\237\276@\266s;\014\035\371=\000\233\317\274\036E\020>/<+\276\247N\351\275\020\2247=\3341\220=\000\027S>\332\264{\2754\346\312\274\2500\013>\364\350:?44\204>\231\371\265\276m\021e>\327\036M\2760\240\267\274\300\327>\276\333\030W\276\'\032P\277\372\325\253=\016\220b\275Y\327\332=\346\203T\276\317\277P\275g\254\352?2\244`?*\275\\\276\242N\010?\026=\370>\203\374\237\275\301\355\003>6\355\345>h\266\202?0Q\003\271\370\033,\276\3303\013?\006(\250<\\%\265=8F\n\277S\354%\277H\\\326\276\351\316\035\277\300(\204\277\320*P\2767\213|\277\364s\277=kvd=\365\272\212>\214D\226\276W^\322\276\367\016\034<\245\010\n\276\220\315,\276\002\355\036=\021\327\r\275M\321s>U\314\262\276$^\276=\350\3720\276>\202\350\276\353\302\345\276\227\367E=\230\300\356>\274\t\001@J8X?\030\r\227?7\032c?\026/E=\363\261\235\274\'\363\213\276\001\264s\276\034\347\014\276\262pZ>\2251\221\2759W\021\277(\213h?\233\001\027?\314\240\034?>\261f>\375\006\t\276\211\344V\277\340\313A\276\274\3014=C\256\274\275\306\322\213\276\033\254\232\275\357\320\340\276}&\271\276E\334\005\275\271\214e\276\371\216\273>\006\2733=\305\220\200?zB\273=3\357\002\277\003\372\347<\313f\263?\354e\212?\312\255\213\275\036\271\255\277P\3712?\311\326\230?\346\3246?M\007b=\20448\276\354?\376>\362w\365\276\350\230x\276L\3644<\370\277\275?\025\\\267?\342\327\267=\202\250_?e\336\001?\222nh?\305.\032?\035\004\337=V\344E?\021\014N\277Y\240\016?w\306\214>\244\004\232>\230`\225\2758NZ\275\205\326P?9h\306?\260\374\354=B\245G>B\031\300\275\036\240K>\223\022@\276\265\365\"\276\360j\244=(\372\022=\351\004\302>\037\331@\276\214\374-\276\020\264\026?\317\000\026?\002J\306\276x&\333>~%N?\316W\255>\315\016b>\357s\217>\023(\004?\373\020\">\371YS\276\357\313n>sy\006?\0377\335>\027\311};%\244\344\276ai#>!\006\r=\301GA\277M\360\330>\241\213\206>\311\312K>\350\320\220?=\367\024>\355\242$?Qp\372\275 \225\n>u\255Q>\316 K>\207\274\n\276\026\032<?~\346\"?l\233d>\005\272Q\277\364\341\n\275\223\007\210\277\212\355\334>\364\277\034\276\206\032\025>]\376*\277\344\254\343>\303\206\267>\355\224;\276\312\005\201\275\316q\362>\224\372`\275\210\373D?2\353\217>\247\207+>\277\352\230\274\327\2711\277\305\302\t?r\360\272>\343\316\262=W\310\021\277\222\233\203>\006.\345=\'\265K?X\213\363\275\013b\000=+\305\246>Y\033\000?\211\211\200\276\350\210\">W\341y?\220eN?\316\210\205>\223u\372>\371\362\252>h\270\034?\202\262\313\275giV?K\035\261>\250YM\276I\203\001\276\312\233\035?\256$\032?3\027$?\236bh>&\205\034\276l\223\201\275?\032\356<\250\340v\276wr\261\276V\210C?\022c*\276\365\345g?N\277\034\277\352\261\327\275\357\222n\275\301i\004\277\374c\235\276\3142\300\275\253\371\022?\210\274\225=\213\350\224>\2158\003?=\311:=g\221\223\275\271\253C?\373\373\t\277jn\036\277_\265\034?\2125\322\275r\242\234>G\2535\276s\0215=7`5>.\244\210<r\221]?2Y\246\276/\343\004?\211 \305>\274iS\276\337\204=\276\2749\000?\257\037\354=@7\267\273\346^\036\276\316\254H>\230\366\223<\2462\027\276\220#:\274\021\215\260\275fe\t>\024\207\022>\252\333L\274\'\240R>v\311\223>\027>R?\337J\224\276\366\010\007\276\335]I\276\237\244Y?\000\001\260>={\226\276\037\3665\276\017\353\313\274=\273\204=s\313w=A\221\216\276\322\356<>z\031\037\276I{\362=\022\233i?\306L\037\276zFM?P\366\250><\036\205><\340\t\276\336hB>\024<\306\275\316\310\234\275E\212\333\274\">1?5z\260\275\332\336\320\274\265r\001\277\215}\200;D\306R\276\224;\225\276\337\022\001?+D\205\275!\333\304=\236\367O\277\017\034\334\273\324\336\374>\352\215\305>\262\312\232>Q}8\276+\376*\276 \234\022\276\251}T\276D\006\227=rF3?Z4\200>\303`\220>\227s\275=\211UH?\000w\021?\221<&\277\2265\353\276\223\263\371>\217\256\362\276\020\374\202>>\221Q\276\254\363o\276W\335\364=\"*\207\276\312\201q\276~\3457\2762\322i\276\227M\357\276~\341>>>\316\234\277$[\374\275\337S\372>\023\242\331\275A\215\"\275\250,\305\276\270u$>\376\340\364=[\3169\276\317\231a>I\316\235\276\352a\356>QA\031>~\262\326\274\335\324\246>\023\203:\277\324\214*\273\253s\207\275\370B|>\036\305i>*!\333?\321\251\000=\016h=>\255\352\200\276\2004,?\000\341\212\276\250f\226\2769\357\237\2764On>\357\021P=\027H\006\277P\346(\276V\326%\277\212\276b\274\200x\036>wU\243>/.\276\276\245E\220\274K\272\325\276\304\333\342\273\267\003\331>\332^\321=;\245P\276\375\225\360\2751=t?\320\327/?\371\332\020?i\377\217\276e|\324\275\035\353M\300\321\344\000?$\272\243\275\300\342\214=\314\332Y\275(\345\270=\343i\267\275j\n\"\2766H\007>wV\'\276\n`\235>\350}a=\025\327A\277\034\245\025\275\336\\r\274\255\262\255>\206\267\267\276\001j\274\276\203\276\370>\207\354&>\334\035\037>\200?\025>E\030(\300\341\t\265=\247\247\360=\036i\372\274 \302\023\277\020i\215\2755\341\\?\214r\316>mq\351\2757\333\255\276\312\361&?X_\'\277\264\227\257=!y\017?\016\302J?\316\005\243\276:\351\034>\331d\333>l\207\210=\215Y\305>\036\020\374>\035\274\'>\346\014(>\332Q\267\2761m\250?\236\201<=R\200\357>\035HZ\275z\301T=\3135\036?\217\212\335>\326\210\246>E\265\207\276$kP=+i\251\275\362\022P\276\304\272\365>\210\033\013<\2554J\276\376a\221\276\215\275D\274XA(\277\311\017\250\277L\311\303\276k\001\017>\376Vx?W\365\203>V\242\244?\345w\307>\376\002\032\276DlS\276\231\223\023\277F\027n\276K\342\017\275H0\327\277\263j\240\276\240\"\317>\217\365\200?\362\205\343\275\004\321\223\276!8\253>T\004\\\275\33199\277\253\357\213>\323\222/\276\263o\232<\234u\013\277\256\2745\277\\\255r\276\344p\252\276\030L\007\275#h\350\276\217\315\254\276d\202;\276\375\030\\\276E\006\300=\245\371\345>\370X;?|\370\321?I\243a?\227\023\r>M\307^>\264\032\002><\300\204?!\375\354=\226Ie\2752(\270\275g\n\275\277\035\267`\276\376\355\254>\232p\226\276U\266u\277\006q\036\276\304\250\325\276\035m\356\276\205k\347>Q\021\213>\336\274W>\327\304\023?\347\242E\277\350bZ\277\177\371\235?\036\317\001\274\251\324\221<\250\037\267\273\016>#\2753\261\321\277\364\006\016\277\224c\271= I\201\273\240$\241\273\305&D\276\200\340\325\272\270\t\211\275K\373>\276\304\253:\2758\272\355>\023\251c<\356\274`>n\021\271\276\273\211\254?\360\226\247>q\254\035>\325e\023\2764\017\232=\024\021\233>K\000\272\276\223\336u\274\2137\232\277\250\337v\276TC\254>J#\007\2740\311\202\2742B\370<1We>\364\326;>\324\326\312\2759\1772>*\006\016\277\351\247\007\276g\027\025\276\3115N?r\345\"?pG\211>c\000\221\275\347M\364=\270`=\276\327u\006\276\224\272\002?\230)\243>\023\242\021?\347*s>\272?n?U\257\000\276{B\037?\351\026\'\276\322on=n\341\347\275]\211\275><\221\374=\210J\211\275\252\006\357=k\264\240\276{\205,=\303\244\332>\nD\306>\014;\207> XW>\337\215\272;\003\374\205\276I\317\342\276\026\025\024?\274 \267>\004\3310>/\340Y>k\231\t>\017\356?>\252M\326=t\234\'?+1l=Z\267l=W\354Q\276\335\236\272\276V8A>\037\316\332\275\217KJ\277\273\216X>ac\t\2774$u>\004/\264\275\376d\221\276\217\221\336\276\364\216\032\276\024\310\322\275:\304\226>\021Z)>\231H\320>\356]\347>\341Q\251\274\301\267\014?\342\023\270>\'\252D=\311\326\272?IA\334>\255\244\016\277\250\014\022\277X2V\276\264\233%\277y\241\211\275\312\203\334>\\\023\237?\312^\005\277\336\350\246=\200\375I?\252\225\210\276\016\322e\273\tR\262\276\351\301\250\276\330\216\014\277G\317b?\256\307\344>:\321\313\274\371V\222\277\275F\026?\356\360+?\311\337\024\276!\301~\277\320\237\267>\311\261\025?P\356\342?a\3447\277<\365\003\277\317\213L\276\341\204\025\276\303r\247?\\\324\374\277\260J\201=O\374\351\275>\014,>\322\271\350\275\014f\207=\035\254)\276\276\221\030\276\346\220\324\275e\362\316\275\265m\024\276a\253I<O\373\\\276\236\266\253\276C7.\276\341\322_>\2635\241\276\347\221\257>T\200\207\275\371\271a\275\374\0203>\376k[?\027\327I\276\372o\016\277\005\342\026\276A\277\025><#\210=\221\253\256= Rw>\214\001\215=\027^\221=\220\n\016\276\330\'\324>\377\204\r>\3464\006?Y\313\264>\264\360s>\3550O\276Prj>Sp\335\276,\372\351=N33\2770`\206\2770\t~\277\212\225\017?\207\307\253>\205\302J\276\3060\035>\275\257\207\276Gj6=\261\341\211?\363\260:>\244\311]\276\200b}\275\001\314\374\275;\310\t=:\341s\276Ru\221\275\013r\222=x\237\315=\373x\274\276\002\366E\276\'\205\231>\354\0335>\014\002)>\0030\351>z\353\362<\2731O>\225\242\006?A\236\332\276\316\272\313=k\2320\276\334\276|>\321\306\337\275\314\233\211\275\337\277Q>\013n\331=\r\261I\276\332y\224=\245O\223\276\025oo\277\255\304i\276\21219\276\233\365\275?\233\264Y\276\307\027\246\275u\374\037\276\nQ\325\275U\277\363>\351\2363=\351;\006?\260\232s\275\"\037\022?\023\223??N\331\222\275\330\204\227?S[)?\t\023\270?\331\377)\275\216+\241\276e\250\257>NZ\014\276\322\215*>\027G\317?\0061\212\276\2604p>\331\331(\277\244&\243\276X[#=q|_\277\273e\023?t\333\n\276\013\373\223\277D\266\032>\270\374\035=o\367\225\277G \332=\245\321\257>\336eY\277\002ZN?\252\000\301\275\233\2740?\373\035S\275R\022\016?\241\037\000\2765\330\022\275u\311@\276\347\372\023?Y\262M\300\352\317\t>\250\257O\275\004I\363=\024%G>\316\242\036\276\016V\371\275x\217\017>\257\324\305\275\251h\324>X\324L\276\023\336/?\036\343\252\275QP\227\276\324\317\275<\207H}>r_\224>\232\342\020>\n\226\001>\316;\333\275@\261\022\276\253zj?\230\202f\276\027\370g>\330\333\347\274Xb:=&\3378\276\250\221\214?\206}\024\276\006%C\276\312\035\t\277\272\201\221>\007.\307=fmQ=\243\316K\276\n\355X>\003TX>\206\310\276=&\000g\275YO\212>\256\303f\276D\243h>\367\375\250<\255\'\346\274&\211\031>\311\212X?\203.V\276c\3314?\025\022\024\276jf\356\275J\342\013\276\031\312\363\275\372\005\373=M\335g\275\236\033q=\370.Z=\014y^=\373I=\276\202 \245\272;g\020<eB\335<\021\255\223\275sE\024\277.p\013?\233\177\220\275\212\350\200=\304%\252?\003\373\201\274\320\0067\277\331\"\222>\203\252Z\275\305\331\310>\017\034\273>\250.\004\276\217i1=\312\372J=\304\247R\276D|D>\262\250g?\260G\225\275\210\016`\276jEY\276\256s\234=3\374\001?lW\220>\336a\324\2742\037\376\275\007\315\'\2768I\\\276\361\306\344=\300\262\266\276\276\001!\276?)\251\276\031\"\222\276(E\246\275\231V\330\277\202b\330\2767}\345\2752\261\234?\323\360\211>\374\r\024?\210ly\276%\024$\277\330\201^\277{m\227=\236\3346\277w\004\304\276\300\337W>I\357\246\276\226\256\026?H\243\234>\243\032\251>\267\265C\277\007\336J\277\362\312S>\007V9?vB\244\276\262\373P\277\232\n,\274\363\220\371>B\027\371\276)\013\">\236J\341\277\345L7\277\032}\203?\304\366\342=\312,\314=*\225\014\277T\344\014@\276\331\202\275\233\026\356\275\324\302L>(\200\317\274\320\024\270=\200\245K>\022\032\003>\324\n\016>8%\375\275\206\256\343=\263X\010>|\016\211?\232c4\276\333\257\216\277\210g\t\276\205\2759\276\017\025^>2+\200\275\336\232.>\021w\272>\327\263\242>\031M\307=S~\027\277\206yY>\205<\273\277\220\221T\276\3008\254>P\305\030\276\235\270\006\2765\237\205\276\305\221\205=gAk\277\271_\000\276\262\243\014>6\355\213\277\256\363\016\277\346\211\330\275if\276\276{2\000>\030+\364\276\362gx\276\366\004\232\277r\n\022\277\363<W=;\355Z?\035\316\366\275\203h\340=\330\034\023?V?\002>\000\344S>\021\327\322>eR\037=\363I\241\276\326\267\260<\237\340$>Se9>\022k\340\274E\352\004\277\315\375\357<\301\351\330=\374H\"\276\240\2334\300\020\300\310>$\"\200?\375\037\321=\200L\324\275\361,\013?\314=\253\276\242&\251\275\310\247$=\235}\n?\001\245$?\317\250E<\273\316\037>\016/\177\276CS9>\304w\313\276\233iX>\373i\010\276d\222\307\275\255\352\354>\032\310\020=|\304\267=\207\327r;\352\243o\275\016\360\002\276\3300\277\274\002\362\034\274Y]P?f+ >VP^\275\372\315\236\275@\254w>\276\2335\275\224!\207?\rx\014?\317\177|<\220\031M\2753\203d?fI\234\276\237mE\2754\373\272>m\265m\276ZJ\367=\016\320C?\365~0??\020\006\275\027\254\203\276M\234\217\276}\331\331>\200\234\212\276l\273\024>\332|D=\025Z&\2775\260\023\277TH\363=a\033\245\273\006@\371\275?\254\017\277\325d\005>\030\251`\274\227\034\205?0\362i?\325\317\246?\2068\235=\326d\222\273\303\010}\276\322\"\240\277\354\331\260=\3245(=dM\300=64\031>X\277\355=\034\323\344=\264\243/\276\264\352\241\275\365\344\362\276\371^9\276\201D\231\277\242\325\030=\342\334#\277\277\205Y\2767S\254\275\225\003w\277\351p\226>Irf\276\321\375e?\036d\350>\016\327\025\277\323\251\276\275\224*\225\276\226\037\240\274?\t\335<Z\351i\276pi{\277q\352V\276I\034w\275M\022\266\276=n\311>>\302\313\275L\027u>\177&\250=\327d}\275#m\241\276\234\255\025=\222\217\217=t\203#\275\310\207\363>\034n\247>u\rZ>\253\031x>\022\310\251\274\020Gc\277\301\321\225=\241\221\036>\370(\017>\271\257i=7&\344>\304\356]?[\'\201>\366&K\276Dz\232=\266#\211>\321=\360\275\030\237\355>Z1j\276\004L)\275~\032\016\2776d\010\276\231\225\270>2Dm\277;\202\367\276b\r\365\276\353\035?\277\315\333\017\277\276Z\017?W\261\026\277\241\351\264\275\310hP\277\030\2012\277\301\365\000>\276\225#\276\326@\207?k~\346<\305\253L?\033O??\226\350\335=8z\221>\254\363_?\206\212\235<S\345\354>\232x\277>X\000\336=`R\263<\277\222\313\275\336%\005\274\327jm\276>\250&?\021\331H\275]\200\246>\241\205\010\277\351\032\244=r\3167?\202\260!?\266\306\204>B\rU\275\245:5<3\n%\275\021\2556?\264J\336?`\341\004>\306\274\304>.D\245>l\2248\276\305\265e=\313<\231?\277\216d=e\274\230\275\323\022\225>\305h=?j+\267>\206\000\306>\366\275H?\002\025\021?\265\351-\276J\337\254=\ns\371<+\267j>\371\314\177\277\\o\030\276W\300\037?.\251\311>\256\004\253=\357\006J\276:FL\277\212\022\255\277P\374\320\274`rm=\336\243\375\275\360\347i=M\305M\276Pe\r<X\335\036=\350\375\262\274\224NW?UK\010>*!\n?j\253y\2769C@?\265\204\304>k\371~\276\276\367\023?u&m>p`\335=\333\233\212\277\341\214\376\275\236&\230\276\206_>\276\003\017\216>E\333\211\276@\0378\277\326H\336\275\365\277\213\277o\3264>nf\"\2762\203{?\032\202\031\275o50\276*F\307\276\274\307\342\276\366\033\366\276\262\252-\2760\220\n;\324\336\022\276\343\216o\276c\275\334\274\256\021\205?\033\204\245\276\017V\254>o\350>?\222\351j?Y\230\363\275\230\035\375>\310\327\305\275C\267\207>v7\226>\\\311P\276Q\021V>\217\004\236\274=\244\n\276j\245\307\276\230#_\277y\261v\276\t+Y\277(\237\324\276oi\024>h\376\021\275\331.\037>I\215.>N\237@\276\270\2003>\033M\217\277}\211C?/7\023?\"\311\035\276\323tp\276T\266\360\276\210T\010? :\023\277\366\r9=I\375\002?\244,\032\277U\377\330>\326\000\317\276\373\252\025?\271\277f=\024\372f>\370jA\276*\n7>\202\354\013?\'\366\033\276\373o\263<\277\203\335<n<\206\276U\337\211\276 \316\023?\007\210\014\276\355$w\276\004\260\226>\362\211\036=\212\266\241>e\201\242>\021>\263?|\302i\274\315\031\200?\264\357\236?\360\\\343\276\n\242\340\2762\335!\277O:G=k\375\204=0\350\010\277S\361\322\276{\272\003?\212\333\372\272\362[\346>\2005\343\275\351[\241=\356\266s?C\221&>47\031>\214\351\177>y\366\240>\334< \277\017J:?66\376=f\317\332\276kJ\272\276\301,i?Z(N=j\247q<\372\336\356\275\246\356\006\300_\301\331>\246\3311>\256!\233\275\374\262\"\276\004\2112>\200\375\355=\350\213\334=\256\024E\276\376\243&>"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\214\005\023?\340f\275\274\321\000\275\275L3\355>\202$\323>\'\177i\276NK\271>\250\026w?\267\337\300>\250\325\211>`O[>\353\231\240>\000\331*=#\257\202\275i\221\223>k~\n?,\363\342>\323\367\376\274_Z\216\276F\037\272\274\351e\366\274\266\2062\277\0353\006?z\354\214>\026N9>\254\231K?8\326\357<2y\035?A\213b\2757\200t=E;\204>r&\246=>\3576\276\260\216\033?A\204<?<\024\246>+Xt\277Lj\241\275\r\234w\277\020@ ?=\"<\276\212<\016>^\000#\277\220o\344>\334#\005?\263VX\275\357\376\r\275\203\234\366>\327\nU\275\340\231v?\262\355)>\2311\210>(\020\247\275i*-\277J\344 ?Zr\233>\305\031;>\272H\327\276\033\355.=\302K_>1\002\021?>\027)\275v\016\245=\346_\372>l\"\336>\276\204\264\274\261\361\302>\023Sn?\345&+?$\270L<\215\240\334>+\036\211>\204\325\347>(k\243\274\325\272l?\3637\351>k\266n\275L\224\223\274^\2710?\023\275\n?RF\323>\\\302\331>=O,\275\322\004^\275\267\301\332\274]n\244\275\262,\255\276\252\t\"?`\205s\276\306\3722?\242|A\277o\022\002\276\034\007\026\276\260\310\n\277\312\226\321\276_&9\276\033\334\273>\263\221\274\275;\320\235>.\3045?\035\266E>\301\357~\274M\365\031?po1\277\2775\334\276f\r\014?\244\325\r\2762\205\227>\252\325\260\276#\302\212=D\327\333=iO\202=Bm[?\243\307\241\276z\252\252>\227.\332>\000?l\275y\372z\275\034\256\230>\004\336h>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\026/B>P\221[>\310\007\230=\326Q\261\276\263\t\217>k\314\320\277\336\262\252\276\212\346\032?\234s4\276`9\001\277\350a\001\274\355\033\252\276\242<\007?p\314\023?(\226\n\275;a\333>\213\037\360\276K\345\322\2768\013??y\350\033\277#\232\275\277\214?j>\261C\331\275H\002K>\26154?\273\017\257\276\000\'\026\273\351\212Z\276\265\031\000?\221\322\211\276\243P\275>]\3001\277R\373\214>4Y\331\276\322A\n<$\026$\276\312\254F>\267}\250=\324\356_\276},\307>\360\215\010?\312\206\000>\221\327\253>k\037\277;\355\036[?\221k\234\276b\247\255>\306#\205;b\257D>\020\010F\277W\375\200?B\320\033?\037\363j\276\364\266\t>\020\3312>/a\024\277\223P2?\032\217\227>\237F\001?L#j>\003)\351\2745\277\207\276\301\031\253>\255\341\230>\000p\270>\343fk;\377\210{>]\352\334=HT\004\276\314\007\360\275s\261=>\317\000a>\037\215\327\273\222\037\010>\224\253{?\234\307\033?vC\230\275z\204X\277\363\212\330>\370\020\215\275\350\363\326\276Q\177\023\277i\254\310>\324~\036?\265\214!\277g?\253>\031|\317>\253\363\241>\306\200\312>vi\374>\362\323\272\276CM\\>\0258\213?^\367\253>1\210\220\276\354\320\177\276\007C\036\276\'\313\'\276\244Q\271>\000\313:\276\202B\006\277\270x\267\274\227J\275>\351\323\033\277\231,\277>\321\265\304=!G\227?kk\253>\004\017A\276\216\217\312\276@\235$\276\353\235\314<\374jT\277\275|\267\276\247\307\010=w\340>?\362\017x\276\023\026S=m\357\234\277\016\375\245>\243\233\355>\2724\207\275\241+\265=c[\321>\270_\343>\233}\013\277 \261\205>Mz\332\275jx\r\275z\323\250\276h\243\241>[\240T>\351^\202\275a/2\277L\270\'?\334x\261\275z9U=\214 \326\275\206E\322>+Jp>PrH\2761\"\317\275J_\354>\275\357\360=u\000\030\277c\211\233>C_\312>0\311x?\211\240\274>\"I\200>\025\020\026\2760\363u=<O\233>\206\215\305>f\2361??\007g>Q2\027\274\n\325\370=\343>\356\276\265H\242>.\035\366=\304\217\341\2755e\361\275\226y#\277\017\370\241\276lI1\276u\364\240\276f#\323\274\224X\253>\242\214\253\276\001\302N\277\3132F?\227\3509\277\326\th\277>\203\346\276VXg\275\305\213\023?:-4\276\216\245\270=\350\261\357\274\031\303\242\276\325\275z\277\315^\230>[NE?\337\201\263\276i\252\t?t\026\261>[T\357\275\266\245\r\277\371\3570\277-[\266<\322M\260\276\271\007L?\254\321w\275\313\n$\276~Z\363>\356\036\343\276\256\374W\276\362\205\306>\314\331/?\303+\234=9\230\274\276\365\030\261=!\377\217>\"9\250\27655\255\277*5\037?\005\255U\277{\313<>9[\325=A\232\026\2779\221\277\277\225w\323>\r\002\021\276\215\234E\277\344\307\254\277l7\">8\022\231<\013+)>&\034\247>\272_\217?\2536$>\021\230\326>\343\370\301=BP\023\275\245\203\343\276\\\333\251\276H\226\371\275\337\004\004?\254\334\260>&\244\343\274\004\312}\277\2147#?[2\246\276)\007~?\000\006\356\276\235\316\016\277\235\302\336>\200c\356>}`\244\276\025\355u\276\365\211\031?\226\231\206=*\364\224\276\320\264\013\277;\023f=\300\321I?\266\367\300>\230#\250?\330\364d\276\357\017[>\275l\237>vHZ\277\252\345\210\276\031\335\027\277\214\256\343\276]\374\274\275%\375v\275\235\005\255?(\"C\276\344\013\237\276\000\274\241=Z\007\336>(f\n=\t\362V>$\273v>\244\254<?\220=\321\276k\314\002\276\212i\267\275Nr\005?\342\265%\276\256 )>8xE>M\250\346\276\\\323\303\2764\234\345>\026>\226?\010\301_?\016\255\277=\245rK\2757S\030\276|;U>7\250\260>\306>\201?\025g\230\276\231C\r?\000\346\343>\201S/?W7\213\277W\267-\2763l%\277`\224\320>`[\311=\200=\304\277\227\230P\277\277S\274=Y8\037@\252)\226?M\323\221\276\346>8=o\245\373\27561\217>\014\355\230=\214\'\235>F6\304\274\027\037\202>\257Y\332=\232\001\035\277\210hH?w\2528\276&\231\031?\2363w=\272\302\013=[\331o>\010\356\266=\357e\352\276\246\322\247\276\341U\031?\300[\300\276\"(:\277\273!\256\276,\361:\276\331\256-\276\323\220\222\276R\'P\276&I\353>7\362\233\276r\250\010>\270qk\276\302\350\257?$\332U<y\0310\277\340\352\301\276Pl\230?\217\301{\276\317E\376>!\245\000\276\331\354\332\276\306\325\246<.w\250>\321\215\320\275\273\034\227>\251HS?K6E?\020H\310\276\273|\362\276\010g\205>\217Z\232>\367fl>\033\252\363>1\026\032?\016\200\316>\260J\214\277f\217\252<\337\207K\277\234c\370\275\372\3214\277a\216\033>\254\005\223>\024\014\241=\245\r\201=\340&\003?\201\200\036?\016*\030\277\2651\372\275\232\332\245\275\007e\031?\r\267\201\275\010\353\323\276i\377\337>\255w\250\275\357n\311\276\265\300\342>\024\020\367<\255;\232\276\217\365T>h\177\212?\314\027\017?\\\010`\2761\274\323\277t\276\237\276\"\316\272\275\005\216\353>\007\003\020?\372\374S\276\263h`\275s\033\234\275\032\263\323\276\026,\036?\217\204\321>\241#,\275Ib\026?/\203\231\276\362r\017\276\305\014Y\276^\210,=\373\037\036?\215\207\312\276\241\264\021?\333\370\023?dS\n>\325\230\254=\305J*?\240\236\007<j\241L>\000\327\203=\325\242\363\275i\371\202>\203\332\003?\023+\332>\016\017\301\274`\024\002>\245\363a\277\023\302\247>r\322\206>]\002E\277t\213C\275e\244\364=\374\310F=\352\3276\277T\362>\277\031\274\243\276\242F\343\276,\211\271>\320\313\030\277\017\023\220\276a\022\211>\347h\352\276\302{\020?\223\014\266\276\373m\203>\335\200\267\275\364\202\221\275w|\013?+\206\310=\000\341\034\300\206\343\351\277\017\332\n\277.h6\276\223\352\246=Y{_\275r\234\'?\352\277\244\274sH%\277jN\003\276\306\300\'>\331\202N\276\330\310\335=\361\377\346=\355\247\301>r\201\007\276{\226>=\0107\375\276\314\204\216\275\0161\027>\021\033\000>\221\203\353\276\322\371\307\277N\352\224\2762\313v\276\343\225>?\014\271J\276\272\232\332\275\255\037#\276(\212\203\276\"\302\000\274\252\256I>\222ah>A\272\263=\\\213F>[\257??\035\224\014?\024\267\231<v\026\016>\0337\005\277\344x\352\276\321j.\277V\376\006\276\201u\"?\240\304\246\276\270\331\030>\266\332\264\275V\315\365\275\374\177\207>@\221r\276\005Y\003\277I\262f\276\331\304I\276=\265\265\276?\373\037?\225+\376\276Bn\327\276\336\352\005?\003#:=l\003\225>o\371\211\276\014k\271>\016\247\363>%W\007?n!B\275jm\336\277\337\327\332\276?\254u\274\305Q\373\275\254\221D?\332\362\241\276\310\266H=w\026\246>\261\247\202>\204\314m\276\346\253!=\004\221\221>^\332 \277\026\025\010\276\252\371Y\276\223fF\275H\354\230=\336k>>C\233\016\2771\233\317>\321\207J>\021\035)\277\217\231H\274\255\227\207\276\'kf<\231\333\234\276@\234\242<!\263\256\276\252\222\360\275\236\216h>\0212\010\276\316B3\2751o\377>h,\206\277 \202\032\275B\274\203\276\222\273\262\276\342v[<\210\2023>eG\032\277z\"\223=\271\200\233\274\027b%\2766\372\241>\273Y\222\276\026\025\372>\331\007\271=F\202\033\276D\232;\277\252\231\006?\364%&\276\" \232<4G\240\277@\355\243>7\350j\277\260\3611\276 v\235>yi\037=?\014\033?\207\333\034\276C\002\205=\334\326\223\276\352r@>cp\241=\322\026x\300\260\326\036\277#\366>\276\032Be\276\263\301\236\277\303\205Q>6o\026>\276\000\010\277\277 \003?v3P\276\007A\003\276"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "d2\312\275\265\301Y\276\216\023\016?\374,j\277\355\007\376?\017\212\205\276\'-\226\277o\313+>"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\352n\246\276\210\036\021\277\366\246\217>T\315\322\276\032Q}\277\356\355\002\277\362\236\232>\036pD\276Q|\202\276\312\212\325=e\375s?\355\0031\277\350\3366?\335Q\023\277\002\016\'\277IC\373;\204\325\237\276\340\272\250\276\322qK?k\273\030\276rw\373\276\032\221\301>\271\003Q\276\026Ci>\215\302\020\276b\026k;\373p\203=\336\271\264>\004R\005?T\321\r\2766k\003?]\247:\276\022\036c\276\006\255\330\276\247\216 \277\315\303\364\276\230\244\016>\0105N\276\214\rE\277b\353\337>\\J\307\276Gn\205\276\335\265\001>\251rg>\354* >\225\263\377=\004\373\024\277F\214}>\n\240\344\276\205\315o=y\014\232\275\177\344\311>\303\334E\277oV\313\275k\237A?\373\"\025\277qe&\277_v\277\276ZN\306\276\230\225\r\276\2320\036=+\344\270\276\261\233\370>\237^\026\277*dc\276d\325.\276\231\007\226\276\346\351\335>\256\224^\276~\213\216\275\240_7>p\265\327\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.7300785183906555
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
