node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\213\274/\276\032\035\027\2763P5?\354ME>\377\214z>G\244\263?\260\016\317\274\352\225\270>\3132\317=u\307\335>J\021\204=\001~;?Npp>c\027=?I\341\374>\240\351\226?\373\246\225>\224d\257\276\370\227\356>\2114\016\276\252\275\025>f\253\006\275E\250\300<#\304~>\252\024]\276f\206$\277\037\026\210>\007v\021\277%]\273\276\360\\\033>.\324)=\237\001\214>/\270\362\275\251N\024>6\310\003>%\r!\276!\267\226>\025U\225>\210\026\277=p\345\205\276\250\357\225>\212\026\021>\007\363\204\276\377\006d=\202\322X;\266:\306=g\"\300>00\002\2761\365\315\273\206\024:>p\227\332\276\375\344&?<\365\014>6\025\260=$/\t>rB\t=]\017\353<\273\206\357\275\3743\277>)\000\364=\262\245\262>\224\254\236;\312\253\315=\332\252J\275.\355\346>\334\227\355>\266\305\222\277\231\252f\275\341Ic<\215f3>\324\302\376;I\201\347\275\023\035\304\276\034V\334=G\202!\274u-i\277\254\002%\276K\261\026\275\267\312y\276\244\313\t\276\237\316k\275\373\232V>\305\356%?\211\267}>\025\341H\275\307\341j?\363J\177\276on\210\276@j\033=\250;\220\277;\251\234\275\244\033\004\277W\354\232>\274\201Q>\320\342\360>\200\036\344\276\272y\376>\260\303\350>\254\223\272<?10=E\213`\276(\274\275\276\206\304\005?\310\243\206\276\257\202\373\2762\343\315\2762\274\026?\034)\333>\203Ko>\235,\300=\332\364\\=\026\231\273\276[y\337>#{\227\277\306\022\305\277Ra\275>!\034,\274\322\371\255>5 A\277\261\206\n\277\r\277N\276\306H\206>\022\310\244=\263d\311>\305\024m?q;\036>\276\360\334>\314\2566\276\347\242\341>\336,z\276p^y>\341X\007>\332\222\260<Z\344\354>Y\364;>e\251_?\357\327\002>E\353w\274\002d\006\277\341\000\224>\232\247\262>D\246\302>w\031\312>\257\204\314>ql\245>%\'\304\276\242\025\332\276|\260\205=}\357\247>\257Z\210\276\"\372n>\245\304\205>\244.\312=\272Kn\276\346\337\023?C\275\213\276\236@\247=\270\223U>\177\363\013\276\017F\001>\224\203\324\276\357\236\007\2778<P\276\373\007z=\213\002\n?\003\211\316>\222)\352\273U;e>]\212\257>\226\230\254\276\360\275\216>I$+>,\240\014\277\"\323\375\275\222\210\350\276,\345\001\276\'O\213>\2468\001>\326\022\005?\226C\303\276r\275\210=P\200\261>\263\355\342\276\244!\334\275\367`\356>\206\260\371>\264\013\361\276U\3522>_O\002\276\367\034m=\314\241\017?\231\274\032>d\334\215>u\345\275\276d\250\017\277\303o\371\276v\335$\276g?\223\275\232\217\364\275\354i\363=yh\221>\345\013\204\275\026\350\350= \274\037>\354\360\332\276\250\253&\276\224n\311>\235?\013\276\377\003\252\275\241\315\205>\267\275\217\276[P\r\276\365\017\225\273m\211\226\276\273\312\244?\224\275\270>\030\036\262>\363\203\210?\306\264\023\277\033c\214>xy\242\276m\0267>\034z\023\277\367\356\003?\304\370\231>-m\264\275\311^\033\277\023\177}\276\263\324X>Q\227\324>\221\236I>\226\265\201\276\322K\r?U\200\364\276\010\341\360=Mbm>\031\241\274=\322\266n\276\277\037\217\274\210\214\031\276 \t\272>\"\210\265\277\344\333\"\277\247\306\337>Br\221=\207\365\223\276\200,\215\277R\355\300>\026\017\036=\222\215o<L\270Z\276\027\020A<0,\202?\313w\330>\253\265+?\370\n\010=B4\310\275\341\226\267\275\311,F>\003\317\260>\344n3\277\233\373\325=\235\324\216>\226\314\202>\246\023\265=i\317\307<\240N\023>~7\201>e=P\276[)\023?\202\205\024?\241\016\004?\231O\326>\3751b>\202u\232\276ri\273\275\325 p>\267\220=\276fIC?\204U\020?\335.f\276\005=!?\361Q\227>h\227G?\251\027\226\275:N\225>\224\002\326>;\370\032\276\251\364R?\022Mp=\241P\000>I<9\276\n\\\035?\032k\336>\332\3537?4\035n>G<S>NOb=\333\177\221\274\203\354\243=e\002\013>a\312&\276\372\236\233\276\010=\022=m\331\215\274s\227\354\275\350\343\202=\324\037\302>\006{->4\013\232>K\'h\276E\013\267>\024R\376\276\373\243\n<\t\241\200=\027\005\250\276\3340\273=a\237J=\237*\035>i\231m>\007\3304?\003\032`>hA\266\276\025\314\\=\277c\211>=cc<\224Y\306=\177\2030?r\252N?$\226\255<*\376Q=@\357\017>D\330\024\276\225\306%\276\014K\263\274\307n\203=\306\370\221>\225\250\300\276\240\211\">\377\271\200\276\017\305\202<\362\241\341>.9\262\275\"[\353\275\304\260\351\275|\255?\276h\013\001\276\347\025\335>\252\270\266>S\217\036? \234%?\274%H>\215g\031\277\301\304\">r\024\002>\000\364c\275fv\261\275\307\337\372\275\253\325,>\350\355 \275*);\277%K\354\276\256`\006?\213;\313={U\241>\177\312\251\274\352\004\206\276\344\251\004\277\034[\332>1\017\341>\002\004\336\276/&\033?*<\332<r\302\263<5\016\265=\276\256\221\276N\311k<\037\303V=\031K\254=>O\234>.\223o?@^\270>x+_?\247\245\034<\25064\276\277\307!\276\262s\316=\036^,>=\001\240\276\371\r\013\277\342\215;>\036\315\221=K9S\275\222\234\n\277?\330\264>\305J\340\274\273\305S>\344\022\200\276\347\207q\277\260@\236\276l\351\340>\n\305\247>~h\214\275\276\221\233>\250\324\226>\373\221\344\276\251\340\274\2760\324\203>_\313\032\276\317e}=\026\272\216\276Pt\354\276\312\217\361\2735\026\272=k\037K\276\tl\004=|.\303\275\344\225\200>k2q\276\317\t\035\276m\034a\275\327\211:>\3061\010\276\354l\275>\305\312+>\235\221x\276\322\236\216\276\270+\331\276\322\244n\277\350\304\225\276\245-\006>\374#\326\275\301C$\276\350.\327\276gv\352>\350a\313>\265\300\345\2758\320J;j\003)>REV>>\356\007>\006R\210=\376\241\t>\006Fu>\256\026\355\276\021#\244\275\030\204\232\276\265\340\007>\346\231\"?8L\234>cK0=\202B\036=\036\207\360\274?c\001\276\251/\240\275M\013<?\213\000\337>\375\333\247\275+\363v>]\213\t?\325{\261>`\230:?\231\314&=\322g\214\275\223\362\345\276p\274\031>\350;\237\276\031\224\036\275\210\350\361=:e\345<Wm\242\276MO\344>\322\222-\276-\370 \277\361\340\014?\"\024\177\277\262~??RS\222>\317f\312>_0\314>H\241.>4\344\023>\261?\357>\377\\T>\020\301\356>p!\306\275\2302n?\355\257\271\275\037\305\311\275Z1\374=\244\317\201?\001\215\354>\325\353V?P\323\016=}\222\006?\324q\253\276\270q\007?\002^$\276\261\014&\277c83?\372\210~?\200\323;\277jy\277\276h[\372>0\343\352;\241-Y>\350\235Z\2755}^>\276u\256?\255\036\377>W\0379?>\006\374<\031\217\320\276R\257\034\277]\321]?\304\213\010>\000\302\020?\344<\341>\377I\327=\276I\215>\344Vo\2760\302\334>\231\373\303\276H\277\340>r\202\246\275td0\274\241\312U?bN\312\274hk\341\275\363\277\345>Z1A=)\344\247>\315;\226>\243g\014>\254~1?\033\2375\274M\307B\276\277\t-??\275q=\036\245=?\320\372\003>fd\225>GL\271=7\013=\276\303\013\006\277D\021\320>\325\370\254>\267\225\235>3A9\276\277\"\t?\334\351\374\274\020\326\307>\230\240h>\223\232x\276&\334\336\276\323\2552\276\335k/\277k\206\035\276\343\274\033\276\323=Q\276\323\367\216>\307\245w>\337\177\253>W\024\022\277\242\205\200>\341\362\033?M\364Y\276\224\003\266\276\330\333R\277~\313\373>d\217!?\210\371\200\276\351\307]>\356\323\236\275\256M\277\275G\r]\276\244\325\001>\217\327\226\276\360Xp?\301\372\034>\360\036\262\276T^B\275\r\036E>`@\020?\005\201\235\275\350/a;%\374\031<P\320\235\276\266R1\276\332Z\306>\354Z\356\276\375\316\351\276\321\024\003>`\367P>8\221\023?A\366\210?\375\017\255>\360\325{\276\325!n>\336\376\331>\007Y\333\275\230\016z?|a\r? %\224=\233\374\324\276\t#\352=!\355\302\276\005qz>s!\004<\206\022\303>\000\206\224<\233\016\246>\223\003\217\276\307CK=\356\037/\276&\307\247>\305\2731>&\217\317>\333\303t\275\364\314|\274CX\304<\355i|>1\2142>Z\243B>/\005\362\274\352\216h\276\224\027\234\277\343kU=\233\364\032?\274\342\204\277{R\\\277\177.\024?\270?^\275o\020\010>\251$u\275\310\035\234>AI\375>\342\256\251=:\033\025?\271\317\243\275\337\253\265>\243\304\027?a\342\211>\025\3309>Z\030\231=<\031\354>\365\211\235>\000\370\206\275%K\306\275L\031\277\276\215\254\261=0U\251>\333h\316\275W\376\252>\005B1>\325\200\274>\273\236\337>4\240\026?L90>\214\271@>\252\311q\276(\312\312>\220O\000\275/,\314\276K\326_\275\226\303\331\276\266?*>\274\016\022\277\021S\263\276g\245\345>T\304\276\276\364\230\204>\032R\023?\3247\241=\357I\272;\316;\233\276< \325>\217x&?\270\013\215>\363\010S>\325X1\277P\303\027>\2018\334=\340\300\363=\242\366\211>~\027\031=\013\250a>\24668\275\217\216\201\276s\356\254>\033\305\010?\\\010\262\275}\323L>\016\\\004\275\306PG\276Dx\266\276\033W\307>\014n\213>^\222\001?M\033\210\276\024\003q\276\036\373\371\275\257\365\351\275$.\326\276\357f%\276\224\314T\274\232\347\211\276s\265\001\275\2531\237>\363\3714\276\226\252\272>\256\374\201?&q\207\276\307~I\275\016\031+\275<@B>\000\263)\276\264\243\004\275L\363\010\276\205\036\240\275\210IE\275\236\022l>\322\3372\274g\321w\277\333Dr>]\330[>W/w>XJ)\276\r/\241\276\273\374E?>@\353>n\257\316>\027\321\371\274\'\247\225\276\010j\233\275\236\324\234=\026\223T<\365\325\014\276=\237\210>\216*u>A\367\014>$\3543=\300T\235>k\373\235\276:\021\271\275\236\221]\277\353\317\355=1K\225\276\244I=>\273#\205\276\016\034}\274\316\240\033\275\223\313\266:T/\374>\327\210S>\304\266\316\275\206u\211>\265\316\277=7?\t?a\243\252>wN\271<fAc=\253G\215\273$J\331>\207\354O?4\034\004?\2722=?\240o>\276a\201$\273q\342C\277\300\002\352=\"\257\315\276AV\246>\005Jw\275\253=\366<$13?\255\316\306>\274\330z=:\376B=@\240\177?]Y\346>\245\375\257>\004\226*>^\361\336>w\014\307=4+:\276\200\022\236>\000\217\261=\311\021\235>\240\324`\2779]\301\275\0067\032?c\313\020>\003M\327>NX\243\276)\271\214\276\374]F\276\377D\220>&\360\264=\231\361\203>\370\337\300\274y\342\354\275\242r\300>\255\n\247\275\322\235\356>\265Bl>\371V:?\002j\005>\357J\270>,U\350>&L\337<#V\366=%\360\036\276\252<#\276\006u\215>\r\327F\276\327\240\252=\'<\211\276n\031\">\241\336\201\276\331U\222>\340\262C\276\363\220\232>D\353[=U\333H\276i}\254>Ak\020>\224[\241>\224\363\374\275\316T\020>E\374\346=\203\335\275\276\253\273\250=\022\253\035=\370\272\202\276\177\335\003?k\221\323\275\177#l>\023m\272\276\235\001U>1\214\023?\264F\266\276\030\237]>\310h\222\276\347\035\375=\322\247\231=\303\340\205=&\";>\006P\223\276\325\021J=\235\235\272>\035\273\017>\265yP>\265\241\377\275\332\026\202\276\025\276\t?\220G{>\313\377\301\274Q,L\276\036\020\361=\331\315\333\276%\263\275\276\274M\013\276\024\0277?\275\267\265\275\'\3052>\326\177\337>\372\265\262>h-\022>\020\270\307>R\350\262>q\234\241\276b~T=\346\252$?\224\007w=\222\235\377\275\316\2172=g!V>\207\206\233\276f-\234\275\335\2744\276\371\001\272?\336\312V?\235\321A?\030\255I\276\325{\206\277\223\226\242=\357\310J\277\260[\222\275@\\D>I\220\021=S?\030?\315z\261>\320\336\251>\342\007=?\324\323\373=\370\035\330=\306\032\n>\224q\">\376\005\010\277y\220\232=\334\016\326>\322\221\360=Q\341\306>\266LU\275\346\010%<\364\3038>\230B\020?\035\244=\276\304d\n\277\364H\227>\236\262\302>\306-\270>p\035@?\200R$<\t\225d>\001@\003?\217f\032\2775\335\337>=B3=\252:V\276\274\033\241>\353\324u>\360\342t\276\266TR\276\366}\265\276e\251\350\274\235\325\215=d%R\277\022};>s\356:\276\247\205\360<Q\313*>\231\363\313\276K\223\202>\340\\\325\276\276#W\275_#\247>^\207)>\n\225\335\276\377\005\300\276\032\251\272\276\232\020\214\276<q\271\273\223\274{> \260\207=\027|\300=\353\272\021>\024\232\235\275\177&\t>$7|\276)K\324>\203F\326\276\272l\300>\210\221\222\276\352\316i\273\267\377K>\370b\227>E+\211\276j\266s>\177\306c\276\202\025a\276$D\t\274\225\246\251\276\226{\260>Su\261>\360\365u=\261h\n\275X\207\r>\340N\271>g\346\213>\210\224[\276\356\211\336\275\026\303\'>\317\260\220\276\247K\233\275\353\365i?\t\363\\\276<cV?\301t7?\301\250\034<\337\266Y\276\202\206/\277\363\216^\276\332Dp>\013\3363?\314v\026>_\364\233?\375\201\351>\321\370,?[\215\375=%\237\000\275\362\026\007?\376\234J>\235^!\277\363Q\017=\226P%>`~n\275\3750M\276\034\316\310\275_k$\276m\357\210\275\250\214)\276\262\233\001>\200\347\004\275\n\315\006\274]\3246\276F\023\350>\253E\334\275\3714\236?\304\177\357=[\245\244>\3037r\276\236}[?[YU\276\023\nd\277\326A >\266__>\277\224r>$\001\345>\207\272\035>ekC?`\254t?\355\350\314<z\301~>K\254D??\331$?U\327>\276\023\031\023\276\3774C?M\303\022?y\325\027?\331\356\321\274d\377%\275\352S\352>\306\210A?\201\215>?\374=\227\276\t\004\331\276\016*\027>\351\217S>\004\326\r\276S\376I>N\355\245=\025\311S>\251\026\021\277A\222\t\276\225a\220=\377\223\026=g\335\331>\032HJ>\345\3332?\275\032\366=\026G\024\276l~\024?u\004\213\276\251\000\225=\274%\240>\305\246\245\276\177\313\006?\020De>*}h\276i_L=\343\3446=\372\234\003\276?\016b\275\200J\233>\240\027\306;>\335\034\277[*\005\276 D\205>]jy=\016\013H>w\326\256>\"\325w?2\237\206\2761\353N>\231\240\001\276\204K\311\274\030\027\r=E\207+\277\025\033\323>\322\302\213?\333\214\223>\304[S=\323\3321\276\227/\310\275\321\217\\=#\035\004\276\\k\215>\035m\236\276\321\247\236>\374}\313\274 \310\371>\334\222\246\276\270>\346<Sh\256\275\273\207c=\000\3228\275E$\377=G\010B\276\235\177 ?\022XR\276\313\355I=K\016\270>\032\245\244>H\224G\274nO\035?\034\023q\275\227A\277\275,\340\013\276m\003\202?\346p\303>5z\210?.\2734>\n\200\251=\327\016%\276\203\000\231\275\315\253\262>E_\\?\315\276\244>[\334\362=\355\256\332\276\341\376\021\276S\340\311\276\024\016\271:\037\211\330\276\004\334\311>\327.\225=\014\370\025\277\264\244\222<\334\267C>e\254\257\276\325\022O<|b\356\276\256/\223>\340]\301>\256\251\304\277c#D?V\0106?-\262\373>=\201\223?A@\245\276&9l\275\331Z#\276\230[\004>\271\244j>\376\342\r?n\311\024?\231\232\004>\224Z\037? \n\264\275\246R\240\276\360n\274>\221\375/?g^\027>\016\335\255>l\323\034>\277Z\322>\277\010\355\276\300{\024=\220q\204\276\023p\344>}\342\246<\373\216S>\022\245\377\275\032\002\243<\262\233\'\275\265\206\033?\274~\331>5\267\337\276\3616\365>\230\007\240\275\375\336L\277\2573@\274\013-\356=\267\343\034\276fG\323\276\335\206*?\224\236\302\276A2\336\275o\267\005\2762\022->\2653\\\276\177gk>/\300\256\274;cD>\247\tk=|\177\221\276\014<\276>\033\037\n\275\2463)?\037}\344\274I%L>\367oY\275\351/\031\276I\344\225\276\220\263\272\275l\273\376\276\203\363\356\275\201T\032?\243\203V<\320x8>^\311\322\276P.\357>\363\261\314=Y\230\200\275\354\260\244\275\001.Q\276\'f\336\276\260\025-?c\261\013\275\267E\002>\021D\350\275\010\216\205=\366\354\243\276\305\213z\276U\374\213> 2\013\277h\277F>\3717\301\276\330\374\341=V\316\020>Xe\305\275\353\226\354= \325\223<\230\321\242<.\214\036\277\303|s\276\266\306\205\276\210\007\225<k\206\300>\352^\340>\374\236m=\370\225\206>\234\260\337\276\315\204\265\276\275(\242\276R\321\001\277\210\2757\277&)v\276\224~\276>\263,|>\030uG=\212\352N\276aT<>\224dL>\200\356\334><\372C>\025\030\305\276P\252K<\337l\207\276\255@\036?\316\343\004?\222\nt=0\272\006?\314\',=M\360[>\036\347\017\277\371v:>U\014\201\276e\255\274=q\237I>\211@\213\276\315\351\242\276&\275\027\277\222A\220?\275\305E>\251\236\326=\307\\\312><\362\207?\007\213\007\277\362\340\020\275\242\204\272\275\342\016T>\324\255\265>z\260\233>\342y\253=!L=?\337v\004\276\305\327\007?&\244/\276\377!V\276\034r\275\274\024\341f>\263\026$?\\\276\207\276\327\216\240>\032\317\245\276v\342\210>\014\367\341\276\033_\253>\225W\235\276E\213k\276r,\334>\3358\222\276\254S\236\276\303S\016>\025\001\200>dz\230>\205\316$>\207\240\303>\313\n\360>\226+\205\276&W\266=\373v\256\275$8\330>\301\023\222\275\023\206\023\276\n\247\014\275P\355n>\240\'\314>{\243\223>\256\034g\276s\n\000\275\327{G>\354\262\270>\370$\276>\000\203\006\276\034\314\234>>\271\333=\252?\244\2767X\266>\270\315J\273\033\255\226\276:z5\276\010\257\r\276\267\3318\276\363\232\017?\317\020\022?\022%J?\017\367\221=\250\036y\276\262\231\'?\001\021\212>n\t\370=E\311\246\274\334\351\326\276-Q\002?\205>r=\211\267M>.\206\242\276o\271\010\277\312l\300=q\322\254\275\221q\314>5U\227>\306o\226>1\351\024\276r\2772\274\3008\312>\376\325\350\276(##<!W\000>\022\246u>\374%\n>\214K\367>\264z=?\203\035\202=\033C\347>\325\257F=\276\036\202\276X\377\013=\327\214\236?\330n\256\276\256x\242\274\237\235\250>\320;\373>\373\301)\276\317\232?\277/\300\036?\306\037\276\276I\361\001?\272\365\302>\316\t\225>\354\244\212\276/\215\003=\236\271\317\276\264\217\036?\267j6>^\016!=g\035\214\274\000\361*>\354\274\t?W\265\232\275\346\355{\275Q\335\260\274Gr\260>\216\271\243\274\3111\247\273I\2338>\356\005\335\2765\235\024?\\\312\354\275\357u!?!\005[>\347\3252?\020\006\242\275y\307\030?\274\352\006>\266I\006\275J\356\023=c\215\001\276\243,\322>\233\332\030?\000W\352=\016\251\022?\371p\002>\3129.>5\332\r\276\035r\363\274\0230\032=U\2112?\275:\005?\034\314\006\277\335\305\272>0\016\250\275O\254\352=\"\372\177\276\353\353\017>\016k\341>\344\2557?\016\275\235>\277\362F?KhD\274@\350\022?\362\326\220>\347x\226>S\270\211\276\010\326\022\275\'\207\274>\350\017\207>\367\264G\276\022\002\032?\000\357\236>\201\252;?h\022&>\270>\203>\326J\341>\r\266\000>\340\254S\2771_\200\276\255\234\010\2746\037<\276Ex\203>\323r_\275R\363b\276\343\232[>\321\244\305<\201\247\217>\t\342N\275\366z\232=\220e%\276\256(\366\274kK\273>\241;\240\275\206\376\342\276\3538\274\276\001Z$\275\236\277\010?E\037L>\262H\206\276\"9>>\352\370\014?\033^\254>H\304\235\272(\377\017>r|\r?\226k=>\026\023\002\276\243\226\000? \317\007?\322\005\"?(\225\332>\\\331\t?(\250\244<\356`l>\033Kv\276\332\025\264\276b\243\276>\006\027\3359\2033\000\276c\317+>\273g\016\276 \006\024>\234\377\037?)\331\362\276x\307\351=9s\231>\237[\000?\237\311\304>\274\2565\277\213\353\010>\262\211\350>3\370\032>x\303\263\276^\233\244\276\274\\\016\276\3236\001\2773\320<\276\036P\'?\264\364#>\256\3142?\017\242\212\276\346\215\026\277\013\244G\277\347FR?\2458\312=\334j\304>\221}\"\276\370\361E>F\220\026?\270\275+>\"\3167>s!R\275?=G>\275\336\357=\207(y>\312@4?L\222\241<s\250\265=\306\204\364?\2000\034?\233\303O=\2163\200?\371r\025\276\302w\021?a\033\375>\243s\261\274@\341\361\273\221\305\366\275\374\266\007?\372\220H?\003\371\303>\374\210{?\323\206\2739\020\246\211<;\0353?\221\317\235<D\344u>\330\t\034\276\272\266\025>\274\306\355\275+\263\177\276\014w\232<\031%\233=\3359\257>\026\372\240<\243O\333>\376\271\247\276\375\016\327>\325\"\365>\036\034\214\275\376\004\271\276i\322\215=\207C\355=\031\354\'?)o(\275\3730 ?\376L\021?\352\363L\276\337aZ?\360\372\214\276u\365\244\2749\257\r\276\327\272\023\275_\030\214>X\2255?\274E\301\276)\354S\275\227\022Y>\nx\313\276\372\201i>\030\333.\275\003\360\n?\331z\364\275\367\025,?\023\0268\277*V\211\275\200P\211\276\000s\274>\306 J\276\031mH\276\235\033_\276\206x1?\010\363\337=\340\217\354=:\320\342\273H\342\273=\27037?\036\034\211\2769\251\">\271+/=\303\302\002?-\034.\276{\331\360>N\034\323=\243\341\266>\017\274\272\275\363\255\267>8\256\226\275\251\n8\276\'Z\325=\304\205\276>\201\206\262>\273\316b=\037\024\020\277\237\373a>o\360\265>J\272!\275\323\350\277=\325\273\n\277\3718\350>\345(\257>\332e\223\276s\013\260>z\315)?\203,2?&\026H\276|\2513?\013>\310>\207\325\356>~M\341\276:U\263>N2\354>\252\254\307>Naf=\374p\320\274&\332U\275jY\357>!\340\263\276\300R\007\276\211\275\210\276G\367\252\275\326\301\344>\315\203\221>\354\237\014\276\222G\206\275t\264\272>\3636q\276\336W\n\276\350^\224\276-\241\235>K:\252>\253\013\214<<\241\261\276\256\215\263\276ETX\276\300>\321=\215\n\323<\32617<\247\202\234>\231>\221=\240\004\316>{\366\225?\224\023~>\227\304\341\275\376\022\371\275%\323\033>\202\252,?>\267\352>\351[\371>\032\354\022?@\037@\276\037\344\225\274\225\315\311>\244&\323>\346>\313>2U\262\276\330\223\213>X\027\343=\0213\370>\334q\311\275\303\"m\275\t\362\252=j,\360=\'\352\226;\036I??\322\024\212>\014\274\245?A\365X\275|[+?\t\216\006\276\257w\307=\277=\225>\3202\356\274r\310|>\206+\014>\256?\266=\221\272\377>\265\025\223\276 .\010>\2321\\>\026\'\033\276\270,x=.\346.>`\033Y\276j0\215\276\355\327\347\275\003\005\014?w\240W\2763\232\265\276z\003O>\206\317\217>\333\226\353>\006\356\000?<\230.>\335\007\300=\334*\273>\034\n\264\275\201F\302>m\n\210;2G\221\276\2201\257=3=\322\276\262\006\215\273Ra6\276pF\273\276e\027\317<\321\305H=\273<\235\2763\226\262<\337\271\277>\205q\000?\253, \276\231\244Q>\200\370\327=2GZ>\'\316b>\302\314\n\276\226\002\235?\211\000\014>\302S\303\275_f\251=#\371\371\276\230\357\236\276\232l\232>WQ<\277!\2210>\333z\265>|\246\"\2760\2221\276\304+\267>\222\301\340=\273\274\035\277SM\303\276\2144W\277\275x\\\277\204\326U\275\270rp\276P\333i\275+\005\353\276\017w?\276#S\237\277\033F.<\364\375\242>d2\227>6\257\333>p\366\327<\354\247\236\275\322\032\253>\305\310\364>\3713\334<\270\353\000>Sl\320\276\234\326\225;\221$\266>\014\367\003\276\261\231\353\276\301]\312\276=\370L?\301l0>\362\347\276>:E#\275\362\337Q>\013\326+\275\305\344\355>\202\356\333\277\305\341\'\277X\256\225>\243\021\007?9\205\037\277\275\236#=\232\303\023?!K\003\276\332\264\231\275\002\236\243\275p\363P=\030\313\255?9\347\214>\005\327!?[[$\276\217\325\233\276\264\347\222\276\022\002\213<\321l|>\202\2676\276\rtG\276\210\336\032\276\017x\034\276\345\260\007=_\334a>\367\277W=M\356]?\001UT>T\303\363>\336\306h\275\366\177\205>\354N\265\275$\342Q;92j?\365,\331>\004W\215>\006\261\253>\004\247y\276\376|\377\274#\246\302\275\"\346\211>\332\232\237>$\235y\275l\025\035>\354\254\306\276P\336\177>\251\314\232>=\'\273>\260\372\037?\230\243+\27677\356\273\030\215C\275\320\204\343>o\265&\274\211d:>m\315\022?\224\244D>d\027p\276,\352\217=\275\310\341\275\307\272\316<n\326\241>~5\254\273a\273\217\275\251\205\276=/$@?\000*y\276\3178{=4\256j\274\031\030\202\275\014)\000\276\035E\224\274\371\362f?)\017A\275\206I.?\306Mv>3\000\"\276p\031\266>\312\262\030?)6\022>\240S\362\276\323\217+\276\3666-\276\035\210\022>\016Wm\276\355g)<R\251)?\0279.?P*\215\275n\375Z>\256\302\207\2769\230\310=V\377:>j\335\274>\345\313\320>\335\013\233>\265^\340=eR\227>\306\213\373>\177\020\225\276\212\033\017\276\336\262\330=\235\032\"?L\014\337>P\311\272?\217\032.>\362\221Z?\016\342\000\276\253|\254>\350\266\211=\261\024J\275\351\336\233\275\334F\200\277\022\320&\276u*o\276M\364A?\223\245\337>TY\227>\2544\266>\226\331\310\276\177q\237>0\316\000\2775\215\214\276\350&\236\276{.\034>\316I\271=&\344\031\276\343)\004?\235\277\303>\037?\307\276>Pt\277\373\315#?))L>\354\357\005>\250\357#>\014\331\226\275-\260&>\222\362Q\276\263\200\345>d\354\033?\002i\242>\246l\030?7p\033<\225j\022>\301\256\305>\217\026~\276k\277\350\275\336)\222\276\177\214\371>\001\341\274=J\203\205\276\331\233o=\245\001\002?\'\231.?\375O\334\275\024\000\325\276^\213?\277}3^\277\270B\010\276\345\211B>T\024\205<\206\217\234>#\226\373\276\277\375\272\276J\034\326\276-h\244>G\235j>\251\276Q\276\026@c\276g7#=\350\377->W\221E>Q&!?\243\365_\276\261\367\313>\270DS\276\257\302\310=!\236\256;\352\003\210\276\233L\006\276h\343\305\275\21206\276\237\007 ?\246\227\022?\257R\321>\327L\207>(\033\332\275\261\375\232>\013\\\014\276\301.h=\356\251\n>%\"a>_\312\256>J\353\032\277\030\'\343\276HF\317>\3170\250=\345`\205\276V\252.\276\303\027\337=\344e\306>\354\n2\277\272o\016\276\267\025*=\344c\265>\031\307\230\2760\205\230=/\2218>Qz\365\276\342\205\021>$d\257=_\376A\276\201,\320\276_\322A=\273\333\313>\300\204\271>X\271\237>\276\003\301>\030mo\275\310|\013?\224\264\022\276\016H6>I\226\367\275\004\317\206\276\355z\006\277y\334\345>\242\010N?\200aG>F^R\276\212\013\234\276j\274T\276\312t\024>\366\237}?U\004\214=\364\026\250?\207O\276\275\020s\310>\222U_\274\266\0227>m\265\r\277\335\365e>\362\351\363=k<[\276=+\275\275\337\270\201>J\220\316>e\333\216\276\361)\356<r\270(\277\353g\027?gY(?\324\210\236>\331\352\253<N\273\003>\240\"\353\276\272\021\027?\002 w\277\267\273*>\213\233\265\275\264[\031?\252YG?\244_)\276\213\251;\277\024G>\276\275\323~>0\370\333=\017\334j=4\246I?\376Oy>T\250\007?\032\030M\276"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "3\254\331<\323,\007>lE\206?\265\244\037\277{A\t@<r\035\277\370\353\250>wh\001\276\025\330\332=EjB\277\342\252\035?)\017\245\277y\253\232\277X\333\214\277:\204\242\277r\3050?\247\210?\277G/\351\277+\354\205>2\030\200=\323\304\333\276\224\265\033@2\n\250\275\342CM\275\342\277@\275\3617o?]\245\221\275\273\215\014?\316v\353>_~->\014\024\255>\275/\020\277q\227\253?\317 \343\276/\002\016>\254$\351>!k\346>cm\370>.\nh?A\356\203\277\315.\205?\252\233\275\276 V\305\274\375\247_?h\202\277?`s\200<\"\370\324>nA\016\275,\000+?\226,\264>\361\311]>\353\3454=\242\006\256\276\'\235h?,xq?\010\274#>\220\2046\276\343=\245\275\252]\350\276\033\357\343=^\203\014\277f\245\023\275\313\013\315\275\260\230\236>s\021\215=0p\312>\t\262\237\277\257\3740?(\367E>*\330\022?E\026\031?\264\210\320\276\366-\356>\201\355\346>M\313*>r2\026@8\274B?\353\314\263\277\000\034.?\r\316\337\276\344\321\220?\n\013\024\277S\325\322\276C{<\277$\365\244\275\007\016\323>V!4?\006\300\203\277\005d\205>#c\350\277\227\305\330>\356H >c\265\362\276/\"w?\377\031\227=0Z\374\277Y\3059>=V\034?\367\241\326=i\243\003\277a={?q\371\021\275H\373\307\276\244\263%?\214\356\277?\200\214(@Y1\232\276\033\0005\277M\346\226?\261\330><K\321\251\276\267\361\021@\313a/\300/\357\333?9,\346>_y\203\277\001&\332>_4\024\300i\366\245?I\351\317?l\373z\274\373\234\236=\354\266\021\274\255\000\275>dif?\013\200\250>\301\247}?So\247\274"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\264\177\035\275\001\216\225\276\r\272D>\000AA\276\317$\006>g\371\246\275Y\210\361\275\371\016\212\276k\313\213?`\250\306>d\014\003\277\221\010\263<\216ol?\335\212\203<\177\233r?\000AO\272J=P>\330\310\210>\352\305\201>\321\0046\276z]\311=\206\021\355\276\243\3468>\310\006V?Wup\276h\2338>\005\315X\275\360\343 \276 \370G>\023r7=\236G\277<_g\241>\336\001<>]\206\377>&\014\342\274\355\3544>\360\001\220\275M\336\230\275\204\255\210\276\347tE>\177\202\225=\344R\007?\017\266\205>/\217\220>\334z\006?\343\216\006\277>P\342\275o\242\330\276\334K\320\273pw\321>o2\225\2760\032p?\034\003\242\276E\354\241>\370\002\335=_\357\364=+\035\257>x|@>\312\360%?j\274\034?\2631+\277 \004%?\215\216~>\000\320\223\276j^\260<r\224\317\275/r@>\003\206\250>\212#\317\275\363y\252\276]\361\351=o\241\032>\0136\230\274\036x\233>\260\341\314;a\240\341>\231q\361;\214\302\006\276n6{>\274\033m=_\370r\276\363\200\233>\026\206!>>D\246\275M(\000>|9b\276\203\234\354>j\367\031>]\255V><\361s?\344\177\220>\266H\310\276\353\222\326\276s+\251:V\327\001=<\364\016>\264!\344>\013E\213>Hn\275\276\375g2\276\2466C\276\021+,?\356\017\037?\'\265\231?\223\216e>\213%\223\277\352\007r>\366\311\207?\265\314\262>\273J\255=\n\032\334=\361\201\347\275\345J\003?\000\324\214>\245\225\\>\202y\316>qJ$<[s\342> )\256>\254\310+\277\313?\322\276\345\254\033>Q~\010?\326?!\276,\301\223=\361X$?I\361I\277? \211\275\004\007\303>\026K\366\274\215X8\276f\375\201\276|c\206\276S\350\001?k\017q>b\210\312>\261\024C\275\022\240\026?\254\252\032>\244\225O\276\307\251\255>j)\036>\365\004\340<\312rn\277,\244\373=\264;\331>\373Z\251>\254\276\214>:\030\302\276\206S\253\275k\177Y=\032\243\345=\252\375\312\275\377\300a?\220\253\241\276X\003@>\241\027\203>+\210\276>\244\324\013?7\313\253>\272\304\315\276\014\237\305\276\226\016\215\276e\224\251\275\031\2771>OP\360=\'\342\377=\014\373&?\265\260\224>\214\301;\277\233\300\216\276\266\262\263>\016\234\340\276\032\300\226?\014F\317>\246\r\214\275\215\254\337>(\322\252\277F\030\316\276s\302\357\276\236\353g\277!\340}>Z\255\276>\342\036\217>n\231\225\2764c<\2773\250\331=\202V\254>\237\275r>\362\350\023?\013[\224>\370J\221>9\315\257\276*\"\034>c\207\240\2753\365t>\347\234\022\276&L\t\275\003\244\007\277\353ZJ\276\315\341\341\275|\270i>\240B\302>lc\214>\343M(?\033u\270\275\312m\351>\357!o\2761{\255\276<\372\017?k\253\375>I\263g>\312k\360>\373b\274\275\rT\304\275b\343\360>\355\370s\276\002\n\237;\204\0011?\263\317S>\253\253M=\254\363\363\276Pr!\276g\357(>\361)y?\224\213v>\235>Y\275\270V\214\276\376\201\206?\300\351\033?:\270\t\276\341\254\221>\002 d\276\217d\r\275\034\260\322> N\201\275\221\331\205=\330A\311\276]E\257>\336\003\023?\221\242\334=\320S\021>\265E-?\271k\373>\246@Y\276\336\357\205>u\2419<\207\262\376\276x\032\267\2764>\257=|\327a?\375\rJ\277\022K\372\275h\021\023\276\000\025\223=I\013\246>0\311\207>\202Z\241?L\035\026\2770\t;?C\204:>\373\2028?T\027f>\037TU>\323jm\275\260\265\221<\350\005\352=\221r\327\276\242\000\000>U\016\236>^\352x<>\232\010>^e\302\274gzT\277\254[\230>#\371\203?\221\237M\277\226\335\353>\357\034\263>\n\241p\277{[\320\273]\364\365>H\207\353=\022\021m\277`7\227<\236\221`?\321\232G\276\374\244\235\275y\237\023?i\036\371\272\337\025\226\275\020\235\320?\313\3520\276\007\275\343>\245\255v?\024J\305=>\331\236>\310\022\r?!G\207\274f\216\371>\356\243\216=\334\353&?\301\000\254\276\3121\004<\323\030\363\276\242\345o\277\275<W\276\373\270\354>\004mm>\365\212\357\274\351o\033\277a\306\334>\241E\250\2761\031\327>\307\322\234?8\007\003?\231\231\004?\252l<\277\177F\031\275\242\n\020\276\240\203\264>\tv\202>\031C]\276\357\0243>h\016\306>\016o.?\257\013\226\276\213\\\306\274\203\350:>O\000J\276\376\223#\276x+\036\276\331z3<\361\337\337>a\023\010\276\300\261\371\276]yJ>\204\004\375>b \206\276\021`E>\'dr>N\271f>\375\377\224\276\244\301->\036\242F\276\222\227\032>\247y4\277\036uG?*;\367=\005uN=\324\215\233\275K\244\273>\364\\\022\2750ET=+$\374>\376\346\346>\226\236_?\216Xl:_\261\315\273\345+\270\276\347\223\216>:\332\266>M\377\017>\216\264B>T\243B>\202#\005\274\372v\312\276*\374:=\322\307\024?\204\301\261\276\374\342\246\276FB\244>\023\202\272>\325\346\313>\007\300%\276\366\376\376\276\377\227\230=X\364\003\276Q\207\304\276{\017r=w\351O=z\306\021?\363\215\n>\363\232\010?0i\244\276\271\215B\276\006f\360\275^^\247>\016\225\">\035%\241\276\3073R\276\031NE\277\034Y\002\277\316\017\221>\225\310\352\276z\234\215\276o\210\010?_\306v\276\305\325\025\277\375\0173\277o\216\342\275C\244\210\274\004\032\344>\231\335V>G62\277\330\360_>\335\262\027\275\353\273\211\275\207?J?\261\271\004?!\234\264\274\007+_>R\244\"?\036\251\333\276s\342!=*\300\340\276D\030N=4\360\002=\333\021\007?F\3326>I\361\214>\1771\246\276\262\2057\277-\357\202=\357J+?B\0074\276\204+\256>\001\023\326>\217\037K\274\314\375\r\277\301\305\266>;0\256<\360\327\305=CE)\276\200\\\n\276\313\013\034?=\234\310>;\236U\276\244<\267>\241\261m=\271\203\307\275Y\002\365\276X\334p\276\0166\034>\n\360\227>p\353o\275b\230\320>\306O)>\254_L>B\306\260>w\334\027>\275D\325>\200\357\266=\005\n\226=\244\262\222\276y\2107\276\0349W>\211?\217\275.tB\276\312\310\270=\341\260\001\276%\206\261\275\235\247\226=\207\263F>\014N\210<\364\037\217\275\332l\204=\2548\235=l\'\247>\001\242\351=\332\030\010>z)_\276\003\315v=@\0358=\246\340\"?\247(,?\227i\210\276v;\032\276nU\241\276:\020\352\275\234\221_?\223V\314\276\225\246\014\273&\036\236>\344Y\270\275\353\245\356;\000\\\333\275\376~\262=]i\004>\240\317\255>AZ\035>r\026;\276qY\253\275q72?\200%\276\276 d>=!\027\210\276\372\207\211>\314\312\356\275\305\206$\276\232/\033\274\261x\304\275\234\275\031>\247\311\232\275H\366F?\253\235f=\005\343\210>\256\340\203>\310M\220\2766:\302>#\031\352\276\304\242\317>w]\031>\220x\003?Z\261\266>\005r\020\277\002\336\252>k\301\237\276\001\327\205>\034\336\330>Q2K<V\333\035?\001\236\014>\254O\266=\n0Q\276\245\000\210>\370\354\241>P\205i=_\006f\276\324+R\276\341\316!\276\347\337\037\276\235\256\334=\206\213\027\276y\304\344\275\227\n\321>\231\275f?oD\217=\223n\375=\313U4\276\177\247\212=\207W\211\276\367+2>}\t\216\276T\257\257>\244_\373\2762,\330\275\311\\\366\274}\332\010\275\376\335c>\035\371k>\222\021\333\276f\024\031>>s\270<\343V,\277\246\336\020\277\r\236\243\275\205\271\031\276\234\236/?\211\\\300\276V\370\234?<\250\331\276\263MY>P\313\036\276\036\305\366\276\2056j\275\031r\314>\016\3238\277 \275]\276  \226\275j\303\203\276\234P\036\277\213T\205>y\356\243\276\240h\033=\2164@="
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\372\0351=eEd>\343\274\010?\321\327\306=\212\005\337=\234\020\220>P\016\226>D\034\261\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\330\251C\275\301\215\234\276\371a{\277c3\305>y\243\r?3\037A\275\271\'y>\335\t\007?\3019 ?g,\217\276\2376K\276;\342\311\276\013\303y\277h8\360\276\033c#>\315\203R?\022\325.\276\220\216\205\276,\010\332>@\216\275\276\264:+\275\207\341\215>\326k%>lt\337>!\017\310\276\006\331\032\276\214\303[\276\356[\322<\203\373\371\276|\224\014?\032\241\266>5f\360>\2025\036=\321\260\205\277\370\242\371\275O\315\255\276\322d\026\277\342v(\274e\242J\276\374\332\301>\366\004\222\275\365\243\370\276E\244\251>\201m\263\276\351Z\010?8\354\224\276o\237\006\277T\224\274\275\363\303\240\276\224]q\276b\307<\276=\020\204==V\022?\000@\"\275\243+\226\276EL9?\253`\267\276S1\363\276\246\262f\276_\2060=Y\223\t>\3150\305>\354\335\243\276]!~\274~j\334\275\252G\013\2769_\'>/\037\257>\377\372\205\276J\302\211=\3161\001\277\312\215\t\277"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.11071594059467316
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
