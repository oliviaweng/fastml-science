node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\334\332\300>S\374\240?\326\\{>\304p\336\277\215l5\277\243\223\262>\232[\256>\2674\025\277#Y`?\266\303g=\2347\033\277\212~\230>\217\346C?\001m\204>\220\254&\276\302\022\025?\350a\316?3\245\325\276\214rg?\271A/?\016\036!\2769\031X\276\263\213q>\352\212\016?E\305\252\276\357\253\334\277]FL>\350\005p?\000|-\277\022l\021\276b#\322>\000\002\224\275w#\272\276\204\265*?\210G\2619\376\021\277\276\n\004\031=\370os>\013\033\300>7S3?n\223\217=\250\3750?\214\312A\276\234\r\345>\"\250\000?\"`%\276\305\010f>l\027\017?\006\355\000>\205R\201=\266\304\027?\363\214\314>\013/L\275\312\266\253>\340W0\274\347\t\022>x9Z>r\271\300\276\374\375\260\276\367\004/=\016\246\201?\027\373\014\277#\306\233\276`\002\240\276(\220\253=X\303W?\324\235\245\275\2003\223\276\306Q\022?\014{\034?\266\300\221>\272\026\310=D\244\216>\2119\332>\216\255S?\372\017\002?WB\214\2761\032\031\276\270\360M\277LT\021?\r\255\006\276\375]\250\275\255pI?t\375\211\276\325l\002\277o\263n\2761\035\t>\371*\262<\251\354\037\277\311\372,>\365\201\265\276\251N\241?)\371e?N\254-\276p\265\233\276?\352\303=aO\254\275\216mO\277^P\007=\370E\312\274\002\003\315\273q^\334=9\370\217>\234\221<>f\247\312\276\373\2523>\200\177$\277\003\227\t\276\024\261\226\276\003\200\211\276\031\237*\277\311\373.?\275_\302\275\322\233\022>^\203~>\372\232\275=Zp\255\277\207\274\242=\304\242\231\275\337\335[\276@\031\372=\264\333\010\276\200.\031\275\000X\2078v\246\267\275\231\233\342\275T\313F>dJ^\275\'\020\371\276{}D\277\222\366!\276=\203\300=\361\232\372>\243\303\002\300\337\034\026>x\016+\277{6C\276\004\270d\277\336\205\332>\377\307\302>\241O\272\275iT\376\275\343\025\013=e\027\002\276\344\324\005?x0q\276\244\254\261\275\214\201\226=\t\'\215\276\224\367\362>h\221\240>\261\251n?\303\352j\276\025\323\031>\363\361\205?Up|\277 \272\"?\310\316U:\2609S?o\023N\276\224\304\034\277x\365\211\276\236>\377\276Sh\275\276h4@\277\030\252F\277\277\321\360>a\016\024\276\000:V\276\"-\227>\032\234\025\275\264\302\270>\2409 >\322\347\374\275\036[\234>\227\007\213?=\333\'>\252\0316>\343G\304>\266\347\261\276\375\022S>\013\007\230>\037[M>H\002\217?\353\342\255>\271R.\275\036\371\251\276\221\014G\277r\177\302\274Ex@\276\032\347l=?}4?\306|S\276\301e\232=\305E\026>\242\200\341\275\010<\206>\214q\022<>\334\034\277\265\277q=\265\222 :\014\373R>\331\311\021\277,\3619>\346\226\025\2768NL<\335\205\331>R\342\247\277\265v$\277\325l\340?\226\370E?*\333\007\276jc\215>\241\301\256>\347\236>=!\237R\277[\271\360\276\321\222B\277\332\253\313>\333\356\240?\252\376\036?\225\371\275\275\371\225\323<\203\326\371\276C\023\346>JP\214>\005\325E?\345\3500\276\234^N\276\323\370-\277bZ\361\276\245\207\203\276\242\247t?\3778\225\276\367\177\000?\201\007/?\026\300\301>a\025\266>I\331\275>+w\020>\037\304\024>O\206\235\276\306\232\345;\230Jr\277|s\017@]\325\302\2759\006)\276\311\003\002>8\340D>d\217$=\235\310\n\276\240\2272>MuK\276\374OC>\\\272\003>\202\235@\276\023\355@\276\244\036\023?\212&\300=]\002_?\177\016B<\037g\236?\266/\'\276g\273\223=`@\032?\367H\232\275\030\311\350\275)\265\376=\246J\247\276\303\023\343=\246\006\324>\240I3=\332\353/\300}n\234=<\377\r>\010\276\261>`\342Q>\365\204 \276\205b\242\276\273u\342>t\340\372\275\334\3326<\370\244G\276\264m\n?]\227\002\277\010\212.\277dF<\276\005;#>\350\360\335>q\212\025\277I,\265\273#\316\321\276!\220\005\276\023\242\205>\262\021\250\275\233+\216\276\244\265e\276\347L\341\276\354\303\203\276\365\351x>\006\362\242>\204\247\227\274\261\371\254=\255$\242\276\200s\213\276i\031\326<\333#\032?-Zu>\374\304\266\276\2627\326\274\307\334\206>[\217<\276\275\272\261\277\201x\000\277\230\342\262\276\261$Q>Q\0343?\005\314\330\276.&\211\276\\\303\214?\2107\\\276\326T\204\275\242\200U>\340M\302=sz\376\276k\025\307>\377J\034?\030\362F\275D\313\274>\234\n\031\276TG\237\276\257\037\221>3\352\021\277\320*\021\276O\277\303\275\320\351Y?o_k>\352A\017\277\246\027\357=\003\206y\277g\260\342\277\260\033\032?\006\014\305=0\311a\274\234\036\313>\016\256u\277\002C\214=x\"\245\276T\3543\276\206\332#\277\030\343\003\277S\325\246\275l5A>\005\212\354>\270\266\256?|3\246\275-\207\220\276\201\361\010\277j\034l>n\333/?\270\336E\277J\304\322\275\230\263\207\275\376\226\351\273\255|<\277\370:\301\275\304iE?V\223\255\277\016\257\005\276_G\233=\340\322\211?>}i?s\341\274?\242\031\206\275R\262^=U(\353\274 \252\024=\315\025A\276h\354?>b\213+\276\3203\347\275\312\345\017\276\327\2256\276\035\006\361\275\r\300[\276\277\260\255>UnA?\\\247\276\274\275\223\345>]\345\227\277\003\241\241?NX-?\347\303G\277l\261\260>\031\321\244\275\326+\037\277I5%=P\323\374>\361D\200\275\016l_\276\213;=?\"Y\272>r\001\013>c\272\205=\337\333\034\277#9)>d\255\215\273\320s\204?\000<m\276\202Cr\277\206\244\337?_\307\026\300\355\361\000\277\355\035c\276\263\364\304\275\323Jn\275\201Z\344>CQ\374\276cS\035\275^:\314\276\n\316\236\275\201\336\333\276Jz0>\3311\355\276L\332Q\276\373#z>q\'t>\352\210y>&\240\030?V\030<\276b\252\\\276\276\357\034?\263\302\341>\214]\330\275\210\211\354>\245\032\225>\213,\345>\243U\t>\005\3547>\215iQ\276\031\222\247?@-\330\276`\347\217\276s]\004?\220u\022?\261i$\276\361\214\314>\265\323~?S\202v=\366Q\245\275L\247\026\276\363\212\362\2760\350\035\277\234#\311\276P#\204\276\232h\273=>\356\010\277t\223 9\274\314\344>\035\231\271\272\nn\256>\327jt\273\376G~\276D\374x\276&\330\305\275\250\330H\300\177\035\231>l}Y?\345t\215>\001\245\024\275J\200@\276L`\263\276B\254\036\277L\341\364\276\257\027\317?\207\263\260\276=M\255>\353\273,>*\027$\276\003[\227<\275)\004\276B\260\253>\324\377\225>X,D\276\234)\346\276e\303\322=:B\017>\222\344l>%[\207\277\327\314\317\275\0140\331\275\327\231\256\276\244\230\233=\260\203\350\277\252\347\215<r\375Z?\206\341\244\274t\2601>5\002\203?\300p\345>\254z\004@\013\274\017\276\005\333\233\275\330\317/\276\270O\231\275@\2665>\266\355\023\276\016\212\025>D<\320=x\335\274<P\274_=\234\220\227=\331&\006\275\0103\035=9:$>\261\214\213\277\275\215C\274}\256f\277\347d\324\276y\270\263>#i\213?\362z\024>\020u5\276\217\346\002\277g\377\010>G\006g=QK\334\276bA\214>\277\224\225?\335\037\022\276\"\010a\277\3525&\277\374\022\t?J\250:>\211\370B=Pl\250\277\023e,=1\347\n\277N\211\014\277\037\220\303>w\356\212?\233\021\033\276\230\352\000\275W\250\006\276\001+l\275\333Hv=\327\035\221\276Dt\230\276\031\311\261=\340\250\322\276\021\026\216\277\033\305\345=`\013\021\2758\315\002\277\221\352E>\247j\226=\203\346\307\276H\276*\276*\032\352\276b\345i\276\004\302\026>\376\231\026\276\206\340u\275\332,\371\275Cf\r\277\005\222t\276\037\271(?Bp\232>\242\237t\276\322\352a\276-\325\350>\321!\245\276\224\033@<\336\017\247>\355B\310=\3725\211\276\313ZJ\275#\304Z>\000\270T?\177\020\034?\342\001\257\275K:;>\272\223\275>\211em=\344q\366\276g\377L\274\366a??AR\273\276\356On\277\r\217\362\274<\032U\276\200\214^\274y\2571\277\227\320n\276\374\313n\277\240U\030\300\241 \300\277\014\265\222?\334*\372=E\335\324=\330M\017\277\236\357\230?X\212$\276\033\342L\277\303\271\'\277[\276\">6\006\257>u\001\205\274a5(>\360\243\000@\322T\371>]\365\006\274T\342\355\274\262]\237>\366\257F?Q\276D=}_\037\277*\013\317\275K\270\234>\201g\000\277V6\271=\324\274\376>\004\344\213?\273\240\263\277\352\210\204\275\237\321\217?\020\203\343?C\203\375?\231\330\177?\226\375g=\006\314\222\273\274:u=L\307\234=P\201L=\210\360\016\276\310\356\350=t\274E>\000?\037>\0002\014:\261E\023\276\003c\t\276\265\273\r?\220\032#?\302\336G\300I\257\243>\241i\277\277\266b \277\350@\305>k\220\266\276\026\304\006?\006Y\207?v\032_\275\373^\032=\010\304\321\276\377\2306?\033W\034\277\346\301.\275\254\224g?\241\222\222?Tp\250>z4\321>_\034U?\241\336)?\326h\214?2%-\276A\213\001?\032;/?z\020\017\276\217\313m?\322\307\327>\334\017Q>n\0364\276\317\352\227\276Y\202\275\274m\014\347=\004hD>\204}\036>\001\234K\276\253F\n?\263\024\236\274E\004\374:\031n\240>\345 \211?\336J-?\356A\336\275\262\001\033\273\317&w><\265H\277\037\326\224?W)\031?K\006\366\275):\006\2774\234\351>\372\276\365=\337q\255=\234\006\001?f.\000?\340P\214=\207\231\224\275z\321\316>\303\324\233<\367\370Z\276 \253\177> ?h>\364\352G\276q\"\234\274L\226\326=\225d\333\276\227p#>:D\035\277\010\305\030>46m\276>eQ\277!\215>\276\320;\034\275\352@V?\254\321\232>\377=\266<\206{\231\276\211\200\351=\255,{>*\215\030\300\3068\006>\217-\276>\211\022\331\276z>\271>\237}e\2766\224\202=\351#O>\343\342\341>e\254j?\374\301\003\274\2422^?\263H\010>\224\003\014>\027\316\200\276\223c\271>~\261\363=\026n?\276\021\023\316\275\033\357\334\274\214\r\r>\374j\227=:+\324\276(P)\276\342\277\374\276\035\177\312<sN\324>\257\032\010?^\364\037\300`%\271\276\373\r\023\277\305\272\237\275H\"\244\277\347\251&\277\311\024\t>\016t\266\277\374\026\013\276y\325\243\275#\303\236\2768\337e=\364J!=\337\270@\276[\311\304\275X\010\332=s\333\261\275\246\211\013\276\371X\322\275\314\205\003\276y\337p\275\356\215\326>\304L\213>2gD\276\004-.\300w\364\021>\276UK?$\317\355\274#v\363\275\"c\201?\341\365\245\276V\010\333\276\006\031\367\275\027!\256\276G3\332=\353\017\236>\321\226]\277\006p\230>\220\256!?\354\312\204>\325\344\273>\014\017\215>\262\217z?\332!\273\275\364\000e\276d%\250>\203,$\300\377\2673\277\30688>A\025P?\343\200\347\275\177\2461>X\371\326\276\'\270&>#b4=I\273`?N|\302>\312\210}\277+\222\272\275\010\010\245=pT\310>B+J>P\302\326>\354J\361=\225\267\224=W\205\277<(?=\276\215\'I\275\223\010\207?G\265Q\277PO\354\276g\357*>\3458S\276G\032D\277\257\226 ?-\214\342\276\247\275\267>\'\032\251>\266\253\350=Xf(\276\217\010\r=\305|\240\275UMc>\362\363\322\275R\335.?\303\273\336>\300\001\314>\201QE\276hN\270\276{\227\256>\333\211\013\276\023\327\005>MA9?.\264\023?\"q\243\276&WH=\347\273\004\276\007}[>a<\333>Y\004\271??\273\356?@\374\342\276r\240/?\026~;?-\347j>Ih\265<\t\030\034\276rZ}\2762q\346\276\236\214\234\274\302$\036@\334\357\373\277\262\256\264=\n\355\246\275\201V\310=\266\234\357\275\320\030F?\244\331Y?[\317\364<\357K\\\275a\261<?A\347\214?\322\211\032\277\226\317\267\276^\365I\276\264\256o?\321\364V\277\324?o?o\0372=\243\006\270>\214M.>JH\r>\t\345=\277G\335\247?\311,\233?V6$@\250\331(=c\300\014\276\234D\266\275r1\002>\254\202\330=|\025\266\275\265 \245\275\003\330\345\275\n?\'\276\334\025\301=\264`\000>\217\231\007?\000p\230=c\206\242>\335\016z?\351*\360>\010w\317?\014\245Q>\257\331\241\276i\221\334\277\n\200\273=\177\333E>\324\257\024?V\357\226\275\225l\"\276qbN;l\205\221\276\034FP?\367\301\231>\374\347\346=N]\332>\n\227\320\276\271\256U>\004\221\256\276E\335\003?\323$_=Y\342\212?]\247z<\354\023\005\277V\254\r?\335\262\277>\026\234\201\276\202 ,\274\213\037\177\276\213\306\300\276{\334B\275\217~\300>6m!?\276@\021\276\nl:>\320F\224>\3746\264\275\266\272B>\223\030\002>\001\033F\277\251\001\004\276\'\362\264\275\303\331m=\2662\213>\032\350\203>\024\023\243>\002\204\313\276\004\212)<\231\014f>\035f\r\274\205\372T>i)\372=\260\202\000?-;M\276\275\177\036=\313t\266>\243:D\277\222o\317>O\321G>\251\367\271\276.\255\317\275I\277y\275\024\244\r>+:\370>};2?\250\373\020?\311\203\247>\260\r}<`\315&\277\246\331\311>\201\377\252\276\2259\323\274\234G\206\277\367\215\314=\354\314\037=\006\344}\276\372\034\360>\036$\242?\357\265\224\274\305O*\300\216z\266\277\276.\317>\235\223y\276\331\222\007\276\341\3001\276\204\364\230>\\6\005\276\252\262[\277S%\306\277\213-&\276\316\301#\277\021\024\270\274\342\367^\276\352\366\014\277?-f>u\r\235=HLU\277\221\212s>\264h\017?\334\230a?\036!\361\276\276Q\251=J\023\204\277\005\203\370\2760\276?\277\323\357\200\277s\307\272\275\036s\016\277U\217\346\274J& ?/\002\236<\253\227\254\275\230tP\300\367-\014\276\222\203]\275W]\031>\206=8>\2103\347\274@\202\331;\230\036\357\274T*\r>\344O\026\276\346*\032>\230\377\363=\3168\317\276\224$J?\241\322h\277f\377y>\372*\333>\337\325\201\277(\326\306\276G\000\010>\024C\360=\320A\005\277\314\020\r\276t\0340\276\300\230W\277\374\255\312\276\307\tt\275\004\026\033?>\326\233>q|\347=B=\026>\370\242\207\276\246\225\371=\307$\311=\312i\376\274\375Y\304\276\225\223\003\276M\2018\275\363j\307\2767\3539\276\344?\351>\216\362\251>\220s#>\316T*>S\377v?\017\371Z>\301\352\366>\236\022\226>\035\252\353=\324\004y?\243\022\200?\202\330\215\275$\323\251\275\324\324\367\273\210\225q\276x4\034\276(\324\314>\255\001U\276\220\353!>Qm\362>F\271\025\277K\347\212\276\222\000\013?Z\255\215>T\237\013?\206,\023>\0058\234\276\301:\307\275\307-\025>a{\230\275\365YM\277\032\254\002\2775\356\243= \250o\274\\\357\367\273\"\035\234\276nj\032\275\261uv\277\362\213\034=\224B\235\275\317\3328\276\225H`\275\336V\335>\264+\023\276\326fT>|\026\363>\353\266*\275\305\230\326\275\200\027\000\276\362L\242\275-l\016>n\007Y?E\004\006\276\234\312\037?o\252g\276\270t\243\276x\202\234=\232\021\347\277\340\320\213<\301\022\256\275!K\211>#\035\000\277\322\2079\2775]\254?\347\312U\277\360[\340>\307\000\t\2770\300Q\275>\334\355\276\3318e>\037b\203>\274>\022\275\n\225\202=(2\017>\255\222\232=;\206s\276\241\202\326\277|P\014>\021\027\233\275\235\177\013\277I\245\023?\243\271\264\277\013ca\273\265L\217?\372]v\275M\332\377>\342\335\361\277\207\265\247>\031\322w\275\036VS\276/\356;\276\3563\272\275\3476>\276\226\227\300\275\022C2>\030Bc\275L_\246=.\212\237\275\350J?>,\207\214\275\n^\277>\2358}\276\024c\204\276q9\215>\305\266E>*_\016?\367\'\357>\215k\204>\217\327\016\277\213\317\373=\320o\277\276\372P\325\276\265u><w\005\217=\375\256\257\276\0309\360=\203Q\256>^\212\203\275\021\227l\277\017@\215\276\253T\202\276\034\202\002>\335\002T>\204H\221>HA\013\275\n<\035>\34679?\202H\225>\203\370\017\277\034\330E\273\277q\256>\231&\025\276\357\363_\275@.\306>i=Q<O\264\324>\2513\320>\325\204G?3a\023?W\230\302>(\253\276\275\312&\272=\2479\210\275##\373\276&U\255>!\0256=\341+*>\201\036\010?\314 \273\275\325w\215>\214\016\276\273\214\031\200<\316K\376\275\243\307\'<*_p;\320\263\241>y\345\246>\r\037\262?|kC?%=6\275\366o\"?\271\343\214>\240\366\365>\306\031\224>\032\310e9\320\342\375<\367M\326\275\037S\001\277\207\017\272>\233\030\345>\361\217\211?Y\177-></\267?M\177\036?\262\237I?i\033Y?\234Z\241\276\2562\t\276\20398>,\211\321?\342*\232==+x\300\230\224\236;\332\213?\277O\327I\277W\343^>\310XA\275$\023\265=\302\360\262>1\\x>\376.\264?@\256\272>\t\346Q?B\314\376>\001\301\237?\365\334%\276\217:\035\2756\266\014?kZ\367\276\330\003\246=!?\223>L\366\336\276\201/ \277N\013\231\2774\'B\277\240W\314\275B\300\307>\235\336\253>\231D\364>\354\312|?G\352^?\"j\245\276\033\315\016>\336L\022?#\254\222\277-\210\343?\327\277\241\300\215r3\276\276\242$\276\007\023\221\274\3046 \275}\242+\276H\254\027\276\234\303\342\275t\274\035=\016\365P>\244(\014\2754b\271\275\243\243\025\277\331\211\207=v\0330>\027h[\300\026A\r\276$\204\016\300\301\264\337<\256\205q?\273\200\246\276\000h\270\275\"g->\001\320\"\277*\006\035=\010g\226\275b\010\353<\263\307\226\276/\277\266\277\232\240\010?\005\211\354>\204\337\243>\363z\326<\260\t\354>`h\037\276\360lf\276\332\227\363=\317\265\216?\342\261^\276!\373\033<\016z->V;%>f\350\210\276Cp/\276\276\273\240\275\224)\261>\255\2366>\306:\304>\345;\303>/\3145\275A\323\367\275\262-\240=$1`\276\273\212\354=\005\357M>\311\371S\2769vH\275\211\206Z=\244I\324\275\273<\246\276B\276G\276\247\272\223>R\246\"\277\233N0\277\320\235\334>9\243\375\275\r\252\251>n\342\312=\035\360\277\277 \2055\275B\246:\276a\355\257\2771\204\222\277\213g\323\276\314\321\277\276S\024\242\274l\031H=\3658\200\276\2266\232\276\360_\000>?Z\235>\006\244\374>\347\375\037>\206\024\307\274q \324\276\006{\227\276\347\315\027?\211V\n?\274\0018>\211%j\2763\004W\276\361@\230=5\215\362\276\227A!\300\337\235[>\030\322l\275\346\032\371\275\374b\013>\232iT\276\220 \177\276w\260\021>\323w#?+\'.<&\031\236\276\353I;\277\332a\253\276\2214\213\2777\373\333=\027N8>\005\252\025>\366UW\277\2754n<\270\177\000>\324\360\333>\360\310\250>\337\332\375=:\3569\276\021\262\003>\313\341v\277\307\013\217\275\340\352\023\276\226B.@\001N{\277\224$!>@\315\275\275\335ve\277\374\301\336\277\233\023\342\275\354=\177\300\330\301\364\274\232\253\247\275]\313)\276\350\264\026\276\200\250\325=\234\326\256\275\260\307]\274hj\317<\0365/\276\367\257\274\275\016\330\t>\\\232:> \220&?\227Y\211?\2371\211\274\2067N\276\234_V?\226y0\276+~\222\277\346E\315>\370\355\201=#\235h\273\272\313K?C\323U?tZ\237\274\001\256!\276\374W\262\2761B\025>2\0347=x\321U\277\322\305\026\276\r\311\246>\307\254~>U\226\315>\003\362\253\275\317\027\345=\2360\346>Z\013\013\277\237\270\342\300q:\241\277\023\211C\276\321\375\302\276\217t\341=\260\341{\276\231K\222?a\231\215>T\026\027>1$-?\203T8\277s\274(\275\371\345\254>\r\227\261<G\351;>\203\245\334>*\357\256\274\351\0314\277\273o1\276m\307\270;O\277\300\276^\001\223\276\022\231\220\276.%\247=\236\232&>\226\323\357\276[\207\210=l\304\237>\333^\271\276\341\341=\277\304\370\302?\205H\t?Eij\276\257gN?P@\010\277$\334\262<=\374(=\360\235O\276\337\005\224>W\304\301\275~\341\276\276\014F\030?\367\250\020\277\200Eh>=\014\355\274\204\224\213\276\253\n!?\334\325;\275\377x\232\276\314\265J>\237\307\261=:\354\263>Q\207\230\276q\334\031\276\307*\227?r\266\030\277\\H\024?\352\001\236?\003\004x>\207\207\204=[f\332\275<\240\331>\251\t??\003\355\221\275\244\"\301?O\360h?\250]\372=\300\330\217?\347j\210\275A\003\314=Z\251\270\276 \n:\277\306-\231\275\014[\000?X\004\312\273#N\256\276\2519\001\277\324\025\252>)Yg\275 \020\272>\241\274\366\275\235s\335>a\302\000\300\035\255\327>\360D\227\275\025\027[\276G\346\031?\305\213\010\2762\247\310>\3234;?\365\355\236=\200a\025<\311\260A\276\340I\007>\274\352\245=\304\343+=|&\022\275`\027=\275f\3347>\330<T\275\270h\347\274\323\204\204?\244\304\033>\355\226\262>\344?\264?\025G\275>\217\030\206>SW\237\275\366\241v<FL\340>\204\177\014\276\254;;=\216E\211>\226\271Q\276\'\002\005>9\002d?\214\371_?\271\023\207\276/\333\230>x\310$\274E \355\275Q`\001?\241\364H>gi\200>9\215b\275\345\211g\276\326m\201\277i}l<\357+ >\2616\302\276x_\373>\317rC>+\330]\276c\331<>\017C\261>U\\W>\354\2359>9A\355>50\307=<\023\253>\313\252t\276x\266\"=h\005\227\276\377\335\256>\267\346\316>\355\036\202\276\337\311S\276K\373T>\342\224\250\277^ B?\301\rF\276\254\225l9\225\324t>\262\302\006?\314\324\274=\216\215\r\276\030\001\201\274\333\220\000\277\0146\373\272RQ:\274Aj\352>(\273\236\276\247_S>\332\236.?\260\232\340>\205\216o\275\247=\206\276\337\374\272\275+Ww>P\006\245>KV\036>9X\315>\265kZ\276\235\260\345>\334g\245\276D&\'>\304\"\203?\277\025\343>\311\335J\275B\364\303>\327VE\277\361s:?\277\007\023\300:;\004>R\221\227?}\212n\276_\252\317>\014\347S\276u\243 \275!\230\244=\340\251[\276\312\244\222\276q\321\310\275Q=\022?!\273\243>BY\000\276\253(\255<6\363\316>\336\314\244>\221 j=\316\306:\276\307\312\236<\235\214\346>L\275\354>\n\300\025\277\001-9?&\313 >\245i\247>Ttw>S\0308?U\353W?\246OZ\275\317ev\277=\243X\276`]y\277\0014$\276\371\005\031?\231\216\276\277\341\262\345\275\321\325\256=q\257\276\273\230V\026\275$\347\246\275\242\t\337\275\016\335\273\2756\344\001>\240\236\241\274D\033\010>\314\231\017\275\352yo?\221e\313?\320p\253?\316\245\006@C\366\312>!\023\241?\010\372^?\232\347\000\277\315\342\336\276\312\227\222>:\310\226\276w\252\267>\233F\203>\022\021g>[:\000\277z\376\360>\004\034\220\277\307\n*>Vd\343=xC9\275\370\273z\276\221:\361<\345|\342\275Zr\240>\373\010\324<\023\\d>U\212\341>^a\003>\366G\325\276\202\3005\276\224\241\237=D\354\365\275\305\200x>\255\332(?\264\276\331=!6\266\276\026X\324>\303\376\311\2769L\361>9a;>\223\203P\276h-\341>\341~\351>M\306\374=XP\210>\336Z2\276\023\344\206\275L\311k?\352\2506\276\215S{\276bj\231>\275\346\261>&\342\242>\273\251\026>4\231\243>\2257\361\273k\032\"\274\205;\255>E\274\022\276\275\003\024\277\313e\262>\233E[\276&\2762\276\370M\264\276\203 \2528\021z\252>\211tO?\312%\325>Y\334\372>~\210\235>di\320\274[6\025=\003\275a\277\3710U?\024\227\271?H\337\215\276\227\271\345=ru\231\275\240\207+\274>5\020\277\333\327v\277\267>\327\277\210\252;\276\004\231\365>9\366\225?=\371\332=\347\351^\276*R8\275\317\255=\276\335%\336=\037^y=PR8\277\305cD?i\244u>l\0169\276\226\333G\275\372h\307\275\026\366\343>\306m\326>\211\245[\276\031\341\324>\027x\275?;\231\225?\377s\217\277/L`?\301\344\270\275\t\220K>\'\212\213\277\351\227\243?Z#\007@\310\267\267\276\004\273)\276~a\034\276\031,F?\275\206\024?\n\375h?+m\264\300%\303\311\275^\260X\276\331=\016=@P\031\273\276o\316\275lv\353=`\341\010\274 \035Y=8\027;>6\306\035\276\227l!\276\201\242\312>\032\020#>>\377\215\277k\003\314\277\010\211\024>\373\240\234\277\377\275\216\273Z\341%\277l\200\243\277\024\027\200>\000\031I\276\020\331\206>\363}\245>q\026(\276a\004\220\276\234\313\266>\230x\205\276Z}\234\276+\032\260=@\334\237\276\'\327c\275\324+h\277\\B\224\276\'\236x>*\305\377\275\305q\004\277\205\374=\276\0149\214\276b|\310\276\236T\237=)\001\225>\212\367\347\275\250\330\242\275e\317\367\276\246w\270\276\225\260\207\276L\353\352\276\260\236\361\275\2203M>gB\351>\022\264\350<\204i\212>\226w\317\276\377\211\023\277\035c\277<kt\334=F?\n\276\003z0\275d\030\204=$\215K\276;\022\241>\330]\314>\332\010\241\275y\030\224=\344\232F\277\205\031\220<\020*\276?\257\224l\276\007\245\234>\207\377\222?\241\'*?\005\220\322>\3729S\275\275\007i\277\033\353@\276P%j>\"P\351>\225\353\207>\371\301\201\275t\254\237\275\327\275\343\274\324\270\224\275\303Q\214>D\276\204=j/\361\276\267\243\374\276\303q\261\275\220\005S\276\321\373\327>t\217\263\276\003\3262?\263\210\256>\204+\374\2752X{;\311\214m?\320\320\352\276\177\303a\276\033&#<E\336N>\306q\030\277S\211\001\275V3\335\277\337\035!\277\270a\314>\300\350F?\010\003\261\276\264\374$\276\337m\013\277\246d\002?i\031\343=\226?T=W$*>x\356\002>Q\366\034\277>\365\005?[a\252\274q}*?\214j\217\275\225\244r>\303\247_?\314E\177>p\006r\2775n&\276\"\333\221>,\005\314>\211\222\365\276h\235\323\276\314\334\326=\233\001\322\273#\363\254=?\3500\276\210-\361\274b\273O>\210\240\363=\300\177t=\360\372\240<@\027\000\273\260\315\254\274[&\262?\351\367?\277\036u\221\276\264\3155@\337p\311\276Y\375\010@\010\254\251=\272\330\224>\317S*>\277\n\004?\r\316\331\276\262:\035\277\371Z\n\276\264\241\214=\202\226\235\275\324\331o?QsF\277\304\343\230\276\2354\025?!\234\007\276z\215\253\274r\374\003\277\2039\310\275\212O\327\276u\300:\276\242:S\276\025\222\342=J\302\335=%\304\200>\350\220\357=3s6?\201#s\276\255#B\277r\214\237=RV\230\276n\360\251=\355*\266\276\000\243\013?\363\016i\276\272IM>^8.\276L\233\023>\274\207\345=u\204\200=\366X:>\225\266Z\274\204\365T>\236@\034?\334^I=\r\316\233>]\223%\277\032\222\022\277ve\257=\250\334z\275\335\370\365\276\341\213\362>C\022\366=)V\330\276\306\337\005?\370\300\030\277\203wP\277hC\366>\212l\267\276\204s\223\277|\023\r>\205\270\005?\216\255l\276r\254\205\276X\345d>P\314\335\275e\275:\277\036\"I\276\226\303\343\276\305d(\2769\352(?\335z3\275\2330\273\276\300\333<\276`\372r\277\243\210\246\276\272\227c\276\347\245\t@\027\177\026?\013DE\300\241kN=Q|\356>\314q\364<\360i\264\276\014\ne\276\030\302\227>\250b\310>2\264,\300r\307\005\276n?\263\276\0065+\276\333\202w\276P\365\226\276\246z\001\276\256\362e\277\216\030m\274\324j8\277\'\263\217\275Y\301\355\2767D\224>\345\364N\275\317\215\250\276\320\323\037\277\240\261c>_\027\275\2765\206\375\2779\345\247\276\207U\216?*n\003=\306\256\001\275z\326)?SU\347\276\300\312->\007<\000\276a\323X\276Fc8\276\264\354\014=\340\211\262;\274N\002\275\0300N\276~\221\376\275\000\266/<\330\177\216\275\350\205I\276"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\013+8?\376\323\020<\274\324\350>\304#\323?,\325\266>b\362\264>\250\231\006>\251\313\005\275B\247\014?\243\326\216\275\272=B=C/\310>\032\217\303\274\342\322\200>:\033:?\222\251\014?\371\2430\277]\003\327>~H\232<\311\230\315=\260\037\232>\004\330;>\337\034D>\234\231Z;\360\302V\275\312q\213\277\003\027\326\271\260;p>\214\033,\276\3740\377>\2461]>\\\316\271\272?\212\315=d\256\277=\245kB>\302Lx>\021\n\252>K\235\265>\230\333d>\262t\307\275\275\200F\275\231/\256\276\256\204\035>\211[\205>\207\031z\276\361\236\230\274\371tq>TQ\240\277\013\214@>\351n\272\276T\233F=\210\261d>\245?\n?\347>\264=\332O\212\276Q\223\340\276t\346\266\276\023I8\275\331g\027>\261T\003?M\213\366\276\374\372\204>i\270D?\342\265\226>\001\322\246\2741\243\r\276\244`N\275\277:(>\362\276\256>\261\270\371=F\215e>\263)\313\274\342\2053?[\235\237\276\017q9\275\327G\332>\356v\366>\327pF\275(k\357>\335\213\t\277\207\363\345>k`\020\300\304\310\230>\270\352\256?\210\231\344\276UzL>\340\275\033\275v\311\252\275\271\357\220>3\342\347\275i#\314\276x\336\371\275\024`\301>\347\024\246>|\324\017\275\217:x\2758\332\275>\006\006x=\034\241\037>\247*n\274D\304\035>Di\311>4\007\371>T\243\363\276b\311c?\327\'\034;\210\276\240>\234\251{>\242\206E>\3451\210?\310a4>\373WI\277\227\336\014\275\335ws\277\'\027\202\276\345\336\n?1\243\242\277Y\373\207\274\036\001I\275\002\345\253\274\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "]3\243>\215\004\206\276\257\021\033\277\235\277\276\275\355\252\t\277\030m=>)\247?>\023\326\030\277\032\\\374=\013\342T>\030e\237>\355\000\252\276\033\351\003>\220gp\277\260N\022\276\337\212z>\356zr>\2056\005?R\323\257\275iH\262>(\366v>\337\272\003?8d\220=\334jP\276\217\353\235\275\200:\226>9\362\005>M\013\246>\247\240-?X\247G>\222\003\327=\204\035\344=\204\366Q>\020\020\343\276\240\324\313>{\017\220>Y=\213=A\026\261>\271\r\213>\002N\241>\371\206\214\277uc\206\277\247\250\002>\347\343\207>\376_g=\340Lg\276\2054\227\277\222\215\234>\236&Z\276\307%\231<\232\234\244>\246\265\261>\273\372\303>\214y\217>\232\313\351>H\035\270>V\310\n>R\265\205\277\330\236\250>\244\276\214>\377@\000\276@\220\006?X\257\276>\002\307\262<\323w\375>\003\354\243\276\024YP?\223z\251\277_8\241\277[\253\217\277%\201\010\275D\245\016\274UR\260\277:D\003?\262k\254\275\267\335\265\277\232\227o\277\330\256\210\276#\037\010\300~\331\345>/L\264>*\366\262\276\3554M\276C\177\320>\330u\334:\223-\254\276\277\340\033>]t\222\277\'\035\002>\354E2>Y[\177>@\226\335\275:w\250=\273\207B>\374\231\226>\r\273\346>\002u\373=I\235\204=\313\362\346>\256\3356?\244\253\300\275\337\"\021\275y\260O\275cc\034\277\371\361\033\276m\346\232=\262>H?=HA?#\241\253>\222\211r=WXE?\023_o?\325\313\260>\242\032\014\277\255\330\021\277\270\007\203?\013\314W>\350tX?h\n\206>\321\257\345\275\010\212\257\275\t\361\351=j-Q?\027\374\367\275\275\214\206\274\250\022f\276b\026:=\323r\351>C~\331=\327Rc\276\372\247m?\323\021\330\277\234\\\227\276\204i\327\276a+\332>\020\345x\276YF\247\276\2620\257>\271Z\257>\300Q\352\276\306;\367\275\003+\033>s\210\271>\200\3463?\360_*?7\347\242\276\241W\253>\010\312\273<\230`\003\277/\344\262>\205\037\320\276\313\321\340\276\2268\235?J\n\r\276&\306\013\276\030\361\333\2744G9>\3665\306\274\267\227\242>\212\256\303\275\006\014\263;\022\2747\275\321*\201\276\212\373\212\276\236\214\374<J\237\255>K)\034\276\rn\037>A~\214>\206\301\014>\260\351=\275\002\335\360>\\`H?\026I\203?_\305\003\277\321W\237>t\231$\276\226\322\024=\026|\246\276X(\374\276j\206\325\276\377\217\264=B\023\262\275\265\343N\276\3061\334\276\227\261\323\276!`\302\276~\022??(\311G\275(\275M\277\321\223\250\2752\242n=\215\016\236\276\365\271H>\241\317Z\275\301w\002?\261&\261\277\223\372\035>\004\340T\276\373&\326\276\362\336\226>-\315\264\276\220\'\001\277\2252j\275\014\264\372\276\344\021\t?S\367\240\275\255\035{?\241\254\006=\213\317\333=1\224\031>@\310\313\275\'\347\251>\373\355a</ />\367\027\007>\260\263\340\276d\003\223\275{\027\210>\320q\274<\306\255>>\3530\255;ahW\273\276\367\007\276g\316U\276\021\201\356\2761\275\340>kr\000?\204bj?\306N\227>\312e\222>\337\216\251\276\247\342\330\275P\030W?BA\031\276Fl\213\276\333\365\264\274#lc>\271\376\274>8\355\323=\025\275\221\276B\335\007?\314\326!\277 \t\022\275\311\033\305>\211\251\022\277c\030\227>k\331w\276\355\373\206?\330\310\342\276\010\202\245>\tNU?\323\311\001?#\345\032?\246\315\354>;\013v>wv)\277\003K\321>\321\215\345<\005I\010\277\234\010\023?\375\257\202\276\007\340\010>\324l\013\277,\242\357\276\234p]>\234\003\336\276\222f\317\276\177\335\021>\322\224\243\277O\221H?\004Z<\275\344b\007>\306G\212>\037\206r=\202\261\036>\340m79\231\335B=~;\230\276I\311\321\274$1\001\274\245\275B?\323+\342\276\317\"\364>\n\256\344=g\016\030\277NOn>~\375\343\275\037g\347>V\317W\276\363\033\177\272y\357\377=\013\302\301\276\224Z\027?]\242\025?\376\301\252\276\245y\256\2778\022\211?\017E\275\277\312:\272?\031\205\227\275\221\200^\277c\242\224\277x\376\013\277\276\270\240>\177a\025\276Q\344b\275\305\376#?\271q\026\276J\202\302?\035B\201\275\332\311c<1\225\034?\342\333y\276\224\347\250<\2228\301>\353j\021?\233\230\367>4\331\005\277\306\017\237>&k\243>\254\371\274>E\350\264?G\256\260=\315c\370>\371\313\313>}\256\240=\'\345\240\276\317\017/>\330\350U>\030l\035?~\321`;\347hW\277!t\267\277~i\224\276\247B\316=\335Vv?\351\350\217\276\346\262\342\276~6\232>\003/J\274\350\214\006\276c\323>?3\257?\276\322r\231=\233\315#\277\215\230\225>\204\373\365;\353}\371>\026d\263\275\216l\265>r;\332>\026/\250>\007B\007\276v\220j\276\234\211l>\354\314\254>\2244\317>\254\003*\276\362\211\014\276\367\001S=\031_E=\212\222\217\276|/\021\275\334\342t>\036{\t><n\"\277\031\r^\276[l\375\276\207\370<\276\003$\255>Nf|\2772K\003>\\;\346\276\262\337\021>\306]P?,\231x>\257\032\202>\\\317!\277\032\253\223\275X;\222\277\242N\336?\221.\361\276R\361\374\276R\224\312=\n4\234\276\362\020\356>\375\006\316\275q\036\034?\323J\265=*\253\025?\005\026%\2767\217\231\276\007\335\334>\217k\227>\2254\314>\335?\273\276\367\327H>\234\036\001\276\021\322W\275\344\020\017>0\276\362\275\273(E<6^\006?\354\013\272>;\n\002\277\3021\005\277\241A\352\275eqV>K\221\373\275\200\033\001=\013\375?\276\001\361]>9\247;=:\016\226\276Fj\307=\334\274\211\276\340\307\227>\272\000\n\277Y\217\211>\021\271\267>Eu:\277B\243\017\27611\321>/!\360\273\235\363,=\253t\241=R\351\221?\240\nV:\221QV?\236\3430>\3234e\277\351\2058\276I\316\203\276a; \276t\344\022>\265\340\377=\021u\341=\376\033\225\276\313(\321> \357F?s\r\030\277~\033\207>z\211 ?\264\221\335\275\316\251\r\277\"\375A>\267h\346\276%\0202>\006\252\027?\243\302\005>7\017K?px\201>\\\367-;\267Bj>\203u\335<x\252\355\277\234yw>\363WA?V\364\237\276\\\355t?l\261f>|[(\277\t\207\265\276l>x?\360\371F>\027X\027<\362G\274>i\277\212>_\252\030\276w\240\206>\221w\357\275\311\t\357>t-\210>\234\307=\276t!\204>\354\212\021\2774BQ>*j\233\275/Y\003>\267\036\246\275\240\244\235>\347NO>P\365D\276\356&\032\276\016\232P\276\326A\247>\301@\235>T\304A?\200 v>\201\000\212=k\247\373><\026\247\274Ni2\276w\271:\277\3633\306\276Ez;?\371\206\020>\34077\277\355\037\321>\311>\030\276\366bJ>\336\252\355<\016\242\257>6\000>?\020>\347>\007\370\275\276\241\362P\275\212\027\266\276C\016b\276U3\236>}\316m\275\336\351\244>\020\002\256\276O\321N>{\341\265=\323P`>\225\2105\276\nO\n=B>\227\275h;\266\275M%\005\276Tn\300=\243{#:A\245F>\214m\247>f^\013?m\240\255\275\251r\377>\362\014\001?{\3225>\026F\213>\362\n\323\276\343\356\255>,\017\325\275\232q\230\276Ic\321>8\341\005\276t\255\362\275Z\215_\275\266\377\017\277\177\364\245<\337Wq\275\272)\023\277\302\203\016\277\004u\004?\354\264\\=\315,Z\2750(\211\276\017\325\343>Z\2057\273\311b\025<\215\306N\276^\327#\276T\335\013\277J\2652\276\370\230\270>.\225\316\276\007\327\345=x\340\374>\376\365\352>\261h\223\275v\332H>\216\346\342>}\327\327\274\026`\235>\365\324\336<A\213\355\273\017Y\002>\276\260\202=\346\225\002\276v6\256>H{\262>\276t~<\210\227\313>[H\354>"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "+\375^=\000\310\346=\276\353\237>\020\260\367\273wtU\276\201h\211\276\"S\353\272\370\234\215\275"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "`\226\345=\036\252\254>\314F\307\276\365\257B>\326\303\315\275\013\234\320>2`\221\276\305\237\014\276zw\\\276\020\003$>\032\340\020\276\264(^>\360\242\225\276\267\205>>\334.D>I\352\246\276OV\360;0E\031\276\2163\n\277\001\247\021\2771\005\275\276\325x\237=\327W\236\276\177\3276=\004\256\036\277\024\245A?\356V\035>p\314\242\276d\226\272;\000\234/\276\364H\202\276y\270\013\277l\027\243\276\2128!?\303\251\233>HwG\2754\252&\277m\225\256\276\265R\215\276n)2\276\030-\231\276\266\017\016?\217\370\311\276k5\020\275G%L\275\330\303\213>[%\030\276\nTu>\261&\034>\225g\372>\331\202\237>x\234\271\275\2219\262\276\033x\221\276_\267\311\276\223\3453\275L\030q>\326\302\240>8n\032\276\240\200\264=\375\265\202>\311\261\353=\241\345\314\276\2560\227\276\344\032.\276\343\"L>\323\261\243: B\034\275\\\023\323\275\265\002\314>\327r\223\276\274@\266\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.27101609110832214
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
