node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\363\222\341>\235\030\274\276\366\357\002?4\305F\276\233i8\300\013a\212\276\257\325\331\276\264\024G\273\251\306\301>\214sJ\2762\311;>\033?6=#0\216\276\302\300\250\276\014\2539\276YR\307\275\222\353\226>q\244$\275\202!\262\276\354\243\203=\275B\347>N+\007?%\341\231>\350\370\014\274\302\244{\276\211\352e?9\272\361\276\3531D?r\214\206>\374\236N<\205\254\272\275\366\275Y\277\342\001p\300$\244\310\275\376\254\346>7\260p?\313\365M>\353\353Q>\334\036\320\276\267\221\\>\013\273\035\276\372\331v>b\035\235\274%\002i>6\271\266=\246\376\245>\035\242\306\276\027\3216=.\025M\275yd\224=S\024\240>\207\243\246>i\227\322\276\315s\322?\322\372\004>\325\233\034\276\024\321\200\276\255\241O=zx\203\277\315w\264\275\225\240\211>\201\320\353\276\225\346\311\276#\271/?\254\002}<\024\233\232>Vp\227\277RN!?\232\361!>x\351\250>\324\373\342>/\034=>c\310\306\276\257%\260>\215j\342<\373\312\037\275$\213\202\271t\275\213>\333\250\345>\354p\307?g2\251\275\036*\217>\262/\271?\357-\303\276\257\255\027\277r\276g>\"\355\213\276\367 \017>\3350:\275\327\314\337\276\215\261a>\271v\005\276\231\032\t\276\030\347\262?\224\362\367\276q\371\010?(J^\276\005\255 \2770\0229?\354d\242>\336(c\276XG\324\277l\240\222=\272w\220\273+@S?\357\313\034\276\323o\300\276\323\346\027\275I\3475\276\240\241\273>Q\010\t\277\021\246\321\276\302\260\004\276\0276+?c\216\227>\335\367&\2767\345\337\274{\377\245=?h\037\2779\247\232?5&A\276\"5\006\276u\356\032\276\224\3127>\036\337\374\275\230L\211=\370\347d=\004#\352=[\261A\275\177\334\024?\037\305\214?\032u\023?\003\301\214>\355\025\326\276\301\\H>\3370}?\365l#\276E\013\022?+\035\201\276!j\242>\272\331r?\016\375\313>\215\022S\276W\360\322=\341\022^=\343\0311\276(\035\376\275n\222\243<\"@3\276\016\006m>\235\023\033?\371\177\215\276\273\233\322=\335\203x>\027\261 \277\246\030\376>0\005?\275l\206\335\276uC\021\275A\317$\277\221VQ\277\003]4>\240\354\314>\007\023\270\275n\213c>\0337\204>\210o7?,I\377<\331\361\227\2763\353D>\211\002\216\276\210\203\205>\263\221\353>\020S\243>c/\000?P.\377\273\356\2319=~\\9>\312\265\203=\272\214w=f\014\225\276\231\312\230>\224\227\251=\332\013\300\276\205\214\375\275\352q\215\300\377\246\313>(\272\217>)\330\t?2\330\226=\361\243k\277\346f\030?d\300\312\275\004\332\252\276D2L\275*$\263>\313\3013\274\005\262\352\276#\362y\275\223\014\210\277x\367d\274\206h+\276$\360\016>\236\272\206>\241h\247=n\367\266\276\307_(>9]\304\276\234w@>\322\022\003\277\024\312\203\276\334\337\000?\315\216P?7\004\021\277=f\027\276Ya\204?#D\013=\027e\004?\242\355\264=\342\322\201\274\204g\"?\262%\262?P\270\217\277\373\253\216=\360\376\224\276\025\332\320\276\350\355\265>\356^\215\300\355\202/\275\323\306\242\277\214\336Y\276Euy>\270\210\217\276\254\036P\274\037\254\305\275I\023\005>!\001Q>\274\271\376\275\025\352\314\276 \273\001>\361\3340\276\031\262\243;\357 \375>\254b\034>\2136\271\274\353\211\t?\031\305w>\177\275\'>\254.\241=\001;\340\275\220\233\336=\340\\\356=\331\230A\276\n\377\373\275P\302\217\275H6\204=\341\363:\276>t`\276@\177\227?\200Ur=\264\310\310\277\234.\342\276\274RN>4\003\211>\301\363\213\276\262A$=\264\275\027=\237!\250>\317!*?\'\006\252>^S{>\200\212\256\276\316w\177?\232\226g>\246%9=\272\303\210>$L8>*;\204>\222\363\220\276\245\224\213\276\313\'\237>_<\304;\334F\003?\014v6?\215\253\025\276\276\001\006>\202\314\\\276\325\232\024?\237\224\240?(\002m?5\202\\>\305\370A\277\331\310x\276\273l\222?\225\222}\275%T\027<\213\2641\276\017\305y>5\022\226\276!\251\364=l\255\271>\273D\330=\231\206\205=-\343\003>`\377r;\242\214\234>\335\000\233>\311\333\237>/,\024?\221\205\251\275\373\342\313=\267\312-\276\340\264\346>M!\001\277\357u\250?\332j\270>`bK=\214\323\210>\301\243n=}\004%?NN&=+\316\";\027<\221?\241r\022>A\312\251>5BG\2769\345\025\276l\251\207\276u\020\202=\023\305\005?\227\024b\274M\274\342>\266\357V=H\205\005=\224B\320\274oB\017>\026\235\006?\242j\031=?N\201>\2529\326>\312\313\266?\'No\276\337\007\026\276\365\273\010?1\357\n\276X1\230?\203(\253>\376\250\006\276\362\303\321>f\276\316?\204Z\215\275\351\034s\276kn7>\264\026\227>(\243\023\277\253\245\353?\034l\204>\363\317\206?T/\014\2767\355>>\311\252\273\275p\310\206\273\003:\310>9\006\034=?\372\273?\233\341\003\276\310EY=\'\002\003?\023H\222\274B\n\230?\310\347\231>\332\327\234>\340\036\321\275\264\020\242\275\3177\211?\217?\237\276\270+\231=\350S\245<\332\2518\276\224\276\242=`\213\377;\244\300\243=\320\333d\275\010\237K>k\270\036\277\035U\202>\242\023\250?\023\275G=\'\326\217?\365\3442>$\311w?y\267\036>\361\334\271=\306\001\221=\372\346\325=\365\354\\>J\247Q?\237j\031?\307@\221=\207\007\265>#\226\010>\031\007t>PMU>\r\r.<\3372W<\265`\254\276\317c\266>\311\361\301\275\334\356\214\276\nt=\277\276\031\003?_\356H\276\240q\021\270\006| ?\347\315(?\243\277\377>,\320\002?M\335\376\276\355\023\355=\035B\237>\260\273\232<2|\211>\314\024/\276\350\312\232>C\022\021\276\275CL\275\275\'\034\276\330N\325=\000\311\250\274!X\365=\214\206\023>\262v\210\275\032\030/\276D\217\033\272rC\200\276N\257\363>\334\223\235>\221Y\234\276\337qQ<\032\346>>\005\272G;%\177\t\2760\226\033? \250\333\275Y\200\225\275\031#\262=\177\202\004>\005\021I\277Wdw>\320\177\352>\251j\023\277\270\330\264>\372M\351>\n\213L>\033\205\222>\005\003b\275]\325\334\275bi\365\276Q$\205=\344\350\302>\3014\247\276\250H~>:t\000\276@\266\004?\254\235@\276\215\024\023\275\223\001\227\276\007\221\301\276\212z\317?\2719\212\277H\031\\\275\263\224\345>\006\263}\275\r\3261\275P\246\272\275J7#\274 |\243>$\247\315\277~\273e\277\373i5?\342\274\260\276\314&\032\277\375\3571?\347\326\332\275\321N/\276\036` \277\243\002\336=\337U\220\276\353r\214\275!\367\252\274N\266\005\275vej\276\316\262\231?\236\244#\276s=\026\277o5\020<ntR\276$\207\373>L\317\204>\271\245\376\276X8E\276\247\363\363>L\177$>\n\374\n?\0327?\276 \251\361=\2062,\276\250m\312=H\211X\27501\013>\2200\306=\026\313B\276\220r\301?\323y\034?\237\0351\276bO\247\275\t6\251?9\374d?\272\345\023=\307\325\013?\032\302\347>{\003L\276\321h\225>\236\211\267\275e2@>\312\373\224=\305HW>\2147A\276\324\265|\276\356\263`=\n\241\221\2765\350\313\276\272\241\200>f\371x>`\026C?SA\264>\3308\327>\271s\362=\2777\000?\037\267\370\274\001d\037>\265\2130?P\032\364>\035;\326>\2537\343?8\243\251?!\256U>7\214b?`\031\360\275\013\366\232=\206$\211?\344\200\315=\320\005~\276!:\346>\214\245\367\275b#1\277\320\350I\277\204h\200\276\373n\331=l\257\003>\217\244W\274\250\253z\276\373\243\356=\361\341\235>o\220\233=\340C\234;a\2442\276\276\216\335>?\364\235><\321[@\236\304\234\277\223\253\022\273\376<\216>\"N\317\276\261)\330=E\355#\277\275F\276\276\350\267\266=\302\373^\276o\002\322>\317\270s\275I\304+\276\003\361\027>Z:\336\276\232\203\271\275T\226)\273\234\224\257>\215\265\206>\334\0340>\346\320\302\274c\317=?\266\t\310\275\020\3531>\256.\013\277\315\022,?\322\236\346>:\262_\277j\255\267\276\004;\312=$\2042\276\342\345\240=\336\003\227\277\300\271(?\365\214\303\275\033\200\037=}\321\230\277\226\201\374>\314 \221?\331\361=\2760\211\271<\001\257\020>\315\247\007\300\\\276\211>\243\n\241\276F)\247>\230\302\347>\220\253\322\276\'T\023\276\310\214\275\275\341\212\370=\263\031\031\276y\366\005;d\233\017\275\270\024\'>\202\242W\276\374\275\210\277\363\205\224>\034\217\030?Q\014\232=\361QK>\200\000\375\276\211\037\010\2778\033O>\340$\251\273i\212\026\276\350\201\017\276\036\241\010\276+\001\246\275\014\024\037>\275\347\242\275\0143\243\276\216GZ\276~\323\306\274\231\270Q\276~!??\330\360\204>\'\223q>9V\255>)\334\203>uB\323\275\217\301@?\316\203&\276y\237Z>\007\300L>\026\021X>\013\346H>\013`g\275\317\351\200>Y!M\277<N\231>\231\223\305= \017\205\275\244\223\347=`\031\027>#\016\310\275\331\006\333\276\006i\217=\252\026I\276kD\344>\303-\236\275\266K\266\276\220\277\r>\223/\016@B\274/?U\020\346\275\357\033k=\257\361\032\277D\264\201<\2325\022>\324\352H<5\356\270=S\300\316\276\024\031\230\275y\034\377>N\203\"\276T3\252\276w\363I\276\324\250\272>{C\013>\272\004\242\276\230;I\275\205\244\r?)>\337\2739\2147>\236\323\356>*\t\201=\026\264\223>\270\300\372>\266S^=1\001\326>\035\n7\276m\331\363\276\273\252\255\276\310\005\006\276u\3771\277^\230\261?\372\231\256\275H\023\001\275\305~\253\276pZ\007?\001\305\315>\274\037\202?\243Zz>\303\244~\277{\340\271\276 \330\226=C\352\350\276Zme=\032*\203\276\007\2634\277po\253>\032\020-?E\300\207\276\361\300\304>\214\010\005\277\023\007c\277\3026\361\275J\005\247\275\270\340\001\276\232fb\276Rs\r?\361\367r\275\035QP?\310\237E>a\003\267\277aQ\210=\245Q\216?\321\347\215>\271\312\311\276\233\0360>\322\357\247\276\210b\025?z?\370<\030\211\310>\360`\337=\376$\r\277\217\003a\275T\317X\275\003-\215=\273\243\344\274\252\030\002>_\237%?\226l\375\275\177\272*\300\346\3671\276\'\351\367>\273\267?\276\010\002\013\277\002\372V\277\021H\222\277G^\345\275S\250\027\276\002\205\370\275\034+\260=\014T/=L\264G>\324L$\276@\365\321=\366\356\250?f\177D?\232\272\025\277|\262C\275F\265\007?G\370#?J\205\034>\217\205\n;`2\325\276\205*P\277\311;\200\276X\227T\276\263\251\220\275\216\210\341;\246\315\311\274\210\0263\273W7\312>\n\027\241\275\354\177\272>+K(\277\371/\005?f\256s\276\262\354e?\263\\\205\277\'\251\213>\026\236\233=\370u\210>d\235G=\363\230\374>\332\260\001\276*\215\250=\260\273\350\276\213-\005@6m\237\276]\300?\276\224\252\210>\031\252\315\275\200\023\312\276\200x\371>G\324\230\276\313\365 \275F\343\210>4>\006\276\246\316#\277Y7\251\277\363\234x\277a\216\275\275o\226M>\021\230\272\274\0043\376\276\'e\020?M\036\037?\316\341\032?\013\202\242\277\tJ\002\277\244\366\223\276\006C\212><\3114\3008\377\213\277\213\247\006\276\024\333\036>\233\372x\276\244\323\002>\273z\360\276[-\232>]\273\033=A\255\t\277\212\270I?>\357#?!\"\316\274\233\322\313>h=\022>F\014I\2761\217\244\275\372\212\251>\335/n\276\325\264\032>`\346J>\326A\255=\332\211A?\262\327\210\275\273\233\342\275\244\312\340?U\377f=\243S\233\276\022a\337>\363\032\274\275\260^\235\276\266Lj\275\347&\034\277\270\273s\276\253\213\360\275\255~\344\276\347\352\301\277\266\251\305?\216\232\013>\253\036\201>\267\240\016>c\375\300>\207\347K@\237\326\346>\252\371.>F\017`<\036Y\313=\242\352]>zop?\201\224\230>\037\301\250>\240\206@>\371\345\220>\001\030\364>y\237\241\276\024<\213\275\014U\014=\326\352F?\232m\312=l\264\031=v\003\321?\214$\t>\034\010\246>=\300L\276\306XG\276x\325\364\275\220\274$\276\000\357#;>\210\226\275\210\306[\275H\320>=\367\252\010>\261\323/?\002 \222;v\177U?b\005\203\277\032oy\277\247\346n\276\365\260\242\276\271?p\277V\021\234>\247\244)\276\365\347\021?\201\002\345>\302\031\333>\3271\302>\257\337\267\276+D,\277\213\003o\276\255K\031?\351\212\010\276\007y\360\2768C)?k\325\200\274\026\326\002>\211\352>?\356\264\310\274\306\247x>\233o.\276\215\244\001\277\324K\242>N$\214<\324\372%?W\352\037?\010=\310\274\202\3079>h\356\021\277]\013\244>\204\241+>[\023g\276#\023\247\276\331\370\345<\220 \270>\007\244\212\275Q\262\t\277\221;\"\275\342\365\032\277f\021\001>\177\226\216=\250\332\376\275w\361\221\275\345p\002?G\256k\275\221\241\021\277\360\310\366\276C\033[\276g\020\374>\343\246`\276Czm\277\227\270C>\315\222M?\001\347\262>\272b\324\272JU\260\2774rW\276\307\353+\276\265l\266\275\324gE\277{ \266\276\006#\206>\244\006\306><\255u\275K\335\021?\320\303\227\274\177\334\257>\364|\217\276\222\230R\276\2201\010\276\000~\247>#\340\234>\017]\366\273\001\315\234>\360\343\226=\301\313\320>+e\220=\272\237\022>\017u\243\276+\327\036= 4\010?G\350)\276jO\237?\277d!\277,\022\023\276\024\3247?b\314L=\001*\270>X\2111?(\377\t\276\0016\020<L\236\270>\3025,?\214\316\202>\271\335\337>\307\352G?\254y\226\276\203\272\302>\315\2125?\364\210)?\275\036\232<\226\007\024\275\331\001\\<\222\215\350\275R\177\335\276tY\026=\237R\212\276\262\244\001\3005\253E?\213\365)=\002\372\216?\226\227\247\277\355\304\017\277\364\226>\276\024T1>|l\030>\302\331<>:\3276\276\250\366\234\2744\202\256=\222IE>\323\"\367>\2224\261\276\353\254-\277\325\214\356\276v4\234\276\260Z\017?\240\216\032>n\262\020\276<(3?|\302\340\276\031\366\n<(\243\325\275&\225\306\276\003g\007\277F\363\220>aC\373\274\374\r\224\276\326f\234=D\312\326=!\357\210><\rU>\002\337\343>\256d6?\211\342\374>\360\n\274\275.W\235\272\307j?\277a\254,\275\323\241\241<\334b\242\275/\010A>\215\003\210\276\360\377\366\2742\361\026?B\n\355\276\206\315O\276\000\272!\276b]\304<Z\263\344>X\312\355\275\335\274\251=Z\0311\276\333\330W\276FA\257>\366\305\310>\373\330\320\276\203#\344>\023\271\265\276\324\355N\276\256$\031?\370C\276\276\274\247\331\275\236\311F\277\232\344\320>\311\201\306>]\240\202>o\206~\276#\344\373;\"\214\322>\036Th\274\303\r\234\276\026\265\275;8\371=\277\304\000\323\276\320\'\270>\"O\270>\331B.>\337\242\307>l\3255>\017\273?\276\307v\205=Ul:\275\007\222\014>\244Ot\277\244|\033\276\225\260.\276}\304q\276\357\266\244\276\220QS\277\262\215\006\277\313\000A\277\264\215\216>\230\234\200\277&\364]\277\366W\031?/\331}\275XY\033\276\303(\006?Z|<\276V\020\356\274\310\316c\277<O\036=\212\201\201>\331G\022\276\304k\325\277\335\335\333=\266\304\257=\303\210\372=b\226\214>\300\211\333>j\346M>\313u\344>\'\232\267\276>\375:>\215\306\000?\233\346\276=\322\032\243\276\003D*>\313\025\215\276\3734\357\275\035\212\326>\260\023\212\275`tm<\3408\357>\030\324\021?\036\234X\276\337\322<\276\273\244C\276\334\327\362>\240k\333>\324t\023=P\230n=\340\345\013>\310N\032\276L@.>\304\361\220=\260\333@<P\345\221<V\025\256\276\rO\227\276\t%\004?K\303\212>\265Q\236\277 \343\014\277\346\3345=\014,\251>\232\332\357>[PI>\314\0044\277\006\227q\276\353O\021?\225\236\033\277\202\007y\276?\232\365>zW\010?|\031\223\276\177\346h?\3315\005?:\225\376>\300x\273>.\0222?\221d\360\275\020\'\325=e)\306>\274\266b>\r\013\031?\313\237\335\275\361\330\210>\362\253\013>\177\306\304\273\272%*\277\354\340\267>(\024i\275\014<\260\275I\032\">\363w\216>tDP>\364n\250=\366\016\346<\237\242\206=\335W\t\275\242Z\007\2778\207\264\275R\203V\276?\206\322>(\356\334>\246\004B\276wt\315>\203)\260>\227\255\235>\223\335j?\346\035E\277\002\241\017\275Vsi\276\001\362o>\306W\017<\262D\010?\271T\365=\0030\000\275J\212\270=%\216<?v{H>\352\300\336\275\210j{?L\335\n\300\342\255\032\277\366\342\230\276\372J\276>2\374\274\276&H\373>z\262\234\276\362\"\221\277\225\371\246\275\262\000l>\3178\003\276u\307J\277\257\213\">\342\037\276\276\376\233\206\277T\304\364>p\270\n\277\356H\021?\260\243\226\276\253\227\024?m<K\276\227}\323=\364,\321=\277\366\232\276v\327\034?\355\"\016\2769\226)\277\201\332\222\277\345\303\252?\336\212\352\276\250\335q>\353\210\304<\340.\374>\356f9\276\261@4>\332/!?k\244\300>\233\010\207\275\352n\004\277?+\333>\np\320=l\251\255>$\314\342\276\317\'-\276\021\'\232\273\275R.\275\232&,\275%~\376>\032a\021\277\354\327\r\277x\005\n\275\227\377\366?\311av\276Ez\326?\300\334\242;\252\264E>\030\237\032=\244 ,\275\262\374\237\275tu\307\275\200\255\023>\247\374\323\275L\236;?\337\003\366\2764D!\277O\254\256=VHS\2774M\321\272v\270\234=E\260\335\276TG\220?~\"5=\202\345\354><\322\'>\223\372{=\274e\334\276\021\\\212?\340\353\300\276#\205v\276H;\333<\372\226\007\277\205\'\342>\023B\253>\225\334K\276\317}\n?\037l\306=\214\'\323\276\247$\226\275\035\035\010?\253\220\351\273\006c\224>\250\274\275>e\206\007?F\367\224>\374\243c?\017SD?\0362#\277\016\255=?hG\247>\004\'\r?G\317\365=yN\020\277\252J=\276\t\315g>\316*\231=\377]3\277u\262\277>\021\315\257>#A\270>\255\002\312\275.\367G\276\346\273Y>\255\353\036\2769\351\006\2775\257\030>\321Q8\276\3018\225=/k\263\274\277+0=\310\\\r?\214\354\221\276{:\214\276C\036\213>**\304=\240d(;\371Q\'\276\311c\377\274\315\027x>\201\312\013?\317z\021@\352\332\005?A\334M\276\026\241[?\317\216\025\277>\371y\276_Q\016>\336(\020?\356\310\274\276\366S\341>b\233\035?\363\210V?\347\332\342?\000(o>\010\264\036\277K\250K>\2746\024\277\352^\315=\217\340e\276V\211\301\275\031<=?\324V\231=0 )?\224-\353\275\200:\376\275\235\004\252>\035\316\377\276\306\245f\277m\267\304\276\234=C\276j|R>\224\003b?\322G\345\276\314\305]?\320\017\r\300\236\232D\277\246\262*@\'\306\265>\370N\377\276\243\342\027=0\352\031?j\210:>\232\246K?_\036\300>y\007\344\276\325\217)\276\377\366\232?n\247\245?\214\024\370>\022a\007<\211\t\333\276\322R\"\277/|\030?\200)\362\272~tC>d\323;\275q\3708\276\200]\023\276\230Z\350= \355\006>`Q\306\275\t\204\200\2779\334w>\361\215\001\2772-\370>l\006\031@\271\302\372>Y\334\350>\233s\353=-\243\t??\001\216>\210.\246>5\304\372\275\\,\345\274\262\260\026> \215\001>\\h6\274)A\261\276\202\267B\276FdX\277\263@\241>\336\"\257\276r\221A\276\325\023\026?`\\\252>\324\005\204< %\020? !|\276\363S.>&\031#\276\207J-\276\321+P=\315\201\211\276\355_\r@\022s\034\277)z\254\275\3340\274>,4\344=\2550\313\276\022~\372\274\303\205\035>6\255\035=1,1\277R\323\223;\323\016\n\276\351j!>|1\025?\225\037\345<\240W\237=O\027\345\275t\256\027>\370<\307=\277\233\014\277\355\230\220\276\016\365)>\027\010\246=\343s.\276t\017O\275-\374\207\277\021k\017\277<\277t\274rL6?\t\237\247\275\301\372\254\276\226\206W?\270Y\252>\2420W\275\001Db\276\000=\033\276\2639N\275\022f\256\276+\240u\276\r^\212\276\211\332\211\275tx\303>Ic\243>\327\306\362\275\215\350`>%D\307\276\013_\264>Z\222\246>\334/\220>\013\2127\275\263\000\326\276d\256\253?\300S\267\2768^\t>\303\355\342\275S\255\236\276\244#\027\276%(\035\277(\265\227?\362yv=\364\253\314>g\317\267?Z\033\n\276.\377\223\277\327\306\264>\277\320\367>\336\347f\276\n\277[@\356\020O?tw\352?\237.\017>\022\321\267\276)KM\276T~L?(\034\260<\212\211l>\317;\010?Z\207\007>\330\355\222>[\023\314>\321\034R\276c\336\302>\032\217\234?#%K\277y\2515\276\260\025\276?\226i\325?TX\330>\0208(\274pM\345= *\363;\200\354[=\376sI\276\216\307A>>\261\022\276N\267\344\275\306>O\277&\"M>\361\031\261\277p\014\214>K4\252?\202P\026>\006\361\007?\006\311\240\277q\303@\277V \323\276\303\024X<M\t5\274y\013\371\275\341\036\301>\317B\010?&*\333\276\377\272\216?226>\001?*?l`\030?\312l\350>j\374/?\316\366\365\276X\225\255\276\367S\340>\306\204y?\221_e?\312\342\254?\336\346\177\276_\276\024?\030\327\226\276\017\032\033?_h\250\300\377\373Z\277\346{\026\277\313i\222\277\010\272\010\276\237\217?\275\3142\204\276q\341\257\276\223\304\357\275q\362\025\27733\003\277U\363\277\275\031%\364=s:!\277\320\342\231\276@\364\036>\007r`\276z7\254>\017\224\001?\014\001\256=J\010\376>U.\243\276\'\216y>\360`\337\274\227\022\007?gx\221?\231\273~?\001\324\331>\376\270\211\276\276\274\'>m\311\215>\305\243\204??=\240=\007\367\205\276\214K\224>S7\032\277\303\244\250=\177d\267\275\354\240\t\276-[\202\276\331\3334\275\226qj\276#\253H\276\001\210\210\276 lR\276\245\317\231\276\347$\025\277dZV>{\371\376>\003\337\300>c\177\025?\023$\344>[\205\254\276\205r\227?{\376\032\276\342\177\273=C\200\367\275\365-\026?TU\r@Q\"\034\276\365\332\212>\\\325\002@E\222/?\206\020L\277\245\336\005\277\363\355\"\277\010\016\360>\374\277\025\300Z\367\236\276\265\207\301\277s\035e\277\026M\252\274\266\275E\300\222*\031>\265A\006?\252\336\234=\204\351\335>\331\200\275>=G+\277\266\271\033\277\t\004\264\274\241\370V?|\302K\277\202.\247=\335:J\274\335\265c?;\207I>\261#\323>`\201\202=t\037\237\275\370#\020>\276\0138>d\323\003=@\371D\275\020V\200=\350\030C\276\237\n\013?1\353c\276?\330\305\276\002\310\022>Ew5?\320\310\213>\210\031\360>\234\240\361>m\301\200\276\352\277\270=\232\375s>\032Uw=\024i\001\277K\006\226<P\037m?\353\365f>\3525H?\244O\213>?\267<>\370Yy>S\257\013?,\010j>}\2319\274\202T\222\276S{!\276\237\353\317>\272P\255>\2756\335>\024I\376\272\210\362r<\254-\000?\014)|>\201\367\223?\244U\346\276t\250\205\276\220e\264?\275\2048>z\0171>\363y\022>\326`0>!\362\005\276\214\305\224=\001\231\022>\350\324\020>\n\332\r?\267g\267>\307\000\322=\205\271\035\277\305\315\210\276\247\302?>\020fQ\275\365\302\017>h%\376=J[\r?E\022\353>U\014\177=\376\305\311\275\266P2;4\363\035\276\351\240_>;\035\324\276\362X\253\275\375|\333\275\003\232\010?\242X\230\276\231\354\023?\327\314\243\277Z\2318>\243|[\276d)\333=P\317\001\277.\370\240>&\250\351=\330:\356=\306\331S\276L*\023?\275R\">\010\266\234\2759\376\330\274\270\\\211\277\216\204\242\276\255{\304\276q\244\207>\211\367\202\277^\314\177\277L\247V>\262Ng\276o\355\355\274\203Q,\276N\330\233>\351\002\033?4\010\370\275\022<*\274*{~?Ep7>\r\205\243\277\241\200m>X\255\032?\250O&>i\274-?*K:? 2\271?:\304b?\305\233\022?M\352\301\276\001\206\330\275#\201\240\276\225\250\265>T\367\232\276\020\214\000\277\322\023\002?\314#E>\262\0066>\333\032[\277\344\021\200\276A\033T?ZP\\\276\207s\027\276\337\017\035\277c\304\316\276d\230\003=\t\0045\27669C\276\"\347M>\254\t\345=K\265\276\275\004\221\241\275\000\211\007;<z\377\276!7=\276-\004\205?\357\000\322\275\262B\375\277R?H\276\025c\350=\242\021\020>\2722:>\2105v\276\255\200\256><\245\203>\002\361\036>>2O>\272z9\275(\315c>\240/\205\276\331 \312;\262`8\275\004a\317\274zW\212\276\267TO>\332\243d?\317z\324>\337\327\035?3\026\204=Qd\325>\203c\243>=m\254\275\036\222(?\"\201\026?^\021\036?m\377\230\3004\217x\277\313\324\310=\354ed\274\364\370\360\275+\177\303\275\247tY\277 \0107>\233uk=\036\021\344\276m\313f\275\303G\256\276e+\001\277\021P\206\274\220\022\207>\\g\256\276O\016<\276\374\251_>\202\322\222=m\200\030?\271\3425>\272\351s\277\377\331\351\275\372+\301>s\255\032?\320m\352?:\236,?\304\022\377>\271\341\271>\251b\227>\306/\343\275\\\006D\277\277\230\036<\212\233\272\275\337\364\214>e\330c>\356D\'>\231P\033\277\241.\270\276*\006l\277\205\026\'>\240r\325\276q)\254>\025g\026?\324f\372=\352\025\314\276\244\2042>\"\225\230\277\305d\226>\341\270\\\277G\341\347\2761\222Z?u\"\202?b0\221\277\237\243\265=\200x\'>Ib2\276\204\332\026\276\021\327\007?\327\247\317=H\027\250>\320Pt\277f\355\365\276>e\202?\036\311\010\275\032\032\004?\206\323\205\276s\356\'\275\310\224B?\037\331\360?\335\202\014?\372\363\256\275\033^\227\276\331\270A>\253\322+\276\000nu=2\3178?\245\261\014\277\356\014\036>\366\206&?\276\213\204\274]$\034\277\272\241~?$\")>\233\0013\276zd\343>n\030\216?\216c`\2778\375\256=06\r\275\344\245M\2768n9\276`\236\331\273\020Q3>\260\201\315=\204\034\t>\243\005\233\276\344P\341=\377\240\">]\315z>\230Jf?.Y\036\277lB\354=\241\337\372>i?%\277|\020\203>\224T\256\276p\225w=\354qZ>\361:z>\330\034@\276\265\224)?r\217\267>d\205\357\275/T\304>\360\366&\275\022B\207=8|\013=\206\030\036>a\022#\276\247\246~\276\316\260\301>\000@\213\276\036~\002?\341\223\346>\026\006\307\275\357\\\001\2768\316+\277\377\305\256?\324\303\261\277 \266\n\277\356\025\343\275\341E\373=\275\346;\277S\t\310\276\240\037\014\277\251\245U\276s\205[\276^\313\265\274CT3?\262\301\303\275T\037\317\275\262u\234>%\3403\276\005|\306<\024<\232=A\354\031\275o\372\033?\341\263\337>\360O|=\370\362\214\276E\000\327\275\311\371\372>*X\006=(\373G?g\270\023\276a7\230\276\001\302\302=\267\0035?\024T\376\276\244\303l>\0009\313\274\370X\235=\360W\\?q\2517>\220P\240=w*\241>\377U\221>\315OO>\232`\304\276\226\266\022\275\372\354\324\276\307\307\373=\004W\030>.\360\000\277\334\313\205\276\274\224\260\276no\306\275\373\010\267\276\"\225\265\276\224\214\246>\363\373\360=,\013\r\276\014=\216>\204E\210<`|\320\275\264\327v\276D+\031={\022\275\276\025\016\227\277p\353\277\276\224\313#?q|9?\261\316\223>7i\307<z\346p>c\324h\274\276i\264\276\n\320\302\276\376\342\022?Eug>\212\007\206>0\305\301<\306$\263>n\273\021\277z\037\304=iiR?\346\336\230=\030\316\022\276,=M\277J\367\022?\372+\212>\0079\276\274\336E\314>\275#]\276\257i\016=\270\356}=\370,+=\3470\350\275\310H\337\274H\001\273=\220\3706\274\000k#>\354l\211\275"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "r\035\204>\2759\337?\341\273\236?\265\221&?:.\236\276W\375\027?JX\251\276\364W\326?\352\241\254?\031\2279>\013\311\r?\372\014!<\003\004\351\275\363?\234\2769W\202?\263\235T>\263Da\276F\333\031\276k\010\005@\010\263\245\276\221!X\276\026`8>V\313I\300\031\273\272>\335\271\360>\313b\'?#N\247>\246\362+\276\205\214\353>\027\311&?\217i/\277\265\352\367>B\255\374\300\225\304(\276s1\351?\373\214M?\253\274x;\022\270`?\237\210\237\277\300\220\206>{\016\007\275{\355\213>\305\007/\275\020[\210?\240\004\235?\244\307n?0\355\003\277\275@\202>\035:\237\275^2\266>\300[\277>o\036\003\276\332\217`\277\341\001\302>\207\337T>\303\013\r\275\020\363\007?\234\214/\277\345\017\325>R\212\252\276Ln\241\277\336/+?\020\000\215?c\263\234\277\220@\204\276\275\032\352>a\007\304\277-\214\367>\357t\357>\317;\347>\347\266\251?\006\202\'?\212?\005?Mc\271?D\000\201\274\326\256!\277Tr\350\275K\032\244?@\243\224\276\203\352t\277NS+>\317\376\272>3\177\220?\010\036\177\277\224\233\003\277\3267\337?GG\377\274f\343\256?_\031\027\275o\204K>\\\360>?2\247\231<\246\0337\277\234\206\256\277\276>\267?<\316^\277\007gK?{b$\276\351\351\276\275Eb\215\300u/\213?m\264\250\277UW&?m\347\232\277\302\300{\277\201\223\276?\327\006\024?\237\273k\277\371\300\263?\301\024\212=Q\243G\277?;\222\276\230\275\265\274\256\237\273\276 T\025?\tK\264\276\250\223s\275*\006\334\277T\373\203\277qVp\277\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\365\371#?-x:>\315;p?\007e\310\276\006\244\n\277\004\217\362=?\226\251>\237\225\367>U\030\235>Zj\327=w\212\025?\212R\333>b\320\222>\265\371d=\003\2015>\0305O>A\333\220\274\260V\350>\203\336\302>\224cZ\277\357\350\222=\261\232O>>\273:?\253\233\340>k\035\001?\261\'\334>\264Qq\277X\3051\276\366A\206>\334&G?d\002\035?\312]\032?Nu\342>\243o\034>\267\350\253\275k0\033?\254\207\002\277\3568E?*\216\332>\000\306c>\350\037\324\275*v\211=A\177\037=/js>\257U\227\275\225O\350<w?\272=\374\016\225>5C\004\276\016\262\267>\3756\243\276\257\367\336\2756\365\340=Q\266\230>\004\016\020?\364\2664?\345\321\010\276\"\341T\277\312\371\325>O\000\321?\375\336f>uA{\274\375\373\250\276\362\255{=\\{\034\277 \003\307\275cyS\277F\254\224=\373\205e>W#\227\276\245\347/>\'\243\346=\203\350!\277*\246\320;L\244$>\326\017\332>X\252t\276@\302\247=J5:?\263\317\177>\001\203\004\275!zF?\010\246\031?\rCV>\353\254\021\277\267{\275>\363\320\250>Nt\214\276\033\010\006?\304\347\000>\362\370\224\276$>\272\275\301\235x?\350\010A?\352\314\203\275\347\264\234=\205^\344>\244w\300=D\237\342\276\223\327\206>.h\273\273\316cZ\274\212`;?>\312!?>\310\002>?\265\377>\3529\371\275\366\255\006?\017\257\275=\314R\262>\030_\270=\354^U\276*\353\002?\204\020\361>\241\"\263\276$~->y\177\361\276a\343\306>\331X\325>\373\376\016?\254\356w\277\326n\235?\'L\220\276\213O\033?\201O\366\275s\262\037\277\204>)\276l\220\t?W\345\261>\333/;=\\\215W\275\344oZ\276\243n;>\235B\032>\261\246L>\231bQ>\006\354\374>\252\244E\276\233\261\303>]\230\201>\333\004S\276\005\211\230>\317\323\003\276w\302\316\275\205\333\243\276*\301\350>\025i\223\276Y\356\254>sQm\276\325\256(?\312)\024\276b\023\031\276\250\202\227\277\014\253\366=\327^)\277\230\335\373>\0223\315>\310\025\363>s_\034\276\257\372]\276\206\324\363>L\275\013\276\231\231!\277\007\007\364>\301Qz>YR\277> \376\360\274\365n2=\345\302I\276\005\326\312>\035\323\203\276!\2265\277_\316\337=\370\3430>\\Tv?\026\372\244\275A\315\205\276L\253\020?2\212\233>f\304\000?\245\331\024\276\345\302\256\275\363\352\251\276\202\004\226\275M\335c?\375\310\220=\212\214m?\370\360\303\277\224\310\307\276Si1\276\3204\314?\250i\245>\316\003B\277h}\001\277\275U\261>\245Yb>\262\303o\275\017\365\032\277\210\022N>\372\334\252\275\233\016\006\277\'\316!?\307C\000?i\001\343=\255!*>0\0075>\224\352\366\275\222=@\277\254\303\266=\343\314\275<q\275\216\276la\230>\277\357\363\276\370W$\276\315WR?\253\215\230>\025\206\305\276\315\215D=\010\316\304>4\'\032\276\370\223L\274\0134\r\277y\027\325\275YD%\276a\212l\275\002\020\033?\326\2667\276\266\254\\=_\276X={\242\246\275\365\243*\277\025,\227>\362\216\315>\257\234p>x\233\006?!k\204\275\244Y\212;\252\253\352\276O+\004\275Ve\200\276\217IQ>O\364\341=\\\213\304>\'\3702\276\247\331\326\276\261\010\251\275\211\243R\276yL<>\346\236\034\300\344\320I\275\211\203\036>RLn\276\375,\227=#\035.?\207\035\036\277\035&t\276g\t\254\273\016\025\224;<\240 \277\215G\243\276P\201\333\275`\034\316>_B\343>\327\245\325>(k\324=\276`\276>U\250\014<;\316\002\277\363\274\">\232=\337>f\2121>@\321\r>\214\2506>\256\016\\\276\304\033\346\275\317\2118=\364\2212>/,\234=\254\244\343=\377X\020>Q\277\016\277~\035c>\276\"7\277WR\326\276\365K\236=No\236?]M\272>\322u\236>\rw\372\275^o\274>#]\022\273\243\022\017\275\270\220\213\274m\\\232>\265\222:>\222V\177\275\350\3548?!fc\276w\023K\277\010#\223\275X\265\300>\254\341\231>\241\270!\277\3346/?#\215f\276\251u9\2757\336\224>\356<\247\275&\010\243><E\021=\025[U>\033z\250\275\034\303\"?\323\264\331\275\351u)?/[\014?!\035\213\277\211\304\033?70\363\276q\223\237\277/U\020?\205I\225>\\u\007?\272}P>\262N\215>\016bW\273\215=\314\275O(\t<\253\206\032\276:I\277:\026\007\204>\250\0279\276\232\2041\277\235\331.\275\251\372\001?\220\340L>\363[H=p\254\341\275i\215D\274\266\rs\276\262\244[?\222\027M\275\223 \027\277\304\320D>\017\210\\\275\343;$?\030\236\034?#\347#\2779\037\027>1\344\325>\354\256\343\273\034\020\256\276\300\206\\>\300\006(\276J4B\274\344<\257=\214\351\227\274%9\273\275\373Tj>\245\202\210>\353\366\263\274\340\320\234\275\373]\264>x\344\325=\316\363\013\275.\225}=\033\250V\276#i\007?\324M0>\217\ti>\024\003\207\275\244\264\024\277\243\006\357=\330\214\233\276/\334\335>[\276\013?\302,\021\274\030\027\022?\272B\366>\025u\326\277`\'\275>\216#\303=\247\330o\276\240Y\023>jb\224>\037\212p\276\274\230\375>\351\221\010?(Y\364\276zs\327=\034\303\023?laz\276\0075\005\277r\321\347\276j\311\214=j!\307\275\214\262\356\276\032.\343\276\347pF\277^&C>\306.\252>\320>j>\244\256\211>\267n\'\276S\340\305\276\347\312\204=\016x^\277aJP=\345\0023\275\300n\274=\242!\205>\035\254\312>\360\300?=\021\\\302>\344\233M\277/\224k?\237\0218\276i\037\005?\231\270\n\276\317\251\255>\222\000F\276\301\207%?\226\333\003\277\277U\263\276\216\031)\2766@\034>\251\255g?\334\234\357\275\036\224{>\316\305\372\276\030\226\237\276\233\244\246=\320\2760?\306\344\222\276\006\247\365<\372\354l\275\316r\302>~5\366\275\256T3\2767E\222>\243%\002\276/F\304>+\251\356>\304\311\333\275i%\021=\247\377v\276\252\007+>wV\212=n\235\\<Y(\321\276\230\273R\275\231\306\321?QK?\276\250C\013\277\210BE\276\263\336\207>|\254\200\274<\334\220>\331,\007\277\344\217\271=\331cI\276?vM>\217\217\311\275\200\266\367\275\263a\001?\373\364\006?W\202\302\276\320_^\2758,\307\275Y\226-\276y,\324\275\322X\271=\223\006\200>^\025\226>t@<<\360\343\263>|\314\242<\264\004\'\275[\247\301\276\025\\\320>O$\205\275\\dR>\362?/?\"`\236\276\235C~>J\250\222>\023\027\373\276\311\322\227>l\267\210><\233\n?^\000\277>}H4\276\241\211\233\2747,h\276}r\350\276\312\333\207\276\357-\353\276\357\363j>\3325\342>\307\372)\274\202\2626?\247\232\241\276\215t\\\2777\316\233\276e2\005\300CN]>u\016\017>\224\316\376\275\251\353^\275D(\315\276\316K_\277\205\362\220\276!\300/<\256\033\027\277\314A\370\276.Wj>x\177\217>\302a\263\275\210-\t=\213\320\215>\3507X>\225\247%\276k\304H>\220\025\214>\336\033\266\275\013\034\237\276\223\302\247>\2460p=_`\325>{\037*\275\275\244g>M\344\277>\010g\364\275\270\213\355>\3611\244<\203}\330\276\345\\\330\276y\311j>W\342\201\276\305\364?>e\235\347=\2109\023\277\314\306M\275nq\352\276 64>\034\374\225\274\310\\\010?\231\017&>\364\313\333>\212Wu\276B-\313\275)\0040\277f\212t>\253\341\345=5 \334=\010\030\001\276\020F\224>\035\323\206\275&G\312\276\324\\\223>\334g\036;Z#R\276t\311\216>m\371\214\276\372\342\004?\362\"\"\277\274\372\277=\200\231\227>e\206:?\027\273\303\275\254\204\004\277.\036D\275\230\r\243=\241\3533>%\245\365:)\237!\277"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "9\352\321>\245&\355>\036\352@>\037\234\350\275\000<\037>v\256v>\312;w>\027\362\037\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\223\030C>\340\032\323\276\026*\275\275\005WQ\274G\343\210\276P\352\371\276|y\222\276>\225\021?&\026\000=\374v \277\002/\253\276;\355(>\362\256\006\276\211\244.\276\240!$>\'b\250=?\242+\277\010\270\275>\321>c;\346\301\211>\252\302\265=\202P\241\275(\036|\276\343>\016?\025\226\264>\345hB\276>t\020\277T\322\357\276\374p\225\276\363\245\002\277I`\021>\204\227Y?\034\315\320>\323/\010>\232 \200\276(*\241\276\344\260\372\276C\363+>\203\356\320\2761\005\014?z\356\217\276\371,\231\276J6\013>\277|\324\276\332j]\276\274\257\222>\3548\r\275\324f\334>\017\264\210\276i\023c<h\315K><>\000\277\032\\a\274\370\333\341\276T\013\221=\220\227)?c\"\373=Sn\204\275\024\311\255\276@8\361\276]\373\025=\374\'O\276\346\257\003\277\221\266\214>\r\343\223\276/\nl>\363\350\224\276\273\340v\276(\247\353>\343\333\224\275o\232h\276\370;\025>"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.16633617877960205
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
