node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_0/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        tensor_content: "\366\274\330\276?<\365>M\336\314\276\374\347;\276\255\251\'\277v9\232\276\220\370\263>\222\0358>\001\356\022>uh\007\276\332\263\216>\331\265\247?\211\371\215\275\346\204\026\277\037\013h>\275\240\227>\363\002\250>\243\320\032=\337\006%\275.\n\254>\316 H\275\340\223\'>t\000\302\276R\242\333>*\230\311=\353\252\024<\022\001;=B\"d\275\207}\261\276\372\216f>\203\203\252=\215:\003>\321r\332=,\032\252>\201G\257>\030G\362<2\213\375>\264\253\315\276\024\217\205>5\233\234>\261\325x\275\353G\270>o\374\214\274h\033(\276s\231\\>\302\272`>\257\267\022?oH\253\276\030\246%\274\326\031-\276\345\362\342<\361\212\274>7>\244\2767\310t>\200n\013\276\335\376\224\2746?\340\276\010C\260>Om\034\274\362=\200\275\204\306\241\275c\344\020\275\273\230V=\337\254\225>N\014\245\276\200\327\032?\362\346\302\276\244\253:\276\r\323\304\275\222<4>\003\344d>\325\266\032=(&h\276/\367J>\016\246\347\274\213n\250=\332*\024?^|\200\276<\027\311>\355\242\200\276\323\271d>\263x\265<C\342b>\234\314\223\275\217\375O\276\221L\026=\021r\336\275\334\271\027\276L`\002=\000uk\276\310\245\240=\027\326o\276\301\270\346\275[@:\276P3]\276\3735 >;\244E>\350\021\327>\207-\333\276\013\"\010\276E\016\035\276u\317\324\276\356I\371>\263\013\255>\270w\242\276w\276\231>~e\246>\0206\t?S\\\n?v\246\360>\206\031=\276m,H\274\225fx\276;}\001?S\242\212\275k \317\276\355\304\345>\\Vi\274$\021,\2766*\245>\244@4>\027m5>6\226\376\275\355\354\263>T\306\371<\214|\301=I\364\025\276xK\257>\003p)=1\372\001?\307\024\">0\237\311\276\361w]>\214\346\221\276\352PM>\t\255$\275W\277\314\275oP\372>x\004\202\276\204\2009>\206/g>\022\352\010?\217\316\037>\346\234r>O\266\035\276q\275\345>\014\2363\276\305\322M\275\252\307\374>!\351\001\276\004\377\212\276z\264|>J\026\205\276\013\336\314>?\217\325=\231p\270>^f\342>dY\354>$\210\227\275\253\326\312\276\271?H<\216\303\210\276\206\352\021>\276Q\276>\213?\200\276\355V\343>\224?Z\276\305\343{\276\224\263\250>9h\000\276\023\360\264\276\266\356\314\276\244c\240>X\227\252==l\230>\002\274(>\r\244\266>[\243\212<J6d\276)\345H\276{Ok\275\2405\366\274!|\030\276\310\254\005>\240\021\027>\206Z\245>]\240\215\276\205\310\251=\006\"\206\276\2573\362=\346>\300\276\215P4>\345\365\030=e\371\020\276;\223Z>r\013\224\276\325\216\325?\243\013\321\273\270\325\216?Y\370\255?t\235\301>\205CS?o\024\362?\367\242\021?\230\313\206\276K\362H>\026\330\256?\370\301\342\276\304\261\241\275\262\252\006?\227\226\255=\250\026S\275\036\036\273=f#\277\276\341\332x\276t\356\331>\353\225\270=3&B\276`\343l>\017\317J>\025\224\003?5\263H\275IT\216\276\252O\202>f\246\253>~n0>\265\225\316\275[\273\316\275\206\\\334\274SC=<#\257U>Z\331\224=\207\203\331\276\234d\373=9^\001?\351/\201>\322\201\265>@\304\024?O`\335>n\211\231>\031\307=\276\020M\027?\256\036\301>\367\320\362\274%*J\274yGi=\354\031\232=W%\216\276\210\332\211=\340\267\031=\273K\337\275\267\205\342>\274\267\000?\240\346\216>o/o\276<P\326\276"
      }
    }
  }
}
node {
  name: "decoder/de_dense_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "#\207\006\275\210\206\022>\202,\215\273T\314\345\274\224G\r>\215\362\346<\207;\205=\360\016\360=\275\324\302\274\037\366\371=\202\327*>\327\373\313=\321I\017>\266\0371>\235\360\375=\016\205^\275"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
        tensor_content: "O.h>\356\260\034\276\266\341o>\207\224i\275\363\"\236>\321nZ=\365\251R\276H\261\363\275\231\035\007\276\266|k\276\035\263\203\276\340;\302\275\356\006X>s\022e\276\311\206%\276!\343\215>\001\250\004\276\260\200A>\316\327\347\275\320\267\030\276\272\002\375\275\315\343W>\006\355\035>\262\214\337\275\023<\273\275t\257H\276\235\323\362=\300\344\273\274\372\224\363\275\036y3\276\000\nx=\017v\224\276\336vB\276<\260\002\275\245K\233=\311\323\317\274^v@>\265\362W>\340\331\217<\026y\217\275b\016\226\276\177\017\374\275xaS\275s\001\235>\2778U\276,\351m>6\367\330\275\310p\330\275\023\374\274\2757#\006\276M\261\n=\236\031\002>\345\304\021>\036\217\323\275\246\030G\276\326a\201\276\021\241V\276\000,\227\276\234N\313\275!\016\263\274\220\316l\275\"\216\202\275\364\365\014\275\346l6>#\342k>\360\007\305>\001N\331\275\211\014\324=8^\203\275\253\315Z>jz->i\010\226>N\324*\275b\276\225>M\243s>\237\345M=\200\254\346=W\021\254>/%\335<R^e>\3639\211\276\344\275\231\274o\024\264>\367\226m=\277\220\323\276Ac\234>3\370E\276\272\325\332=\234\211\023\276\023\"\333>\353\034\r<\346\370\037\277\022O^\274\243-\200=7A@>\325`\206\276\201\251\215\276 q\260=nB\023>(Y\266>XZ\353\274Q{\r>\362\"X\276\231]>\275Dm?\275\376\373g\276\2345\243\274\004a\353\274>\345\222><q\217=\256<2\276\320\222v>\300\362\261\276\360\235\236>\0365\006>H\376\300>_\227\273>\334;8>\224\233\201\2768T\311=\260pA=&\260W\276\205\217\343\274n\364R\276)=\004\276D9\326=\264j.>\244OJ>\244H`>\217\233\255>\016\020\203>\016G0>]\267\322\274O`E\276\033\3526=\243\014N\2763X\303<l#:\276f\316\313\275\357eK\275B\317\201\276\305\256Z\276lG]\276\330\323E>\263c\206\274\304\231E\276h\\Y\276j\357\262\275\001\257B\276!\024\210=NP\205\276\375\013\007>\321\242\037\276\263\030\344\275\330\232.\275\nS\212=\200\216\220=\316p!=>\337\247=B\326B>\034\367\225\275j\316\024\275\200\2137>\r\213\214>.\324V>\232f\030\276E\211\213\276\370e|\276\311\024H=UW\030>\274\256G>\310\351m\275\272\237I\276\343\376f\276R\265\203>\213\223C\276\251\256C>\217\222\031\276\302\3111\275\313\327\202>?)\232>2&\026>C@\'\276p\001\316\275{\212g>\357n\006>UdR\276\025,?\276\374\026\304<x\321\n\275,S\354=\273\375R\276\232J\311=\215\306\266\275]\370\376=\353\002\244\275r\255\354=<\331\021>\205y\232\275D8\010\276\332\3268>/j\347=\031\321`\276\220\265-\276\215.s\273\231\267.>\272\337f\276\226\270\244\275\024sn\276\305.\">\212DO\276\010\245\205\275@\216\217\274\342^\004\276R\360\332\275\322\304\340<fi~\276\272\216/\276|\3544>q\261\211>\314&Q>\t\361\224=?\370F>\246\254\035\276(\303;\276GIe\276\210\265\362\275qQ\001\2763\223Q\275\203\346\352=\315|<\276\271\307\366\275\313\023\253<\340\240R\275\355E\017>m\236K\276k\005p\276\020\002{\275:\242\000>|\355\201>+9\211\276\340\341\301=\354\364\276= R\000\275\257\226\010>\316*\r>`\272O<\370h|>s\030 >b\227\211\276t\314\340;fL]>!fR\276p\264\363=@\004H=0|@>$\264\014\276\344X\000<\201m\350>\361\315\243>\2243\036?\352\330\027?G0\273\276@\341n>\324W\226\276\022 )?@j\177=\017\262(<\257g\264\276\020\353B>(\212\375>I=\013?\322\035:\276;`>\275\001O\240=\236#O<\352\205\\?\034q\370>\010\311\033>\362P\016>H\333\323\2744aW>\237\341;\275\032\367\336>\243\277\240=w\017\022\275\213\005\313=\242\037V\276`Q6\276w8\256=]\034\204>#\006\r\276\265L\254<O%\001\276\277gM\276Fr.\276\264\026Q\276x\320B<\244\214\n?\035l\333=\241q\213=$\306E\276\242\330J>\302\376\013>\354\366;=\275\222\r>\014wm>\201\374@<f\353\370\274\\\335o>\372\352\301\275\324\\K\276\211\251y>\353et\275\347X\"\276\005\242Q>\n\331D\276\036\033\\>\230\'\246=\032\277\263\2757(\242=\356\014\362\275\256\022\341\275a\365.>\342\266\225<\224\316\037\276z=\205\275\363zI=\266\227&\275(!m\276\346h`\276\353\215\242\274\263\352f=;\030<>\256\217\374\275\\\250\353=\311\013e>5\242\006\276\335\016\023\2750\301\300=\314\242\257=\031\025\275\274\022\251\026\276R\'\226\275z\333T\276?\372I\276H\023\034\275V\3433>\347%L>\277\253+>\361yA\275\341D+=\304\225\305\275\364\t(\276\004Q\021>\334\241\320\275Wg\245>\325\036\317\275\020\002w=(\217\010>\017\007\207\275\251q\327\272\021\232\022\275H\032\033\276\t\226?>\320\200D=\230\3563>\364k\204>\371x\031\2766\017\027\275\t\221\264=\000E\213>F\031\326=^\373\261\275Dli>\231\337\026\276\374\007o\276\357\214\267=\320\n]\276g\253Y\275?\324\265<\222l.>\344\236\242\275\300\207i>Z\225\n<\315?)>>M\214<\325P\342>m\207\360=\220,\364\274\277\374X>\253\343\322\275\312\275L\276\266I$>[\357\322\2750O\r>\323BA=\311\336\314>C\340\366=U]P>^\303B\2768\304\253>\361\344\275=\324\257<>\027\037\261>]7\225>d\330\213\275.(\024>\246\020_>\022\204\254>_(\021\276\365\013>\275\301{N\275\354\374`\276\361wZ\276\270 \206<\232h[\2757\354\227\275\376P\001>S\271\320=1\265\307>l\301G\276\275e~\276\325\327B>\325k=<\265\362\213=\211\332c>J\264T>\312\232\260>]\023\212\276\212\362P>\270\263\251=\310\007\024>/\356F:\220\342]>?\000L=\214\341M>\020\023\205\276WA>\276\302%X>r\t\264\275\242\203c\275\243C^>\250\000\204\2760\315g\276\356D0>p`\315\275lvo>QZ\365>\305\274\211<\273\206\337;\314\376\356\273\223\312D>\323\252\352>k>u>\242\355~>N\2728\276\n\362\226>Y\200#>\325)\201\276o(?\276\214\215\275>$\224\321>_\300A>u/\213\276\364\247\033=D\035!\272\257y\017<@R\340>\356\213\\=m\002\027\276CB\246>\320\320\r>86\261\275\361\317\314\275&\240\347>9\363\007>8\275\023=B\247\001=\332\315\254=\035\217G\276\304Jg>\250\364\341>M\215!\276\373\232\335>\270q\321\275\371\r\347\275\256u\361:\007\017N\276\201\337\354=ILe>^\377\325>\211l\206\275p\3440\276.\352\333\275\220:\016>\371\337\270>\336.\326>\254T\265\275Z8S\275\201@\004\273d\226\332=t\032\207=\030\322:\276\244\302\220\276\030\367\204\275:\343\231\275:\273<\274\374\026\201\275\014\233\227=J\034\236\275\314\201\201>\240\337e>*\271P\276\203\024V>\346\212\024\276\256UK>\322\306\370<j\265n>\374\345\306<\365@w\276:\246\341<-\361!\276\366\253\033\274\201#\213=\360\221$>\307\272\203\274\250\024z>\336\241\n\275\354\345\362=\302\372\016\276=\273;<\215\017\274=&\007?\275G\244W>6\021x=\2621\216\276<\206\r\276\235f!\276\340\307l\276\365\211\007>\241\240\010=W:4>\276\022\022\276\033\3737\276\225\"V\276\235B\">yc\340\273\257+x;ZN\014>\366\222r\276\311\337Q\276pfs>\253\275\204\276f\023~\276w\231f>]\263><\316DV\276\354\274W\275J\003E>\006\1774>\274\215\031\276\337\030\346\275~\243I\276\235\025\330<`)\177>\000\307\275=\334\265\331=\3204\006\276\307\255b>\312<\205\276\016\274N>\210\367!>\331\214c\276\274\320\035>\240\216B>\240f\275>\260N\007>\035V\307>\363\024\353=\026S\275>/\276\273>Z\310\347=\003 w>\303\210\306\275\200\217\257=\334\334&\276\327v!\276\016\233)\275\341\357\2509Z\232\200<\033\250\205<\337I\030>\213\271\204>\220B\005>\013\316\205\276\376\002*?_\314%>\221/_\276G_\313>\373\277\r>\263v\230=g\334L>\316\330\021\276Z`\036>\'A\353;0\351\r>n\022A\276\344\323y\276\332\010\307>\212\250\233>\370\017%\275\212\\\274\275\373\250K>pB\255\274\344\223q=]p\210\276r\270\201\276\257\354\n>\242\360o>\223\325`=\246_\357\275B\333\332\2750\325)\275Q\010e\275k\273\023=\225\225a=C\331\315\275\316\007\310=\364\t\034> `\322\275\\,\005\276b\032\354\273\023k =\340\224J\274\236\322p\276\210\267\003<\300\213Q\275n\252\277\275f\035t\2769\"\265=%\330\345=:{\356>F\370\016>\247Q\307<Vp\013\276\222\3708?5\314w>\027\027\347\275\271~\333>m\035E>X\300><b\3213<\201\363\004?yxJ>\001s]>\326\376K\276\230\322\260=\222d/>\273\345\364=\244\030\364>CBY\275\211\275\214=\370n5>X\375Y>Ee\260>\340\336\"\2754%\034?\336l\031=bI\035\274\037\273\201>\351.\001\2765\277R>\360\026\336>\311\341\004?\327\341\273=\333\307\336>mV\304\275\214\371~>\246\342\247=Q\271\322\275\371B\276\274[\237\024\274o\265\001?l\256*>\202U\213>\377\305a\276\250Ma=\357\205)?\377\031t;\361!\263\275\206J\367>\315\211o>@\303\204;\234G\240\275pI\344<\363\322\002\276\335\')>\255?/\276\036`T>0)(\276\270\\\310\274\254\227%\276\362\202\035\276Q\237\016?\265x=?\317\272H=\301S\r?\336\253\367=Z\272\366\275\222\004\r?\272mN=a\201\364=\306\216h\276s?\267\276\016j\330<\201\326#>\246\007\235>\001\372\004\275\363\354\'>\271t\216<\240\251\241<\333\334\365>\010+O=\264\222\344\275K\207\034=Y\341\007\275\331\266\004?Q\220j>eOa>\251\033\200\276\330C\023\276\257\002\344>h\256\017>\003A\215>\327F\347=\3625\027>\t\272\033>\326\252\321>\323\341\240\2760\t{>\330+\023>\334\266\365\275\265\313t\276\221c-\276\000\352:\276[\270\330>KA\021>:\370o\275\000E\361=\376\332\237\275p\312\264<\024h\352=/\315\277>\355\275\036?\016\356\261>\332w\240>\256~*>\210\260_= 32>/\352\013\276\216c\350=_z\205\276G\220j\276\375(N>\324\231}>\350a\237=\020\017~>O\316]>l\'\245<(l\263=\242\225\t=,\346\220\275\331\300}>%\311\366\275F\222Q>(\203\372=\342\'==\315\310\226\274\253\237\004\276\304\2463\276\314\266,\275|\177\347=\340W\201=\206\216\311=\370@\217>\303\2502\275\307\014\223\276\257\246\342\276\323\231\247=TtO\276\363\260y>\323\222\212>\234\346;>\\\263\005\275\217\314\021\277N\321u>\000}|\276\n;\020\276F%*\276(\344\024=\370h\272>\257:7>)+\237>\266\024+>\300\036z>\014sO\276\006vh\276\376\000%>b9\n>\t\261\\>a\217?>\336z\201>\364+\364=\207*\207\276`&v\274\365\241\355\276Vq\271;\363.\201>]a\256>\373\304\340\275\264#\237=\344\244%\275\372\315\201>\316,.\276\351N\223\276a\355x\276\374i\334\275\367f\375<\371\310\210\276x\330&\276\300\013\003<\265\311\255><\334\037<\277\265\260<\275\020\240>\232\030\320>\022\003x>\254\252\245>&\250\332>F\377\r\276\273\324T>d\323\251\274\223\3115\276?\317\230\276\243\266(\276\326\325\300>]\205\201>\273\211\215\275\364\000f>/\334)\275\342\331\203\276\321\321\326>\230\250\210>\302\"\305=\332=\242\2759\266E>\026#\375=S_!\276\014\013$\276\267\316\322=\25048=5\313\000=\346+2\276x\201!=\243\242\034\273\035\303\220\274\312!\'>u>\003>\313z\217>\004\224\312=\336\250\226=\335\241\211\275\022\034\310<Sb\353=\367ZE>\311\202\235\275\220\214\302\274L\303=\276\030k\310\275E\026\000\277\313\226\301\275rSO>\353W\202\275a5\233>\024=[>\024\335\377\275rp\030>\211\257A\276g\021\366=\365\362$\276f\234\377\275\302\340\031>\032\370\365\275pTE>\231|>\276\240k\202\275_J\362\273]\375\264>\255G\360>\375r\322>\321#\207\275\027O]=\2515\364=\242\021R>R+\350>\225\311\223=\304\235,\276\334n\026>\232\036B<\237\375B>,P:=\303\206x;Z\322->\251\233*>1\263\007\276\3470\003?\374\202\217\274\267O\203\276%\313\250>U\301\260=\362\351\303>4\201\227\275\256\276\371>\334\336\270>2{\t\274\355s\2418s\\\260\275\324\364\245=\264s\330>-h\032>\337\354k>\315G\324\274\224 \264=\220\006;=\201\342W>\220\362\r=\025\331,\276\213\3223>=\002\235>\260\305{>\250 g\276\306!\355\275\312? \276\216QC?\200\006\200\275Wp\021>y\355\023>)\264|\273\265j\207\276`Kc\275H^\274\275\363\177f\275g:\362=\330s\200>\301\016\000\276\372\355\375\275&\240!>\260\266\214\275\200\016\363\273\2609\006\276\373^\005\276\205\3257\274\276<\n\2760K=\276\212\226$>\217W\224\274\317\331v=w\246^<\224o-\275\367\262\002=,\336T\276}\t\226\275bR\235\275\353\000I>\311i\033\276~h\352=\301+\204\2759yD=\375p\213\276Mx\277<0\324\360\274\275D\277\275\270\300\214\275&E\347<M,\004\276\241\225$\276g\232\r>N\035\204>uBl\272\202\217\030\276GN\376=\337w\331\274dv\217\275\272\263\231=\355A5\276\323.\251>\025.J>\256H:\276\245Y\330\275p\231o\275\374\344@=8X#=\020\005$\276\330&\372=vR\203\275\320\234\036\276@\260\210;\357\210V>\340]F>\211\333\276<\2138\312\275\256>\225=/\336|\276@\303\323\2742\276\206\275\347\240T>f/\206\275\024\214y=+\377\207\275\376.\004>n\003\373\275.R:>\340\230)<"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content: "\003:\340=\016!0>R\370\341=\021v\021>\037\325.>\272)(>U\237\212=\020\364\351=6\272 \275?\205\213=\376\247\236=\005C\213\274\206\320?\274N\332}=\3018\007>\027+->\036\270\257\274\255\336\222=\263`\344=16r\274\306p\234\276a\344p=4\000m\274\025\317\305=X$h\273\304\365\275=R\230\201\274IB)=M\266\361=Q%\263\274\346W\376\274\207\370\203\2744W\022\274Ns\364=\327\260\335=\226\372\263=\365\313\002>\n\'\224\274\242t\261\273j\372\262\274iJ6\275\242HH\274w\2557=\364\265\370= \302\305=\000\000\000\000\000\000\000\000\000\000\000\000I\247\354<J#\314=\352\377\244=B&\363=}J\340=\000\000\000\000\000\000\000\000\000\000\000\000\302;\363:\372\263\314\2749E\211\274\300\225\246\274/u\262\274\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\237\353\010\276\030A\237>\nq\027\277\023\275\261=\030\252\227\276\265\364@\276\036\340.\2779\003\336\276V\211\262>"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.09413964301347733
      }
    }
  }
}
node {
  name: "decoder/de_dense_0/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_0/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_0/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_0/MatMul"
  input: "decoder/de_dense_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_0/Relu"
  op: "Relu"
  input: "decoder/de_dense_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "decoder/de_dense_0/Relu"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_0/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_0/MatMul/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
