node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\354\250\320>\002-Q?%\300\r?\365-\376>\231{*\276\350(\361>\233gO\276\002F\013>\367\376\252>\033\211+\277\222.\n\2761\2453=\251>\210>y\345/>\256\351^\276\206\252v>\273\235\345\274\"\200\202>\303X\341\276\320t\217\275\032%\224=DJ\366\274\252\202\333\276mYd\275k\336\236?\023\254\325>\333\034\240?\377*\215=\365d\236\275\270L@?\0269`\275s\256c=6\023\266\276\256(\344\275;\',?u}\300\276\367\033X>\327\207\n>\236-\234>x\223T\277\372\316\351\275\370>\264=z\311\325>\033\370\316>_\026\004=\236\372\222=*\370\021=\363\252X>\257\2212\276\302[\357=\310\234\275\276\312\346\271>1\346\006\274\215\364\304>\272\226{\276\351\217\264\276\356.\201\276\027\341\324\276\245>\n>\325{a>q\222\025\277F\\\301>cO\302=\275x\307>V)b?\301\3060>5\324!>\355\333\254\276\n6\256<\246\256}>h\035u?\2768\377\276Y$\315>\236c\346>\266\337)\276\202m\013?\016\014<>\370\236\343=\253\265\203=k\242\220>\031\325\223\277\354\030P?O@\337\275d\371\227=\267\017\236\275\310O\304\277y\354\026?\205o\217\275\215\031/\277W]3?t\320\213\274\013)\245\277\367.\351\276\261\010d?\275\350\020\276p)t\276\266\246\001>p>\370\275Q\\\004?-\003\213=Gc[\276\366.\367>\213\026e?\r$*\277\266\277l\275\233\207U>\007E\344\275!\217\200=\212h\037>\026c\216\275\305ZU>\271XJ\277\337L\262?[_\022?M\275e?\372\372K?A\324W?V\272\212?\211>(\276\315\376\225=B\004!\276`\234I=\244F\027\275>\032\034>\210\034\013>r\224\235\275\240\365\371\273f\221/>\027V\327>\373\025;\277\242\204\250=\236$\212\275\2477o\276\225FI?\013F\267=\252\337\260\276\010\315\021>\342\355=?\311M\326>h\236\030>\275\314\233>\256\303\314=\221\271\016\276Ij\310>\002\017\036?1P\340\276<\347z=\200Q>>\177KK\275\277G\224>\214F\002\277\335Z]=\"\334w\277,\362\221>\346\343#?OV\360\275\221f\231?h\373\010=\00123\276\230\033\225\273]\351\207\277\300\232e=\347\034\252\276D\000\207\277\340#\360=\265\014\231\276)\263\225?\351r\025>\034,\207\276T\274\013\276,\350\014=\206\266F>2\331c=\203A\212=\371*\206\276\215\206#>[\246\207\276@\234\220>_q\n>\201Qa>\r\204\320\276\362\370\260\277\212{\220\275Ym+\274\313\324\'?@\274x<\222\230\312>Mt\253\274\004\014\033\277\355\355\216>\341\255M\276\200\306-?hV*>\327\2179\276\343yP>\2352\251\275tZ\364\275h3<?\266\215\224\276>\217Y?TpV<\233\227\213\276\276P\231>\264TV?\367\035]\276\216\204\265\276\336\352{\276:}\342\276\325\326m\277\227\312\277\276\307\010\002\275\315p\206\276\272\332\225\276Q\235\021>\347*\361\275\202\007\221=\200\204\201>\243\271\277>\357\224\360=\3666\221\276\005\027\037\276\252I\244\2770\213??\225\305h\276\n2\272\275:\343\310>e\024M\277\202\216\201<gIL?<$\355>7X\225>\243\204\213>b\005\333<S\253U\276\332A\237>\310\027\341\275\203\013\\\275\003^\210\276$\243^\276\037n\003?r\272\275>\000|\304\276\330\230I>_\245_?\350\307i?\031\322G\300\002:\005=\347cW\276.\273\224\275D\036\376\275\244\232\003\275\205J\261\275w\307\351\2750\232\343=\304\027\r=0\210\317=\341l\252\2740\212(\300\021\370\256\273\037u\355\275\032\271\203=\241\311/>[\'\245>\023\255\235\276\211\374\236\276\252\345|=\352\342\203>\342t\232\272\316\2155\271\\`\257=F\340\031=\nm_\276/2\216=\207P\325?\202\227\034?\226\005C\276\341\216@\276\306\371\326=\215p\031?\367\003\374>N\266\240?^\314o>\000\275\265=\'\014\360>j#\347=4G\225>\001W\207=\213\021L\275\010o\336\276+\0024=\205\356\226\276+3A\276:C\360\275\341\227\370=eAe>\001\257\023=\200\236I\276\253\324j=\034\332L>\247\273\320\274\232\233\005\276\242]\225\275\035\341\272\274\332N\212=\326\010{>\374\223\352<\256\335y\276\303o=>\215\000\234>\251(\211?s\023\220>+%Y\275\363\253n\275\\\360\313<2\304t>\254\261\270>\215\0008?.\317\300>\310\375\244=\326[\210?\233H\014\277\366\300\276\276c=\376<\303\224\030\277\224\022#>\341s\313=\262\353\317>\370a\317?\217|\312\275\313\025\006\276#\254^\275\230\177\207<\032&\205\275\000\333s>\374\317;\276\002\267\021>\247\235=\277hk\343=\356f^\276b\255.?\\\237M>\226\260\360?k\026\327\276\355k=\276\342\333H\275\222\264\332\275p\333\225\275}F\221\276*:C\276/M\243?\016dM?#\273\"\276\003,\200\276\376\331\331>5\375\210\2765qF\276\t\332U>\311\240\264=\314\t\317=~\333%?t\206\314\272\266\225&\274R\314h>\342!V>\365\220\305\276\357p\037@\341<\"\275\314\203W?\025e\363\276z\257\372\277;W\272>\240\346>?[\267\006\277\351\324T\277\353b\270=\304%\240=^\251!>N\030 \276rU9>\314U\036\275\266f\374\275\200^\232:\014\020,\275\031\243L\276JQ\245\275\270\207\\\277\211\214.?\020&\265>\031K\t?\336\207\031?\375\'M>\274v7>o\242\242\276\217\006\204\277,\277\004\277P\265p\276\317\237z>\210@\221>\177\243[>\2531\321\274\240\002\270>\35067?\357\323\023?\365\367\034>\360\307G\275;\200\343>Y\035\304\275\221f.?\336\250{?\212`\037?\342\264z?\000\205\001?\223\027y=@\261\034\277\317\353\231=\235\212\032\276\327\373;>T\3424\276AC\266=\272\302\241>\010o\231<.\365\325<\305\006i=\374\315\357\275v\264J\276N\343+>\324\336(?\377\340#?\243\356#\276\211\316\n\276\354\310\303>\232\373\273\276-\327\004=L\361\306\274UGa\276M`\304>\364(\253>\n\327O?\356\201\340=w\335T\276E\177I\277AN1>\342c\233\276\343L\t\276\030\271\020?H\026\337>\255 \217=\364\363\261\277#\216\007\277#so\276B\306\310>+\2725?\005U\353\275\"\230\210\276\251\340\210\276\354\014i\276n\023\321=\355\235\237\276QB\006<\031$`>stP\276\033\374W>\"a`\276%\235\336\276+hP>\314\210\316>\346\305\310\276j2r?\221\321\367\275O\257\247\274\254FX= `\004\276X\'\355\276,(\220\277\252\220\276\275\025\005!\277\005\264\010?\373\004\360?\010\274&\277Nf\217\276\336\215/\2759fU?\010U\231\276\241\324\307>\235j,?,kH?\257\320\334=;\2362?\301\n\223\276\274\376\216\276Pt\n\275\327\2765\276\322)5\277\223\277\365\277\242B\322\275\\C\243\276C\234\010\277\274\007*\277)\0053?O\276\t\277NI~\276\001\264\314\300}m7\275z\203\016\276h\360\242=yU\035\276L\000B>\000\271V<\220\240 =@\2221\274f\2421>8Ag=\330\177\363=\235\006\251\277\363pZ?\317\351R>\232(\022\273\247\036\213\275\217\343\251\277/\301\262>\356\003\203\276\271\265\210\277\373B\247\276\265a\326\276\365\363\250\276\223\245\253\276\310R,\276.\252\337\276=\352\301=\344\354\217\277l\253\372>\266\371;\277\316\304\036\276\214\002\334\276#Q\205>\2162\002\277\024Z\273\277\204\335N\277\022\226Z\277\"\313\234\276\344\305\307\276\335\317\233>\256\261T>\327n\272\276\245\322\005?\253+\223>\263\215\t>6\205==\035d\217>s+\207>\010\377\212>K\224\201\275\316M\243\276g\251-\276\022\340\"\276\370\247\335>f\353\030\276[\356\022\277n\307\303==\372\261=`|?>\236\034\255=\227\200\222\275\316$-?\037XV?(^\034\276\3704\r\276Z\257\335>\020\257\201=\356\273\021\277fAR>\007\005\035>3O\221\277\317X(\275\217\270<\276\324\016I\277\0054r?I\272\241>sW\200>H\261.\276\326V\300\275A\352\352>\267\365\223?bS\224?\271\277\323=8\021J>\303\002\342\275\217\217\005?\254\377\003\275\237\335g>#\351}\275[\000Y>\264\032\344\275\35404?5\207t\275:\235\035?\237\013\255>\206\276\337\274\224N\311>Y\'\004>,4\025?M\251\261=Yt\255=\324!\\>\212\336\210\277>1\220?\373\311\016\277i\003\310\275\374\317\261>\263\027\r?\302\273}>!\355Q\275J\030\311\275\213\334\316>5\002\221?\230l\223\276\226,s=#\204\305>\213\271\355\274\3250\264\275\014\361\213=3Af?}\233\347>98J\276q\264M?\272)\010\276^\231\230?\353\370K?m\016\265>\312a\263>\336\251\327\275Y`(=\270\017\022>\344\370:>\271\213\255\275\344P\366=R\374\034\276p^\327<d\352\003\2769\020J\2765A\334\275\347\216\270?\346\025%>\t]\211<\323\225\t\276\304\023\267>\217}4\277P\034;>\323<\360\276\025\336\301\276\241~\010<\372\343\275>\322\2013\276u?\337>U\254\233\277\254\3155\277[\2213?\243\347S?\334Bj?\017\261P\277Z\306\014\276L\342\277\277\2065\223?Zb+>\206\242\207?\034+\n?\374\215&?q\364\340>\364\226k?\271)\004?~\'?>\343\372\273>\202\024\006>%\\!>\276\344\364\2753\320\253=\200\305H>\356\242\361=\035,\007?Ww\024?\3752\202\276\366\262\013\276>\205\373>\373\245\376>M\232\000\276Z\216\207\276\357G\305=\\G%\276\005\333\317<\356\222\035>n\016R\275=(\267=\rz\237=Y\003}\276\255 \304\276\330\225\347\275\302]^?Q\217\266\276\023H\016?\022\032\354>a\242W>\270Y,?\371\2753\276\207o5@h\210<\277\311\335\246\276\313\004\207>P\333\251\276\324#2\275\272uW>\231\326\025>\210\036\235\277\310K\256:$B\216\273\307\023\317\275]\305/=\307v\321\274\314\362\323\276Pr\254\275\027\206\222<h\t\342\277\252i\022\277\263{\346>(\240\271=\207w\240>0\251\225=\220\255\202>o\375A\276$\346\264>\306\252\031?\263P\246<n\324\262\276\207\002\267\277+\"\003\277T\260\017@^9V<\256\342\253\276\335\035%\276\002\365\205\276\005\004\200\276\036]\247<\202\0052<J\301\201=r!3>\347\020 <\255\221\334\276\216\323\200>/\362\035<\303\362\213\2766\357\216\275X\217\237\275\254\207>>\251?!=\037\033I\277\032\003\"\276>c\264>\302\023\252?j)f\300|\027\205\274\224m7\276\354\030O\276\344\253\351=\221\312\000\276\201\233M\2768\214C\275\320R\013<@q\027\276\357\367\027\276\0219\000>R_j?\325\326\201>\311}\002>\014;\253<\253\333\005>\232r*\277H\n\022>\220\252\340\275 \245\021\277\334\337U<\177VK\2765C\352\275\350QA>\002\t\306\275v)\003\274\3161<>\206Yy\275\336\207\014?O\346\340>\242\262N\276\"B|>\303\365X\277\204\0172?m\371\023?D\356\316>\023\230\233?5bJ>\276pK\2775\225|\277\211}\215\275\266\030H>\226\224\224=\242\023\352=N\363\032\275\313\217\332\276@\224\220>\324,\313<\253\254\341>:\230\307>q B\276\013p5\276&MM>\242,q>\277>\360\274\017]e\276\264Z\343;\204\020\206\276{\301\334\276\341hp>w\345u==\240\235\276)~\227\276\t\274\001<\035\345\235\276c\224\312\276\226\252\001\277\363\363\013>\201\316t\276\275\251d\276o\214\354>\236 \257>T{W>\177\337p\277\326~$>\270\010\226=\021\211\005>\327\213\336\276\375\220x\275\362S??\362^\314>6\336\367=\366\244h\276\263\232\345\274\243\361\303\276d\013t\275x\210\001\276\362z\351\276K\247d=\016\213N>\000v\313>\315\243\003\277\243Gf>\221\332\022\276\313m\217\276.\325\004\277\311N]=\300\3412<\333Q\224=\370dx\277\304v\332</\036\331>\200\3162>W\263\023\277\351\310\372\275\017}\274\274\373j\000>2f5\276\333\305\236\275|\252\361\275\212\253J>e\242\205\276\312-\223>\017\277\255\276\347\263\025?\364\237\312>\353d\210={\014\300\273\370/\253>\327\366\254?\307\357\276>\204!\"?\325\211\337=m3H>\227\366\207?U:\271?1\315\317?\231\315\271\276\234r\275\275k\275\334\274\254\236\270=\330\253\211\275\000N_<\230\205{=2\270\211\275\300\0144;$W\206\275\266!\014\276\251\036\305\274\351\324\323\275<\356\020\277+\276\303>\031a\031=\247\351\227\277]\022C\276\37610=\200\255\004?{\021\250>\375\340\033;n\244\200\276\004`t>\341<j>\203g\303>\224\321\007\276*>f?\340p#\276Rk\202\275\233-\223>\257\3417\274\330}\203\275P\"\003\277[\341\244<\221B\031\277\337\376\001?\030\325i?\217\364\000>g_\265?\3131\257>l\325\304=u\017\317\273PC5?\304mT\276\302\344H?h\221\342=b]\336\275H_\201=\n\030t\2778\270\033\277h\332\346\275\220\312\356= \235;\275[-C\276-a\335=\236\022\023\275\320\306\243\275s^\227\276\353U\"\274+\332\332=J\001\325\276\034\267\336\274n\307+\277&4\237\277oi\014\276\354NK\276$\321;?\333\013\007?\300\257\334>M\341\255\276O/\350\276\013\005/\276\032\342\330\275\254\215\231>\216Vd\276;\336a>$\310\336\276\303\270\031\2763\227$\276\000\213\037\276\336\036O?\233\264\214>\376\320;\276\354\255\332\275C\223\333\276\251u\331\276\322P\255\275\3061Z>\005T\327;\245\330M>wk\004\276E\3166\276\336E\004\276\017\021\321=\254\353\211\276\254\350\022>\361\240\352>\226\246\344<$\260\271\277\214\322\254>\354\200\201>\240)\200>\343\265\265?vg\005\277-\234\251>\277\341\023\276\215\001\327\275\377\243\362\274\004\370\327>\014\216\366>\267\3235?\0378\304>:\361j\276\236:\202>{\374\025>d\177!>\001\357\343\276\240\366\014?3j\201=\304\272\217>\033|6\273V\310\274=q\006E>\347)\267=\372\"Q?5\200\213?CO\300?\312\313\224?\255\325\375\275\rHI=\034\266\211=2\347$>U\204F\276H\000\240\274pY\320=}\247\342\275\300\247\033>:r\036\276W\267[>\251\025\341\274P\3011\275\321mw\274\217\030\343\276\330S\216\275>\276\352\27567\333>\237Z\025?p\372\200\277D\274<?bF\032>w\037\307>,}\220\276\216\376\001<~\215V<\345\2059?\217y\010=\026%d=\302B\376=\t\275\241\275 \316S\275\272\211\027?\342\262\237>\254\207\234>\344\354\303>G\246\265\277.%\177>\316\357\347>\343\016\360\276\211\371\315\2752\313\022\2760Ur>\362\341\022=d&1?f\316\317=x\215\245\275\336\360\366\276\251\223V>rX%\277I\205\253\275#\275\252\274r\3358\277\001\352\026\276\037\177\355\273\200)\257=\324\211\240\275\220\313,>\3707)?\363\227\331\276N\270\347=\370w\002\277\000\032\377>\'\213\010?\320\315\204\276\324!\226=<\272\213\276\026\021 >\254\025\027\277\363\224<\275\311\264\023?/\243\201>\352\273u=\333v\323>\352\254\022?L\373\350\275\017\237\310\276\222\300c>[\305\273\275XW\275>\3724\224\276\335\177\353>\'\373\220\276\252s\204\276\337v\360>W\2219?Q\222_\274\336\324\305\276\324\363o\2767\204\306\276\231\331\001\27734<\277\r\273\216\275\375\034H\277\361t\200=i\374\325\276n\320\300\276\302^\314=@E\200?x\326$\277\263\236\274\276E\223\203?\032\210\324>\357\374\343\276g\025\254>\255}\272<\364\032S\276\345\351m\275\376p\177\276\201\215\032\276\014c\255?\333\273\237=\377\211|\2769\224\317\276MVV?\035\036\232>\013\302\204\276\313\276&>\256.\201?\301\215\340>\306\300\264\273\325\036a?\320\244\214>\357v<?l$\024>\234\373\244?L\177\270?(@+@R\247\013\274]\314\002\276\022\233->\'p\351\275\014\276s\275 UX\275\340\035\254;B$\t\276\020\030.\274\372\204$\276\261t\273\2768Yj@\233\215D=d\247Q>\0061\257>Zq\251>\336\217\232>~U\267>u\362\317\275w\344\325\276m\240\024\277<3\004?9\210\213>\331j\334>\336\202&\277L\257\356\275\027\017M>{\321D\277\203\034`\275\336\270I\276\241\021K\276\335]U\277\300X ?Hf\217\275$\257^?oy#?Y\314@?\377\t:>\327,\331>\202\013]\276\212\365\257=\031\300\\>2|\"?>\353\010\276\341r\214\275z\230\367>\001\014\022>e\027n=\"\354\203\276\317z\033?\026_\215<N3\373=\031\n\337>b\017\326>\243\321Z<4*\216>8&\243>\316V&\276\356\267~=\230\233\205\276\240\n\256=\357\271\247\274\323\374r\275\017\340]=\265\202w\276-\363\206\276Y7\362\275C\002\036>\244\223\325\276\365l0\276\225o\300>\367\361\325=\374\274\357\275\t$-\274`i\373=o\001\334>\215\231t>\177\020\261?\003\031d\276\351\343\330<\344\364&\277\036Q\303?\3014/\276\274\207\007=\366\253Y>\370\241\262<| E>?\231\016?]\025\356=\361\034\267\276\032\305k>\365\230p\276Tl\331=e\320\235=\357\321\221=+\037\033?6\333\332=\235\000y\276V\214g=*\376\237=&\001\237\274\031\n\034\276\3256\342=)m\r\2774p\201\275\305;\207=\341\3007?Edk?\2522w>\312\260\\?5I\026>\256E\322>\rY\336=\215l\026?\347\320\034\277\214\303\227>\323`\374=\313s\010>\301*\270\276|\211\315\277\244\275\323=Bwt\276\377\300\211\276\017Y\227\2758\\\243\276\375N\274\277^\244\252\277\354\311\202\277\341:\214=\334r\013\274,2\265=\344\021I\275\264\t\363=\244\013\222=F\034\007\276\001\027\032\276\010nM=\035`\334\275\2703\231;Bw!?\343\263\233>\351\310\310=\322[\361\275\332\2516?\257\305\264=\344\322S>\347\274\245\276q\351\346\276\311\206\343\276_\264\215>W\357\347\276\361\225\334\274N`\323\276\034\330(\276\033\266l\276Os\320\275[7\362>\013H\002>\267n`\275@%y>M\346\342\276\\\367\250>\224\371\365\276/\002\034\277\363>\273\276\251Gg\275\001=,\277\370I\016\277]\374\200;\327\324\204>\327\032\024\276D\314\000\276\221$\215?$\247\267>\324c\225\275\220S\305=\007>\215>]Ev\277\270\322\266>\004H\022\275o\326\235>\361(\270>\225GC>\250\256\274<\0148\366=%[\233\275\222\274\341\276\243\203\246>(\321\344>:\216W\276\331pQ>\200\036I\276Z/\300>\237\206\203>\200\252q>J\231\037\276\267<5>.b%>\342\304\370=)\254\306\276\330\267\263\275a/6\276\'\330\231\277]1\361\276\263\021\367<\342\002(?\027\3320=&@\374\276\374\\D\277\220b\017=\270f\262=\271\002\001?R\311M=|ru=\035u\360>V=\363>\370\305\332\275\371\307\361=\277\256\225?\003\230\335\2761\233\353>\036\234\010>\335\320h\276\204\014V?\216\311\272\276\0140\226=~\274p?\n\272\252\2769\275/\2769Q*?c\372\r\277\030%\213\277\022\273\256\276\316H\223;5\304!>4\177\314=l\354\n?#U\262>\365IK\277\300\217\032\277\005J\031\277_)\251>\250\024\212\276\213\215Y>6\\\254\276\236\t\302>\246\251\252>b\342\277=\002\3024>\004D\236\276\204/\010?\260y\334\275~\223\241\277\017\r\242\277i-\255\277\362\025r@@.R\274M\355\344\274\027\323?\276B\206\005>\374\312)>\306\024\024>\203\004\345\275\356)\330\275\344\373\t\276\252\317B\276\340\2676>\226\355\004\300WL\230=m\376\275\275@\222U\276\226:\337\276\027\351\027\277\235\301M\275\377^:>\310|\010?`\177\"?u}\r\277WQm\276\200\251\033\274W\264\375=\354\364\302\276Kq\251>-\270A?\332\264>?\207\017J=I\221\212=\'U\232\275\217\307\202\275\026\305 ?\317\205\232\2762\346\232\276\303\343!=\001\353\024>\th}>k\225[\276UQ\315=\307\352b=\356\317\313> \275\223<\235\331\264\275\312.\210\276RD*>\275W\277\276a\024\355\275\375c\362>\213|\225=8_\214\276\361\033\235\276\3035\226\276\251\235\314\273\020\236\255\276\333VM>3\343y\276&KW=\025t\214>\010X\226>\177\232\335\276\255\267c=,\376\231\276p-\355=l\006\272=\365\235R?9\241\242\274\253\253\311>Y\244o>i\317\r=\202\274\211=\315\035\317\274S-r?\355\366\300?f\033s?\356u\255\2758O\226?\343\336W\276\032\200\375>\224\236\324\276\000\256\323>\007\262\021\276\007\013\330=\331\245V\275\346-0>\010\226\340\275\360\013\"\276\372\306+\2765{^\276\314\321\276\276<@\316\276\003\333\016>\215)\235\277\245\377\031<\367\345\242\277\371\353\305>\275\222\353\275e\002Q>e!\007\277\241\265\254\276\212\322\345>aA&\275\035\262\t\277\021\217`?\271Wq\276\334\035P?\340.\005\275\0033\337>\202\010\356>\304\324s\276\365\3354\275\334\017 >\355\211L\277\200\220\323\274\317$\n?\010\3607>\020\241\264\275\237\030@?l\265\377\277Z\326\317>7#\007\2779\034W?\225c @\330 \367\275\263\020&\277VL\267>\2210R@\246Fg\2769\353<=\320ke\274L\203\373=|\2512\275hv\304\275`\210B\275\373Y)\276PKC>0\3043\276\341k\002\277\213J\n\276\331\201\260>%\263\020>\003\235\343>\351\366\226>\206\343\260?F\255\226\273\336\021\273\276\270\220\022?\220\021\220\300\321\216\262>1m\203\275p\273G=\343\014\227\2767\352S\275f\332\231<\214\241S;qx\376>\220K\266\275^\311-=\007G\003>%E\203\275,qs<\323\221\262\276\261P\320\276\265\212\201\274\233X\366<\"\337\244=\201\366\001=\002j\274\275\004\235\213=\301\201\027\274\345i\371\276\273\001\002\276\257\247\007\276\240\207=;\004\306|>\032\225\332\275y\357\277=A#|\2761\205\375=\233\345M>\350\262\220\275\376\t\205>\300K@>\354v\362>R\241\372=(\013\212\275;\325\025=3c3\275m!\037>\003-\335;\270\217\216\276\036#\001>Q\341C>\347t\363>\000\315W>TFJ>\310\234\271\275\226\376:=\336\362\237<)\324\242\275A\016}\275\344\212p?\036\253(<\334ZA?\324\263\367>t\300[\276(9\255\275\252\346\323<\354\235G=\273\211\216\276\370:\017>\333\206\217>~4L>?\263->\300Sz\275\224E\244\275A\311\224\276YE1=\026^\303\275\207\370\375\27523M?]9O\276\210s\033\277\316\371\251\276\247m:\276\026\202\210\275\241Og\274\272\\k>\267\355\302\276)\340\240>\262_\322>qm\311>\363!\023=0\\P\276\257\347\017?\345\"\356=G\323\240\276;\321\356=#\353&<B\330\255\274\033\374<\277qq\261>\322\242\221>\255\215\306=\026\352\330\276\366\352\306=q\003/?\0222\002?\002O^>\024t.\2771\365Z\277\'M\224?\245\306+?\213!F\277\254\265\303?\030\266\311<\366\265\364\275\351\234\250\275k\264@\276\310\010\211<\200\325\207=\330]\345\275\213\2677\276\276\"\036\276\332\010\224\275\204V\252>\223\025=>\370\217\374=*\357m>\205\003\236=\207!\223=\234\254\013\276Hb\227>_\020\220\276\217ft\276\274\346g>}/\272\276j\270$?\340\365!>S}\032?}\244\344>\241\213\324\276dX\233>\036\310\241\276\017\244\200=\341\003?\275\202\360\260=\3041T?\230\260\226>j\250\252>\373T\004?;\242\236?\270\2635>\314\276\311?\262\316D\275\355mS<\330\205\221\276g\202\211=\231\316j>\262\220\332>\264\032\205\276\315v\030>k\373\246\275\010;\n?X4\234\276h\255A>\215\264b>W,\346>v\355\270>\321$b>a\024\254\276\326\334\031>f.\022\276nN\201=\216\0365\276\rA2?\235\205\321>\236a\366\274%\235S>\206\354\270>\275\022v\275\236i\265>\016k\375>\325\2669\276\332i6=?\027\301>\244\307+\276-bR\276\312w\314>G\034\031\277M\233\211\276t\330\333>\337\332\347>\271\206E\276R\211B\276\366j\260\276\365\236\207<_\307p\276\217\216\230>\2345Z>\021\323\312\275t\323\302\276Z\r\224\275gH\006\276\255Ee\275EP\263>\273tm\277ZK\223\276\324z\262>\221i~>\305\312\004=\"\243\342\276\270B!\276r\031\304\275\331,\023>T[c\275\007#\245=z6\363>\352M\330\276\340\240\331\276\354\373\036\276\371\260\263>\3443\216>\207\332\325>/\000\244\276s\243u\277i\256M\277\204\362\363\276\032\356:\276\211>\211>\014\013\317>\255\272\317\274\tp\327\276\225\'\266>D7\016?\003\261-?5\350\226>:\356\230=&\342N=\207\220E\277\0306V\277\277`\266\276\2159\031@3\nz\276\330\235-\276\200^\313=\320\235\001=\004I5>J\266\264\275\266\367\036>\260\340 \276\216IK>8\030\366=\220\316s\274\014\252\357?\314\367\254=\004\262\375<\207<4>\3573\366\276\205\276M\277\375\346\346>G\244\"\276\233\303+@\373@\026>\206n\275\275.5\315=\202d\316\276\035\"^?eE\000?3V\006\276\375g\025?\310\024w>p\374\005?\221\276#\276g\025\361?\301\345a\277Vo\272>\243\332\020\300! |\277\272$\242\277\251B\213\276\357\213\030?\240e\364\275MCE\276\267\337\007\277\272\177\023?\321%\322>+6A\275\353\350\323>g\177\321=\373x\261<\364>R=\215\302\365\274Zq3=\005`\037>\261\277X\276\303\312\234>|\036D=\330<2\276\333\304U\276\325\0355>\2734\274\275\372\322\225>\352z\253>\346\035\'?\242\014m>\200-\267\276\230:=?\264\3450?\372\347\354>\247\373Q>/\313\027?7\301\247<C\237\335\276\0342\222\276w\341\256\275\364\347J\277\317\266\246\276\374\202x\276\251\242\257<\345\034\000\276C\006\345<\354\233\303\276Rv<\275\316\364\251\277\363\207\027>\021FY\276\020\250Z>\"\254\352=\305H\231\276Q\243,\276\337$j\275K\014-\2767eB?r\262%?\035\346\006\277\221\020\312>iFX\276\204\223\263>\364vn>#\337]\276t\246\212\276!\357-\277P^\215=&5^>\330{1?m\247\332?\247\210\332\275\371H$\274}\312\274\276&\225\263\274;G\335\276\025\360\253\276\206~R>HZ\244=W\204c\276f~\332>\363\242\335=\241\320\020\277.\361\251\276\3515\276\276\322\032,\276\363\221x\277}\322\203\276)_E\276y\340\221\276\360\274\373\274\360\201\343\276\344\341\263\276M\200\205=\277R\004\300\200\247\"\276S\265\254<\220\271\370\274\362\035\237\275\214\374\260=\010$F=\\\365s\275\023\341M\276\335\005\030\276\270V5>^\270\301>K\t\254=S\230\265>\357\373Z>\245\2727>\370n\221?\327\217\005\277\273H\001>\263$7?Q2r\274\306\236\t?E\330%\277\2651\005?\325e\301\275\336u\226>\253u\247>\202xY\274\347c:>\'\032D\277V\030\211>>\331B\276\303h\031>\232>\241=\377\3040>#\354A>\275j\'>z{\t\277b\270K\276P\033\013?a\342\n>y\211[<\024\3676\276b%`=\236GJ\276e;\221\276Z\377\246?KG#>\260\024\205=A\347%\277\'\n9>\222\241\312>\305\227N=1`\264>R\347\025?6\231\232\276\273\320\250=}\032\334>B\\\026\277f\372\013<?\032\303\275\004-\232>59z\276\252\300\363=\027\371\365=\025\263>\276m\'\365\274\326\346w>f\007\311\276\325\326\224\2752\255 <\000\255\210\276\245]\255>%\340\313\274`\215W?\203^\326\274\\\000Q=`;\300=\232UY>4\225\030\275Fj4\276\350P\342\275\300\236v\276 \324B\276\203A\211>=\031\342\275\364G\227\276\206\3119\2759N\252\275\311\363q\276\343\027B>\026\257{\277c{\213=\365F\300=\365\014\025\277!\021\212>0\275\263>\367\326\247\276\003\034\302<\341\214I?\253.\225=\nI\005\277q\315\241>\273\023F\277\306\323;\277\2452\020>*\340n\276\302\001Z=\341\027!\276\202\256\230>\254\232\272=\301S\333>\221\265!\276*\013\224\276\330+\013\276\201\226\217>u\353\250>\302\035\256<\342\330\261>\263\272\307=\260>E?l\035\021>\006\035\234>\354\277R\277G\243E\277\347T\330\276>\"\321\276\377\351E\277*\324\270\277\031r;\275\245B&\276@\327$>\240~\014>\370\240\370=\256<\332\275\272\346\202\275\0142\004=\267\333\r\276H\321\341="
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\264_\366\276%e\242\300\222\003\267\277\355\226\221\277NK\216>\274\340\214\276\312\274T@\006}\263?e\340\331?$~\237\277\356\334\014\3007^\007?\200\201\247?\374\254U?\357\365\331?A!\336>\177c\225\277\225\246u\300$\001\226\276\232\354\\=\277KG\274/\241\223\277\363d,?\304\300\224?lnp>\354=\257\276P\007\275\276\244\204\342>\354\002\245\277u\270\021>\251\354\221\276Dd\037>\305\373\340\277\200R\357\275\242\311\307\277\013F\245?a\346\236\277\327\350!\275\235\247^>\277\310\266?<\371\233?\367\006Z?\033\000\177\275\005<\003>\334\377\034?T\242\203?\216\373\200\276\262[\222?\241\273\321?\204#R\2775\2006>y\226\002?\266\t\234>\364H\326>;\311}\277\004gB<\177I\216?\235}J\276\370H\316\277\217\323\201?\213R\336?\'\317\322>\227/H?\327\220a\300\026\034r\277\362\003\240\276\262P2\277l\014\312\277o\264\032\275,\025\002@\007n\352:\311\363\200\300\302FH?\277\305\213?\001\036\211>\310\222\036>\240\362\244>\341\274\260\27638*\275\247\350C?a\335\307?\220Z\331?\200y\245>\374Y\311?\312yf>\034tf\277\020\026\237>mWA\275\306G9?\005\020\355?h\212V?_\215m=\312\357,?+\225\342?J\214,?{V\265\275F\211\375>\342\020\215>\326\212o?Tr\351?\213\270\035?.\310\201\277\232\201\233>\262=\014?\'\3434?m\335\'?\337\262%<Z\357\343?\r\345\332?3N\334\276G\213Z\277\227\277\202\276\311T\010?|\032%@u\347\335\276\351\323\014?\373#\323>\361\t\023\277\206\357i\275\261C:\274\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\366\341d=Y}#?Hw\005?\023W\232\275PU\354<=\207$>\246\306i\275v2`\276\230\035\t=\263\212(\277\337\234R\276+ \016\277\016\371\002</\327\236=\004\036\262\277w\326\355>.N\003>\266M2?^0\252>\324\376m>{\257\330\276\272\245G?\313\234\r\277\313\261\216\274Q\250\263=\362\"\240>E\247\005?Br\311=\016\367\037?\025\330@>\031-==\354x\225\277g\227\305\276\375\367\007?\243l\256<\363\273q\276\034\227\324\275\2324\317\276\214\343\232?VN\364>\375C\255\276^2Q>\262\333\346>d=8?A\017\201\276\310}\310>o\302\006=\\\235(\276~\363\267\277\177 *\276\033\363\227\276\007M@>-\362t\272=\'\220\277\332\352k?\272\273\014>\365\3344\277\305\362\325>r\335.\276c\t\t\277{\307->1\r\226>\021#*\276\245\355\000\277\013\335\241\275.\303v=\t\271&?0\250\351>*\205\345>\254\240\264\274\344_\"?\'Q\207\276Oo*>\363\316\315>\325,\307>p/\020?\320Jc>\255M\200\276\0314\206\276\224\243X\276\323\016\006>(_\215>|\305.?&u`>&\010\000?\370\036\352>\001\243C\276\270\350\326\276O\301\316\276(^U\277\231Y\222\276\346kG>F\226\326\277\204\013\270>\233\340\220\274l\307{?K\035\\\277\223W%\2767\315\215>\373\307%=\316\345\005?\037K\310\277[\266-?M\337w\277\277\007\240\276+\2141\276x\017\350=\357\006C>_\024\210\275L\352;>_IL\276\033\260\021?\332J\207?=\305g>\256\250\330>\036\326\335\275Y^\224\276\367J\247>u\320\331\276k\255\253>\260\030\347\275\344\242\360\276%\2577?\037{\001\277\026vm;\246|\237\276\242\277\262\273@>n\277\325|\004\276\270E\241\276o\374\\>\231x\217\276\247\315\003?`\343\313>\365\314\022?\346\037\002?j\317\033>/\006W?N*@\276\303\344\035?\311m\337=\210\2607\276m\316\345>\013\226\343>\340\361\350>\016\001\t>\262\242\021?\240m\212>\310\373\014\275\356J\234\275\317\334\345\274\364r\210\275\233[+\274\217C\246>\247%a?\t>\306>\226T\235>+\362\'>1\022\364\2759\032w=\r\311\336\276>\376\236\276\343sO>\300\257\203\276\247\360\235>\235\207\337>\266;\363\276W\236?\275t\001\214==\326\312\276\261\231,\276PY\301<\230M\031?N\317\240\276\233aT>\372\254\230\276bqG>\203\240\321>\2435\014=,\034\212>\263\217\261>\032K\224\276\343\002\210=\212J\'>H\214\256><v\331\273\261\252%\275\234\313\355\275\357\272\030>x\205\337=\037\257/\277\261)Z=\005*o\275\316W\030?\334\312\313=\372\224\013>q\273N\277X\307%?\3237O\276\"p:>L\002B\275b+\214>\013T\367\276kz\216<H!*>i\204v>\354\361v\276\260\301\233\276\335\034\334\274\020t\251>\357\036\277\276u\343-?5\020\322>s\322B=\341\331I\276\025\251u>\342b~>Mz#\276/\021\317>\323\323\256\277M\204\014?9<\303\276\330\327P\276fg\274\275\336\323F\276\236\263\310\274\270?$<W\316`\277\233\306K\276\226\005&?u\'\336=\304a\203=\014n\237>K\234\201>\001\211\027\277\265\005\345>@\336/>Kxx>\332$\034?\030\360\211>$\205J\277\245\255\014\277\021#\211>\260\216\252\276\262\324\363>\226\330\217\277\206\246\340>l=\004>O\000\265>\2529\221\276\332O\205=\'{\223>r\300h\276\304\230;>\301\2413\277lHO>\237;%>\037\355\010\275?\213\256>\306\330&\275\227\246\210<?w9\276\271\371\346=k\250\006?\247<\016?\324\0354?\363L\344>\327_\013\277\352\372\007\276\035p|\276aP\006=0YA?n\350>>\211\321v>\372\037>?\006)\200\276\013\267\260;\223\273I?EJ\250;!\306\004\277XPt\276}\372\305\276\347\274\205\276t\337Y>\345\365_\276_?|?\\\212\211=\010X\020=\312\311\312\275\021J\253\276\005\0368?\216\"\353>\005\n\233\276\301\"\372>Z\3232>;\006c=\177\262\227\271\367j\214>\t\343\247>$sj>W:/\276m\006\037?\223$w\2763\275\030?\001\355\224?\r\227%>\177|\021\277:\010\036\276\222\002\202>\025\210\266<\251b\014\276\355\222\r\275\312\240\"?7c\013\275\021P\325\276\034\355\322>B\243k\277piw?<*\222\275#\320\310?\264\263\\\276\326\274\005\276G\330\377\275\r\013a>\022\006\'=,.\032?\267R\205>\240_;?\313_!\277\212\312\345>\242\"\303\275h\2179\2764F\322?x\322\337=/\364z>\345\231\351>\002\272\010\277\202\025\341\275\262m@\276\303\343|=:\373\315>\215\355^;~\317\316>\316\000\"\276\345\271\230?\320\353s\277\244b\274>\244\361%?\336\223\314?\257\317\242\276\220V\025\275\360\337g>\364\277\210?\220wJ\277\001\364H>x@\202>gN|\2764\301N\274+\2678\276U\270\240>D\264\232\276\004\027c=\254_\220\275\337gZ>\251X\206\276\276[\232>\237&\027\276E\236\000?k6P\276#\347\370=\332\002\241>\242\201\320<\365\324\376>\221Y\220\277e\226\354=P\007+\2773\240p>\314\0033?\026p\217\275~\022\252\276\345\357M\277\320\232\007>e9\260>^\271\004?\372fF\276\262G\244>\217\034\021>\305\316\245>\347\204\346>d\321z\276#\231+>\214\261\016>\200\351A\276)\363\244>K\216\234\2765\235\247>\000/\006\277\214\210\311?\312\201\250>e7\376=\032\361\302>\253^8>~o\223\276Q%B\273\356\256\342=\334\331\300<\234\365\375>\256\360\221=\263Z\336>\361\276\237>rJ\r?D\234\203\276\334\263x\276\037-|\276\257L\206>\324\310\251\276\321\231:\276JF\315\275\344$\276>\000xz\276ldj\276\235\224d\276s>K\276\216\n\000=\342\034\224\276\223z7\276\344\022\216>\315\347\212\2768\323\371>O\n\221;\330\247\350>\014\366p\275P\277h\277E\332\267\276\214\313\273>\217|S=\364Q\300\275Y\226Q\276}\305\264?\326\"]\277\024\354\320=\215~\302\276\260\361`>\013\271\232>\024\014\260\276\243\035\024?\207L\360\276\307\026\233>;m\304;|h(?\311\014\377<F\316\232=\347X\325>\205\217\225\277sJ\202>>o\262\275\301O)\276\221\231T>\333\000\025>\3124i\275k\277\311\276#\na<qE\'=\364\026\202<\246\241\357>\020|\363>\215\343\366=\307\257J>\265\003h\275\345\013\255=\264\371\323\276\352.\032\2756\037\023>\301\302\'?qJ\270\275\301j<?UJ\032\277\227-\372>\264\250??.\010\200\275~\364\260>\2729\312\275\004\213\006>\301L\366>Zd\354>\303\325\223>\373|\177=T\001\217\276\035\353\227>EAC?~\344\315>NWP\276\216{\006=\373\3441\276\032\324\362>\243\273\025>\376n\210\276\246\331\223>\201\235h\276\354J\376=\202\336w>\'%F\276\301\030B\277\330\366\003?\240\205\222\275\304H\017=\347\210\361>\221\030[>/\242o>WY\327>G\tj\274\032\244\014\276r\331\345=wp\215>\203@\233=\205=\275>M\031\313>\253R\366\276\361\306K>&\274\004>\3715,\275\206\260\350\277\240\367\231\276O#j=\225\201K?E\245\245\276\254<\201=\323u\355>&\251$>\307O\274>\212\005\206=\\\177\224\275\352\020\335\274a\n\024=\366R\366>F\213\000\276zv\013>D\000\210\276kt\366>7\036\212=o\253L\275\023\026\303;\027\370*\276\023\3628=\3038W>\034\250\223:4\345\212\276\206\035D>jz\340>\242\325<?\324\262\010\276\360@\322>\036@F?.\261\303\275\350dZ>%\253-=\365\233\217\275\210\256\006\277\022;\230>\205\243S\276V\032\377>Gsa\277sF\n\277\367O\332=K\377\021\277E\363h\276^\341\353\276@4\321=\013u]\276\365\326\244?+\030<=V\370n\275A\312h>\002:\347>\004MT\275=\305J?"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\016b\263\275\316\203\242<L\244m\275[x\350\275@\321\345\276\300\237\333>\321\260\325>\275\361\346\275"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\261l\331\276K,\\\276\322\274\202\276J\213\375\275\205\211\227\276y\rS?[\n\354\276\312R\033\277\031x\007\277\335\2343=z*\r\277\344=\034?\307\342\331\276\026\007@\274\2457*>v\310\350\276\027\016\276\276?{\003>\203*\372\275\201\356\325>\334\356B>CK\346\276\367\032[\276\370.\003\277E\205\305<\3509\025\277K\031\243\276,*\242>I\377\262>\342B\013\276Qi\205\276Z<\371\275B_\210\2743N\022\277\356\245A\276\nJV?\337i\037?\205\272\242\276\264\014\357\275\346\251\300\276H\250\333\275+\252\004\276Uk1\276\342H\275=L\032\n>\351\217\301\275\265qR\275\360\265\206\274\231\025;>\352\320\002\277\317\316\016>.\223T>5\305=?\302\2505\276TS\213\276rC\300\276i\224\265\276\000GY\2769\\\221\276;\336\020?\265\331\211\275\355\277\323=Ym\244\276\343d1\276\t\350\333>0\354\274\2755)Q\276R\022\354>Ok\t\276\245\317\346=\350\311\237<\371v\263\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.044434551149606705
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
