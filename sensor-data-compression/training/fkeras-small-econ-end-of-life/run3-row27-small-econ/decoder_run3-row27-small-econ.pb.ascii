node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_0/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        tensor_content: "L:{=\n\211\215=\307\032x=\0021\253>\213s\216?\326]\210=r\264\377>\227F;>\322\261R>U\344\267>\266\314f\276s\324\223\276*K^?\335\255\\?\036\342x?\265\206\263>\266\357\233?\277\377p>\211\304\215\277\231V\247\275@.5?\022\007\265>6\2510?\026\314q?\2709\025\277\226\312S\276\013\221\210>\344\252\351\275.O\306=\013\211\217>+2\"?B\010\320?\212\206\016?\257\322\307\275\366\311\245\277\251/M?\353\335[?68\210\274no)?\301\204w\2770zx?\376\276+\276\363\306\001>Qo\230\275l\214\212<\200oY>\336e@?\345\366$?\212Q\034\277\013\210\004?S\250\037?\223e\324<\376\364\344>)\3307\277\'\370A\277\362h\006\277\2306u?\201\221\332>\255v\344=;b\344>\317m\223?>mZ?i\230\036\277\262{c?K\302z\277\374t\305\275>\270\205?\201\337\353>f\336\014\277\204\213G?\200\312\224<\006g\270>\305\315\004\276b\031\017\276+\200\252>\223[\030?\3356\003<\227\355\022?h\245\"?\253}\356\276\207\'\033\277\234\312c>\262\006\206\277\225\272\231>\314\351\310>\342\030\334\276\337y&?\223\374\315>\201/\020\277\353\202\344=dRf\275y\230T\277\342\363J?1\355f\275\0005\311?\030\257\270\277\224\323W?\351\333\005\276\217\357\237\275\360\204\036?J\327$\275K\224\227>vb\217=\240s=?\272?$\277\333\357\311\276\300\346\233>s\373j?\222\030_\277\244\233-?1\025\354\276Pn6=\223\370\004\277\211+6>\333\360\022\276\037O\347\276\245F\270\276&xn\277\255\014Z?\035\036\356>\331\340\241\275Bq\036?\312?\352>\324\357\302?\n\245\333?+\201\013\276;\\\332=\004\350A\276\324\325C?\327\243N\275\313\2474?\217&\345\276\363\256\362>\307\000\340\277\373br>GY\305>\301\234\034\276\256\316\t@\203\205\272\274\r\203\336\275\356\3259>h\351\277\276[{\025>\362\237\204>\231q\240?\325`\341>\031u\342\276\352\236\344>\366\000\030\277\374\331\264=\024\017\023=~\222\000\300\252`\311?`\017\307>\032c\231\276\205\2449\277G\026\003\277\315\307\035>V\220\215\276Xl\023>\235\251|\274\251\305|?)\221\314\276\024\303a?\311\270H?iv$?l\032T?n/(\275\221M\240=J\002\\\277tYV?\242h<?m\030\220\277\3328P?1O\003>\315\212H\276\320\020\027\277g\'\025\300G\036\322\276\343l\003\277\274*\325=\3344\315\275\320\001;>)M\022?\225\311\004\277\205\366U>{k\r\277\324\210\002\277\037\267\257\277)u\226?\352Vq\277\030{\031\275\217\314\204\277Z\325\355=\\\220-?\351P\236\274\353[Z\277\002\242_\277\234\252;\277\207\372\337?\006\371\303\277\246\ng?}\225-\276\331`\254>\211/\264>\003ke\276\025\020\325>M.n?_\t=@\2656\t?\325\303Z?\212\264<\276\227\331\344\275\265\315g\276q\263\316\276\236\226\246?\252\003B\277I\002\215>\2178\331=f(\025?\014\335\r?\341\007\234\276\016O\022>\375i\014?\207I\007>\367|]>\330\242w?\350\035\014\277\\\202`?\023\325,>\025\200\036\277\234#\022\300\010V\002@z\267\210\276\320\236\r>rzb?\263\360\275>\263F\325\276\220\350\272<\377Y\027?!Fp>\274\256\322\274\336\231\211?p\010\205?\013\257@>\r\325\300?\346\254k\273\271\363\030\277\251N\t?H\024\313\277&]\314\275-\264\031?r\211\226>\271@\302\276L\017\016\277.eq>"
      }
    }
  }
}
node {
  name: "decoder/de_dense_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "d\354\301\276(g\215\277\252\333\246\277\365Q\203?\242\205\235\276a\006\372?\301\265\370\276=9,\277\250\035y?\302m\034?!%a?\223#\026\300\310ox\276X~\324=M\033O\276\326\331\356?"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
        tensor_content: "{X\033?\030%\250\275m1\t?~T\216\274\317O\230>\245\353\362\276\213iA?\010\t3\277F\212\374\276\370\202\251=\r\375\007?\035*a\276\353\364\217\2748\2031\275#\034-\276\205x\003?/<\270>\375\271\202?\347\277\017\277\211\245L\275i\257\301<\275\226\032=\334\261\241\274 \264\334;\035\317@\276T\031\244\276\037&\353>.\276\346=I\267\340>\326+=\276\2672\222>\304\372\206>\372\312`>\002\352\243>\314\201\255>\347\021\304\275(>P=\230\227.?D\361\204>\241u\213\2757\373\246>B\300\017\276n\214E?\240l\004?\366Sg?\221_\016\276\342\262G\276TeT\276$\200\3249KG\003=^x\253\275\020Q\374?\004\324\231>\240\3356<\234t\211=T\\\031\276A\353\354>\017\243\017\277u0\032=O\272\314>\363P\260@\274\205\262=\274\016x>xpM=G\345\332?\215Su?\tt\226?\340\217\016=T\227E\275\353\331\317=\305\216\377\274\243\373A>\313\307\021\300f\3338>\225}\325?)\312\024>\330\343\205\276L\207*>\rF^\276w\272\275\276\227\314\036@\2068{\277\232?9?\235g\204\276<\277\313>\374A~=\221?=>d\023\275\275\373\345\002<A~\263>\267\331\032?\275f\202\276g\213*?}\326x>\272id>\306]\331>\272?\014\276\315\363\221\275\244nR\276KN\034>\035\244H\277\266c\270?\177\r\356>\375L\273\275,E$>1\312\334<#\2022?\034\3455\275\036\231\220?\030\375D=\312V\036\276h\272\003>iq(\276\002\177\003>\342\316\252\275\000~>?(\306\245?\010\216\n=`\330{>~\276\026>\206\374\256=\377\366@\276\326\036\010>\367x\021>\"\300\023@\325s\016\276\002iX>$a[\275\256[\007\277\347\350_?G\"\243\276\353\303\234?\350\270\271\276\232\373\336>\234\014\003\2763\317r\275|\000\202>U\333\332\275PV\224\277Nj,?\253\220\213\274\225\332\342>\327j\032\276\356\312\272>\025G\006\275\312\304U?jb\302=O8\027\276ds\261\276$%i\276\365\036\035>\312J\003=x?\263>\2762A\276\243\221\002?e\312{\277\021 \215\275\325mb\276&\216\331> &\244?xV_?\241\207\222=\t\020n?=C\303=\271\257H\3000\025\332\277\200\270q<\362\003V>Q=\277\275%G\364>\211SV\275%5\217?\037\303\r@\314t\364\275\213\\\t\276L\264p\276\262\016\210\276\203\305\236?\270w\274\275\3625\271?t\357\034?\302y\204\276\362\252\212\276\020\033\311<Y\351\222\276\324\013\237\275y\326\235?O\177\233\275\016\246\225@4\216\237\275L\2077\275\016\035\210>\002o\223>\\,\327>\252\263+?8\207\337=\276y/?d\327\021?\300\350\301=\004\264U>40Z?v&+\276}-\003>\341\363\025\276\000\0130>e\n!\277f\365n\276qb0?\303\275l\275\357\030\232>P\255\023?\354p7:5\271C?\205x,>r5D\276X%\221\276\216\344H?\242h\222=\n\323M\277\316\277\016>Zs\211\277\3567\215?%\231o>\237\220i\300R\036\306>|\251;?7F\250>\351q\230\274a\242\342?\372)\251\277\002a\231?\263\276\304\2743J\274>D\037\231>\225e\021\277G\311e?\373_\230\277j\200\257\275H\343\274=(\235k>\371\271\231\275\343*\221\276`\372\322<f\016\033?\277#\240\277\346:\021>\020u\277\274 \312\371=#\243,?\361x\331\276\356\227\206\277\355{\272>\343\271\000\277\010\363\354\274\360\216\250<\344\337\252=\337g9>|C3\277\245\226S?\355\t<\277X\360w?\010[\252\275\007\325\232>\034\004Z?\362\373\024>\254\362K\275\311|q\277\363\202\335>\272,\004\276\353\277q\276Sxu<\321\346\213\276\270\246N>\370n\r\277\003\252;>S]\215<Z\217\036>\3424\003<E\215n?\034\'\226=\037\326\002\277\242\010\321>\312,\232\276\376o\373\276\266f\257>l\017:\276U\276\243>\rY\337\277G\005\212>\276\261\264\2764\277\n?\351\234G\276c\362\035\277#\020\201?z\305\231\275*\224\240\276 \007,>\347\310\006\276;\224 >fw\306<\366\363\351>6\246U>\222\237F\276H\310_=\202\014\032=\240\277\002?H\212|\276\262\034_?S4\374=Xh\254\275\204\225S>@\037\">W\030\300\275\2407\351\275c\216b=\345\033\026>\236\254\233\2772\356\033>\320\313\242\274fr\323\275mO&?qL\010\277\022\325\036?a\342-\276C\244\000>K\374\202\277\'?\255?\261B\271\276\002\306\273=\006\013}\276\031J\210\276\014\274X?Y\307Y\276\241n&>\353\235h\275\207\306U=\027\277n\276\177%t\275]\216\017\276\323;E\276\324\334\225>\263K\216\276\030 \022?3\277\201\275\356$\n>\325\222\004>mkD?\225Ib\276\257\013\306>\312G\307=b}\n\277<\211\\@\030\221\036?\014;Q>\220\031\007\277\231^~\276\334v\231\277\342\330\364?\202\337f?k@v<\243\355N=\014\232.@\375\002\253=m\241C\277\332\370\244\275\226\001D\276\206\312\031\276\034\224\002\276\321\320\267\276\246J\314\276\000\333#;Uz\205\276\032\374\233\277x\325\001>\356\351\000>\022\330>>67\263\276\3303[?\374U/>\254\266\210?E\204\251\275\361mK\276\346YQ\276\2613\031\276X\030\003?\316G#\275\207L\022\277\206N\340>~\300\377\276\237%\211?%\314\013\277\241\366\306>\004\246S=\362\017N\276\"\024\222?\210\003o\277\311\211a\276e\r\207=\271Q[>_m@\277r1J\276g`\243\276(b{=!\010\031>9\216\365\275\306\336\355\275\223\016O?\224\231\253\276n`s>\375\335T\276\"\021\247\276\214\310p\277\273\210\310\276\031\254\025?\362H\223\277\204r\202?\303\371C\276u_\376>\231\354\026>\034\2516\276\261t+\300\037q\n?E\326\325\277#\252h\2741K\311>\333\351\306>\217\253\342>\033m\006>\262\315\333>\300\276\321<V\2066>n\304Q>\034\013\013?\215\227\000?\212\234\360\275u\367\037\276\257\346G>\300P>=$\321\210>PO\207\276\020/\002?1\273\213\275\205\235u?\222\204_\277\261\256\252?8\010\352=fY\205>t5\267\275\202;\025<\340\203\201\276KX\324>\037L\262>\003\1771?\352o\202>\3252\276=\2250\t;\224\232\035\275\237\275?=sY\036\2764\315\360>\252h\001;\002\236\255?<\341\241\275\233\270\346\275\270Q\">He\203\276\273\350A\271\341=\221\276,\207\304\276\351\206\216\276\350n\254\276FB\245\276\356\000\322=\213\036\355>\256 E\276\311\265L\276`!*?yg\205>\245\275\016?Jz\345\276\302\261@>iB\314=V\202>\275\344\266#=V\271 \277\025\275\201?/\231\236\275\361\3435\276\350\361\220>\243\234\035>\212\242\025?`\273\354\275\222?\207>\256\201\237\275\3702R>\354,{>c\252\230>w\215\243>x\r\366\2754>\021@<\316\366\275\332\267\'\276,\377\021>\234N3>b1\250=\201\022\364\275(\242\336\276\363\242\323>\026\222\221@\014n\n>@\260-\275\224\006d\276\014\271\025?c\373t?\216\020\301>\217AS>v5Y>\270\203\343>I!\252\275k\220\326>(\000:=\332gP\2751\225\364?f\003\020>\000\200\0217\324\330\005=D\204\010\275\354\013\265\2767o\002?\356S\000?\262\'\001=\312\177\244<;\315\356?\337\362>\275?\n\227?\025\332V\276\023\312\036\275\245\233\353>\261\272\002?\321\223j\276\030*M?]o\246?voW?|>\336\277\372\225]>\007\203x\275\321\252\n@\333\343\372<\211\216\354>\021|e\2775\344\323@\324\357\030>\212\245\024\276\375De\276\373\307\334>\335:\205@\351\204\016?P\247\374\274\000%\201;\252\361\021>\302\2608>++\032>\010\333\005>]\210>\277\3173\305?\3703\020=\226\314\207\276j/\202\276[\203\320\275\334\221E>\n\266\233?\032\207\367?\257K\222@\276\312\262\275\000p\3329Xr\264=&\010\334>\225\252\033?\314\243\367>l\274\016>7\344s>\344\006\271>\005\202(\276\232\363\300<\227\263\210>zw\276=\020\334\224?\322\034\r>e]\215\276\023?\305\274\300\244\202\276v\307S>v\211\275?\315\014\321=&\214\n>W\031V\276\314\346=?!\301`\275\305\013\223\275\324u\226=\367\033\361>\262\231\200=\310qq>e$T\276sCV?y\354\353>Qa+?\030\373\321\277-\272A?\276\220~>\255G\311?\356\232\334\275\360I\013\301o1\274?\272\322\024?\357\240K\275X4\305<\332\003\231\276\311\270s>[eh@\364]\300=(\304J=\247uL\276\354KW>\005\371b?\310\033\212\275n\271\337\275\222e\207<\310m\357=@OV>\302\252\253\275h\235\202=Wn\321<\273\3561?\006\372\006@\342$\272>\336\024\236@q_m\276\200\360\\=\204\215\367=\201\275&@3\300I?\035x\367>\023-\351\275\332KU\277\200\267\037\277DW&?\344&\311>\347\205\246?\004x\240=\220\320\213?}\262 >\n~)\274k0\222>0&\031=\014[Y?;\271\322?S1\016\277\032G\206?2\0268=\035\3213\277(7M\276]`Q>\325K\201\275\203\205\201=C\224\201?kQ\250?\374V\361\276<\247\212?h\207\036?\247#<\275\267&\026@\023^\204<\346\202\253\276e\311\342=\324-1\276\271\n\200\300\336l>?\016>\242?\3679#<\270\263\006?\002b$?j\302\253=\363\276\237>E\222\377\277\034\210!>\216\252\342\275\000\230\373:\020\271\\?\020\007\013?\270\035\024>_\221\252?\262J\364\277\206\000\201>\212\226\037>\200\321\343\275\021\226\241\274\224\3424?\306\311\234=-\003!\276\334\374\334\276\331\200a\276\260\002\220<\240\206x=\243m\337\276\363O\277\276|=\310>D\236\236=\236\320\207\275\276\240\277<bHj\277\205U\315\275onc\277\232\222\220\276\n\354\017\276q5\346>\002&J\276\321B\254>c\336\234=<^\271\277{8\033>|\032\207>\273\272\276\276\021H\245\276<\006f\276\222\315\355\275:\004\034?\356\251h=E)\271\276\257(!\277#g\276>\316O\234>\306\215R\276\\k\211\277J\302$>\254\276:\276\316 !?\365\273\355=\203~,?\010\026c;\313\226\n@\002\2303>o\245\\\277\r\273\217\275_\223\006\274\nOv\277\357\364\016?\3709\216>\266w\026@f3\267\275\204@\303=\330\206j>)w\252>lo\t\277A,W\276\235\021\232\277\241\300\200?l\350=\276L\372\033>\212%4>\240\331\020?\206\321\336\276\375\235\027?\317\277\306?\342\233\247\277(\227.\276\374\250\361=*\354)\276\220\2352?\275\315\261=\307\303\224>\347/\354\276\004Q3\276mDD>\377\246G?\250\334\234\276\340\360\016\277\2256-\276\244\325\006>\371\2324?\350\301\366=LM\311=\257A\367\275\2453\257>\237\356Z\275\305w\272?\244\005i\276\240\251\220\276}\303\211\276\337\247\217\276\022\212\030>FY\006\275\002%\266\277\336nl\277\266\342\355=-t\203?\027\236`=6\236\311\276\365\2061\275\027\200P?N\270\004\277\377\314C\277\361\315\230\276\001\307g=|\350|=\227\307Z\277\201\377\227\276\352\341\342<\037\014W\277e\017\360\275\214\336\307>\214\313\277\276\207\261*?4\007X>d\364\370=tQu>\271\253\234\276\235\275\350\276@W\223=%\311\202\276$\305\013@\260]\207\276X[\366=\200\013\033\273\346\316\240\277`P\240?\215\236D\276\005\300\202?\320r\001@\200?1\273\240x+\276\354\272\202>5\261\327;\255<#?\017r\022\277\315<\262>\0147\275=|p\340>\252\353A?\250:\037?S^\305\275\215Q\211\275\267\267\002?\234\226\366>?\004\232\276\276\354??1\250\331\275\3452\014?\233\232\267>\232$\236>&\001\374=\356\305\010\276G\0005?\321\353\365\275\010v\243>^Y\251\275\t\333\367>\321B\222>\216y\327>=\\\n\277n\273\016?\033\265[\277\236+\341>\311\006F?\314mM?\306\r\275>\311\216\214?\216\205\325;\213(\023\300\225\3036\277\013\331/\277\356\004\330\275\210E\240>\022\333\226\276\266\265\177>|;\322>\262\237\325\275F\372R>\260\207\317=\274\327\000\276Z57?\324\353\225\275F\304k\276AXk>N\271P?P\234\014=\360\334$>bm\356\275\267\333C?\210Y\263<\033\001\034>\370C\347>\336\302\233\275\005Y9\2768,\365\274\000\370\236\272a?\224\276\223,\376>H\314\316\2757+\200?\354j\023?\354<\325=\224B.\276\037V\242>\031\337C=B\274*\276\201*\273?o\010\032\277di\031\276\000\341\020?\300\206\225\275E\n\213\275\200\032\007>\263bM\277F\233\236=@\306\247\274\rXI?d\375J\276 \353\227>\006\332W\276\303\332\002?W\033R>\256\313\033?}\315\375>\362\376\332>\200G,\277\033Z<\276\266\260\207\277\217\235\323\276\342\335\304\275\357\324H\277\353\274k\276h\237\350?N\260\203?i\264\206\277\265\276\233\275\334\203q\276\027j\261=M%\273\276\376\3153\276\214\026\347=\030\376\035>yXk\276\230\025\007>F\260\215\276\301\300^\275`\333\037<i\211M\277\306A\271\276r\256/>2\255\t>\331\237\025\276Z\371\222\276En\356\2761_\'?\310\177Q\277\3127\340>\000k{;\240\335\335<\010\2759>\001\217\222>\265\230\215\275\264\302f?\204\\N\277z@\212?\235G-\277W\342\331>\356CJ\277\353\337\366\276m\211\'\276\376+\215?R\036\266=L\216\351=z\017\336\275\236\326\004\276\237&\036\276$\243\264>ZC\226>\210\017Q\276\023\227\\\275@\220z>\240\365\276=\020p\\\276j\322 \276\3751i\275\020f\004\277@N\022?\032\263N\277k\365\337=\177\302\"?M\347\210\276\010U\026\300g\343D?r\253\254\276p\347\365\276\224\002i\276\0236L\300\370\340S?>\346\373?\263\267\247\276\312\365\301=\240\327\034\276\371\200\231?\232u\215\277AR*\277 };=\240,}>\212\000\272\275\3104j\275\227^\306>\376\026\327\275$+(?\302\241\306\276\010\201\326\274\"\200\023\276\211\005S\276Ug\021\276\367n\204>/B\326>\320\253\247\276tP\316?D\025M\275\271\357\003\276L\336)\275"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content: "\004\2728?O\245\255?\017\321\217?\334n.>\271\272`\276\'G\321>\312N\253=8\343\315=Y\376\377<\323\021.\275\222\324\362>\271\212S>W\035\025\275\364\002\027\277\021\026\313\274\212\014C\277\253\231\333?5\326\000@\234+A\3000?y\275\256\243\010?u}\246\275p2\007\300\203~\210\275\001Y->\326\377\375?\373\250\350\275\0217\n@\342\037!>W\210\213?;\253\255?XT\254\276Y\214\366?S\346\020\277>\306 >\314\225\252\275\247\276\276\300_}\014\277{1\205\277DYJ\275\177\213\221\277\353\361@@\237\277}>\032}z>td\274\276\000\000\000\000\000\000\000\000\000\000\000\000\002\300\003@\027U\354=\000\000\000\000\313IV=\034/\027\301\000\000\000\000\000\000\000\000\000\000\000\000\267\343?\300Om\035@\340\226\222\277\244\334\224\300\232\215X\277\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        tensor_content: "t\347\233>\207;\260>\326\314\020>\220T\234>\354\234\014\277\001>@\277\004\363^\276\024\203*\277\220?\317\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.7480047941207886
      }
    }
  }
}
node {
  name: "decoder/de_dense_0/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_0/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_0/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_0/MatMul"
  input: "decoder/de_dense_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_0/Relu"
  op: "Relu"
  input: "decoder/de_dense_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "decoder/de_dense_0/Relu"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_0/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_0/MatMul/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
