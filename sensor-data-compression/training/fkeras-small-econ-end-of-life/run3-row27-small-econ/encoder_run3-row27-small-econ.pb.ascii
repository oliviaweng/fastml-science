node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "encoder/encod_qa/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 512.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/input_qa/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/input_qa/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 511.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -512.0
      }
    }
  }
}
node {
  name: "encoder/input_qa/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 512.0
      }
    }
  }
}
node {
  name: "encoder/flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
        }
        tensor_content: "\000\000\302\276\000\000\364=\000\0008\277\000\200k\277\000\000H>\000\000\270\275\000\000\254>\000\000\240=\000\200\000\277\000\000F>\000\000\205\276\000\000\016>\000\000\333>\000\000\321\276\000\000\357\276\000\200\241\277\000\000\360\274\000\000R\277\000\200[\277\000\000\221>\000\000,>\000\200\001\277\000\200\017?\000\000\000\275\000\000\270=\000\000\235>\000\200\001\277\000\000\227>\000\200d?\000\000\016\277\000\000\014>\000\000\r\277\000\200q\277\000\000\036\277\000\000\316\276\000\000\270\276\000\000`\275\000\000\352>\000\000\311>\000\000\235>\000\0008>\000\000\000\274\000\000\310\276\000\000\335>\000\000u?\000\000T>\000\000\000>\000\000\000\277\000\200\n\277\000\0000\275\000\000\353\276\000\200p\277\000\000\341>\000\000\211\276\000\000\260\274\000\200\020?\000\0008?\000\000\246>\000\000\000=\000\000\250>\000\200/?\000\000z>\000\000@<\000\000\202\276\000\200\004\277\000\000`?\000\200\026?\000\000\251\276\000\000h\275\000\000\363>\000\000\261\276\000\000V>\000\000X>\000\000H=\000\000\371\276\000\000\355\276\000\200-?\000\000h>\000\000\n\276\000\000&>\000\000\264\276\000\200d?\000\000\315>\000\000P>\000\000 \276\000\000k?\000\000T>\000\000\004>\000\000\t\277\000\000\224\275\000\000\242\276\000\000Z>\000\000\367>\000\000c?\000\000??\000\000\375\276\000\000V\276\000\000H>\000\0006\276\000\000\200\274\000\200D\277\000\000\250>\000\000\200>\000\000\003\277\000\000?\277\000\000\224\275\000\000\304\275\000\000\244\276\000\000Y?\000\000-\277\000\000\033?\000\000\320\275\000\000\020\275\000\000X=\000\200 ?\000\000R\276\000\200\003\277\000\000N>\000\000Z>\000\000\354\276\000\000\343\276\000\000&>\000\000\323\276\000\000\354\276\000\200H?\000\000\375\276\000\000\260\276\000\000\245\276\000\000l>\000\000`\276\000\0003\277\000\000X\276\000\000\262>\000\000\257\276\000\000`\275\000\000\352>\000\200R\277\000\000\242>\000\000\002\277\000\000\016\276\000\0005?\000\200j?\000\000f\276\000\000\033\277\000\000V>\000\000\225\277\000\000\200<\000\000\214\275\000\000\236>\000\000 \274\000\000\244=\000\000\'?\000\000,\276\000\000\n?\000\000\310\276\000\000>>\000\200*?\000\200d?\000\000\370=\000\000\340\275\000\000\332\276\000\000.\277\000\000\333\276\000\000\257\276\000\000\250=\000\000\202>\000\0000>\000\200\007?\000\000\360<\000\000\306>\000\000\000\275\000\000z>\000\200!?\000\000D>\000\000\275>\000\000\205\276\000\000\"\277\000\000\214\276\000\200\010\277\000\000<\277\000\000\201>\000\000\300=\000\000\374=\000\000\027?\000\000p=\000\000\310>\000\0002\276\000\000\267>\000\000\336>\000\000F>\000\000\230>\000\000\010\276\000\000\314\276\000\000,>\000\000\025?\000\000^\277\000\000\360\276\000\000-?\000\000\026\276\000\000\034>\000\000l\276\000\000\366>\000\000\260\276\000\000\240<\000\0002>\000\000\244=\000\000\254>\000\000\'?\000\000\214\276\000\000]?\000\000\323>\000\000\254=\000\000\230=\000\200\026?\000\000V>\000\000\226>\000\000\331\276\000\200\025?\000\000\224>\000\000\206\276\000\000P\275\000\000:\276\000\2001?\000\000\360>\000\000$>\000\000\214>\000\000p>\000\000\016\276\000\000\000<\000\200\t\277\000\200[?\000\000\324\276\000\200\020\277\000\000E?\000\000\201\276\000\200\035\277\000\0006>\000\000\213\277\000\000`\274\000\000\005?\000\000\324>\000\000h\276\000\200R?\000\000\207\276\000\000\372\276\000\000&>\000\000\227>\000\000v\276\000\000t\277\000\000\341>\000\000\225\276\000\000\r\277\000\000\007?\000\000\200\276\000\000\330\275\000\000\002>\000\000\364=\000\000\340\274\000\000\036\276\000\000\274=\000\200B?\000\2006?\000\000\216>\000\200\\?\000\000\251\276\000\200\016?\000\0008\275\000\000\273>\000\000\244=\000\000&>\000\000\240<\000\000^\277\000\000\032\276\000\000\273\276\000\000\242\276\000\000 \274\000\000\371>\000\000\323>\000\000\211>\000\200V?\000\000\331\276\000\200\004?\000\000\350\275\000\000\310=\000\000\336>\000\000\210=\000\000\000>\000\000\022\276\000\000\362\276\000\000\017\277\000\000\001\277\000\000\315\276\000\000B>\000\000\220=\000\000\010>\000\000\326>\000\000\253\276\000\200\016?\000\000\230\275\000\000\020\276\000\000\214>\000\000\274=\000\000\320<\000\000F\276\000\000\377\276\000\000\322\276\000\200g\277\000\000\376\276\000\000\360\274\000\000\270\275\000\000\243\276\000\000L>\000\000\332\276\000\200\031?\000\000l>\000\000\220\275\000\000N\276\000\000\332>\000\000\001?\000\000\253\276\000\000\355\276\000\000\222\276\000\000\243>\000\000`\274\000\000\016\277\000\000\270\275\000\000\262\276\000\200+\277\000\000\302>\000\000\306>\000\000~\276\000\000%\277\000\000\272>\000\000\027?\000\200\021?\000\000n>\000\000z\276\000\000A?\000\000\300;\000\200\031?\000\000:>\000\000\236\276\000\0008\276\000\000\312\276\000\000(\276\000\000\r?\000\000\233\276\000\000c\277\000\000\260\275\000\0005?\000\000P>\000\0006>\000\200$?\000\000\343>\000\000\203>\000\000\376\276\000\000\214\275\000\000\021\277\000\000\360\276\000\000\255\276\000\000p=\000\000\035?\000\000\313\276\000\000P\276\000\000\\>\000\000\014>\000\000\250=\000\000 \276\000\000\214>\000\000d>\000\000\204>\000\000\230\275\000\000\255\276\000\000\200<\000\000\272\276\000\000\036\277\000\000\264>\000\000\000\000\000\000f\277\000\000\205\276\000\000H?\000\000\215>\000\000\350\275\000\000Q\277\000\000R\277\000\000\215>\000\200^\277\000\000\364>\000\000K?\000\000\356>\000\000\275>\000\200\033?\000\000@>\000\000\317>\000\000$\276\000\000\020\276\000\000z>\000\000\263\276\000\000\354=\000\000\353\276\000\000^\277\000\000\223\276\000\000\233\276\000\000:>\000\000\265>\000\000\352>\000\000<?\000\0000?\000\000\031\277\000\000\301>\000\000\206>\000\000\303\276\000\000\303>\000\000\366\276\000\0002>\000\000\240=\000\000\016\277\000\000\020\277\000\000P\276\000\200\030\277\000\000\332>\000\000\243\276\000\000\010>\000\000\203>\000\000\010=\000\200G?\000\000\264\276\000\200\n\277\000\000\360<\000\000\212\276\000\200E\277\000\000`\275\000\200G\277\000\000\270\276\000\000R\277\000\000\022>\000\000\226>\000\000\020\276\000\000\300\276\000\000\210\275\000\000\276>\000\000\300>\000\000*\277\000\200\000\277\000\000\213>\000\0006?\000\000\256\276\000\0007\277\000\000\300\276\000\000\004>\000\000\345>\000\000\207?\000\000\314=\000\000v>\000\000V>\000\000\361\276\000\0004?\000\000\213>\000\000\346\276\000\200%\277\000\000\017?\000\000\"\276\000\000\304>\000\000\204\276\000\200\005?\000\200\037?\000\000@=\000\000\230?\000\000.>\000\000\354=\000\000f>\000\000\244\275\000\000\275\276\000\000|>\000\000D\276\000\000\316\276\000\200\'?\000\000v>\000\200\032?\000\000\244\276\000\000\025?\000\000\247>\000\000\321>\000\000\020\275\000\000<\276\000\000@\276\000\000R>\000\000\260\274\000\000\260\274\000\000\237>\000\000\274=\000\200\001?\000\200\"?\000\000\376>\000@\230?\000\000&\276\000\000\004>\000\000\322>\000\0008?\000\000\244\275\000\000\216>\000\000@\275\000\000\355>\000\000\300\273\000\000;?\000\200\013?\000\000n\276\000\000\213>\000\000\335>\000\000&\277\000\000\332>\000\000H=\000\000\004\277\000\000\n>\000\000\300;\000\2004?\000\000\334\276\000\000\026?\000\000\325>\000\200l?\000\000\310>\000\000\257>\000\000\016\276\000\000\360\275\000\000\023\277\000\000\375>\000\000\262>\000\000\000=\000\000\234\276\000\000\304=\000\000\255>\000\000\036\276\000\000\215\276\000\000H\275\000\000\003?\000\200\202?\000\000&>\000\000\003?\000\000\260\274\000\000\365\276\000\000\022\277\000\300\203?\000\000\230\275\000\000\330>\000\000\210\275\000\000P\276\000\000l>\000\000\274=\000\000\272\276\000\000\210\277\000\000\346>\000\000V>\000\000\236?\000\000\001?\000\000X\276\000\000.\277\000\0002\276\000\000\000;\000\000&\277\000\000\363\276\000\000\010>\000\000\300\274\000\000`<\000\000L?\000\000\362\276\000\000\270=\000\000\306>\000\000\347>\000\000\020>\000\000\327>\000\000\267\276\000\200c\277\000\000\325\276\000\000z\276\000\200J\277\000\200\t\277\000\000\030\275\000\000\006>\000\000\233>\000\000\200>\000\000v>\000\000\200\274\000\000\264=\000\000b>\000\000\267>\000\000`\274\000\000\270>\000\000\264=\000\000\330=\000\000\310\276\000\000\360<\000\000\006>\000\000\000=\000\000`<\000\000P>\000\000\312\276\000\000\200<\000\000\304=\000\0006>\000\000\270=\000\000@>\000\000\260=\000\000\300\275\000\0008\275\000\000\320\274\000\000\250=\000\000\020\275\000\000\010=\000\000l>\000\000\204=\000\000X\275\000\000\207>\000\000p=\000\000x\275\000\000V>\000\000\232\276\000\000>\276\000\000X=\000\000N\276\000\0000\275\000\000\244\275\000\0000\276\000\000(=\000\000\252>\000\000V>\000\000\220=\000\000\200\274\000\000 =\000\000P=\000\000\252\276\000\000\340\274\000\000\354=\000\000\234=\000\000 >\000\000b\276\000\000\314\275\000\000\034\276\000\000\324=\000\000 <\000\000\006\276\000\000]\277\000\000\261>\000\000\361\276\000\200\023\277\000\200b\277\000\000 <\000\000\273>\000\000\374>\000\200\006?\000\000@=\000\000\030\275\000\000\331\276\000\000\233\276\000\000\374\275\000\0000=\000\000(\276\000\000\260\274\000\000\267\276\000\000\210\275\000\000\223\276\000\000\207\277\000\000\370\276\000\000\325>\000\200\023?\000\000\357>\000\000 \275\000\000@\275\000\000:\277\000\000\354>\000\000&?\000\000\314=\000\000D>\000\000\032>\000\000 =\000\200[\277\000\000\341>\000\300\202\277\000\000H\277\000\000 \274\000\000\000\000\000\000`<\000\000\200<\000\000\364\276\000\000\335\276\000\000@=\000\000;?\000\000D\276\000\000\037\277\000\000x>\000\000x>\000\200=\277\000\000\227?\000\000\022\277\000\000\360>\000\200\003?\000\200\035?\000\000\305>\000\000\"\276\000\000\325\276\000\000\203\276\000\000J>\000\000v>\000\000\322>\000\200`\277\000\000\010\276\000\000x\276\000\000\360<\000\000 \274\000\000\354=\000\000\344\275\000\000\014\276\000\0008>\000\000\244\275\000\000\254>\000\000\350=\000\000X=\000\000 \275\000\000\260=\000\000\002>\000\000(\275\000\000j>\000\000\300;\000\000\010=\000\000\216>\000\000\000<\000\000@\274\000\0000\275\000\000\010=\000\000\\>\000\000\244\275\000\000\250\276\000\000 \274\000\000\266>\000\0008=\000\000\310=\000\000\222>\000\000\220<\000\000\265\276\000\000 \274\000\000 >\000\000\030\275\000\000V\276\000\000\034>\000\000\210=\000\000@\275\000\000\200\275\000\000\300\273\000\000\230\275\000\000p>\000\000\000>\000\000\222\276\000\000`\274\000\0004>\000\000x\275\000\000\030=\000\000N>\000\000\226>\000\000\250\276\000\000 <\000\000\360\275\000\000\216>\000\000X=\000\000\200\276\000\000\271\276\000\000\024>\000\0006>\000\000\250=\000\000\226>\000\000\353>\000\200H?\000\200\034\277\000\000\201\276\000\000\211\276\000\0001\277\000\200$?\000\000A?\000\000v\276\000\000T>\000\000\032\276\000\000=\277\000\000b\276\000\000\337>\000\000l\276\000\000\000;\000\000\n>\000\000\237>\000\000\227\276\000\300\244\277\000\200\210\277\000\200V\277\000\000\273>\000\0007?\000\000\243\276\000\000f>\000\000\211\276\000\000\213\276\000\000\240=\000\000 \274\000\000\020\277\000\000\010>\000\000\205\276\000\000\000?\000\000\360\274\000\200\000?\000\000`\277\000\000\271\276\000\000V\276\000\200X?\000\000(\276\000\000(>\000\000,\276\000\000\375>\000\000V>\000\000 ?\000\0006\277\000\000\364\276\000\000\324=\000\000\330=\000\000\315>\000\000\261>\000\200\003\277\000\000 =\000\200\177?\000\200T?\000\000\022?\000\000\260<\000\000p\276\000\000\026?\000\000x>\000\000>>\000\000T>\000\200!\277\000\000\000\273\000\000.>\000\000r\276\000\000\320=\000\000\230\275\000\000\010>\000\0002>\000\000 \275\000\000\224=\000\000\224>\000\000r\276\000\000\036\276\000\000b>\000\000\320\275\000\000 =\000\000\214\275\000\000\330=\000\000\340\274\000\000\360\275\000\000\030\276\000\0002>\000\000\220=\000\000\210=\000\000\000<\000\000\370=\000\000\223\276\000\000l>\000\000@=\000\000\200\276\000\000\275>\000\000\230=\000\000\000;\000\000\204=\000\000\260\274\000\000\300=\000\000z>\000\000\264\275\000\000\234=\000\000\200<\000\000\360\275\000\000L\276\000\000\274=\000\000\n\276\000\000h\275\000\000\030>\000\000x>\000\000\034\276\000\000\032>\000\000l\276\000\000\200=\000\000\254\275\000\000\200;\000\000\254\275\000\000t\276\000\000\360<\000\000<>\000\000\224=\000\000\260=\000\000\201\276\000\000 =\000\000`\274\000\000\004\276\000\000\264=\000\000j>\000\000\272>\000\000\212?\000\000\266\276\000\000\247>\000\000H=\000\000\370\275\000\0005?\000\000\215?\000\000\302>\000\000\233>\000\000\006>\000\000X\275\000\000\251\276\000\000b\276\000\000\234=\000\000\250\276\000\000\352>\000\0000=\000\000\374\275\000\000\360\275\000\000_\277\000\000\024\276\000\0007?\000\000T?\000\200x\277\000\000\313>\000\000\010>\000\000\236>\000\000\242\276\000\000\246\276\000\000\230=\000\000\200\274\000\000\337\276\000\2006?\000\000\260\274\000\000I?\000\000;\277\000\200\004\277\000\0002>\000\000f?\000\000.\276\000\000$?\000\0006>\000\300\205?\000\000N\276\000\000^\277\000\000\375\276\000\000n\276\000\000\343>\000\000\304\276\000\000\324=\000\000f\276\000\000;\277\000\000\030=\000\000x>\000\000.?\000\000\004?\000\000\274>\000\200G\277\000\000\017?\000\000\225\276\000\000P=\000\000p\275\000\000\350\275\000\000`\274\000\000\320=\000\000\201\276\000\000 \274\000\000@>\000\000\234=\000\000\206>\000\000D\276\000\000\200\273\000\000\330=\000\000\267\276\000\000\000\276\000\000\370=\000\000p\275\000\000\244\276\000\000\024\276\000\000\240\274\000\000N\276\000\000\216\276\000\000\241\276\000\000\214=\000\000\260\275\000\000r\276\000\000\000=\000\000\360\274\000\000\231>\000\000\206\276\000\000*>\000\000\030\275\000\000T\276\000\0008\275\000\000\036>\000\000\010\275\000\0006>\000\000\000\273\000\000\360<\000\000\"\276\000\000\002>\000\000>\276\000\000j\276\000\000R>\000\000x\275\000\000|\276\000\000\255\276\000\000\340=\000\000\032>\000\000\016>\000\0004\276\000\000\224=\000\000T\276\000\000\245>\000\000\036>\000\000\344\275\000\000\224\275\000\000\240<\000\000\252>\000\000\004\276\000\000\034\276\000\000\274=\000\000F\276\000\000\204=\000\000\212>\000\000\200>\000\000x\276"
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32768.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32767.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -32768.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32768.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp_3/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "\000\000\250=\000\200\030\277\000\000X>\000\000\264=\000\200\010?\000\000H\276\000\200\000\277\000\000\205>\000\000\300\276\000\000z\277\000\000\240>\000\000 =\000\000\332\276\000\200\003\277\000\000\344\275\000\000\214>"
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32768.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/Pow_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/Pow_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value_1/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32767.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -32768.0
      }
    }
  }
}
node {
  name: "encoder/en_dense_0/truediv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32768.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
        tensor_content: "\000\000 >\000\000\244\276\000\300\267?\000\000\233>\000\000\307>\000\000\375\276\000\000\346\276\000\200\025\277\000\0004\276\000\000\216>\000\000\270\275\000\000\205\276\000\0000?\000\000\315>\000\000\030\276\000\000\002\276\000\000+\277\000\200M\277\000\000\032\276\000\000\"?\000\000\205>\000\2004\277\000\000\256>\000\000H\277\000\000&\277\000\000\034\277\000\200\n\277\000\300\210\277\000\000+\277\000\200R\277\000\000\277\276\000\000\\\276\000\200g\277\000\200\005?\000\000H\275\000\000 =\000\000\020>\000\000\233\276\000\000h>\000\200\234?\000\000d\276\000@\224?\000\000\034>\000\000\230\275\000\000\363>\000\000\240\274\000\000\244\276\000\000\306>\000\000\240<\000\000\275\276\000\000\250>\000\0008\276\000\200\030\277\000\000\342>\000\200\034?\000\000\026\276\000\000\367\276\000\000\210\277\000\000r>\000\000\274\275\000\000j>\000\000g?\000\000\304\276\000@\243?\000\000\220=\000\000\026\276\000\000\006>\000\000\374>\000\000\343\276\000\0008=\000\200\265\277\000\000d>\000\000\344\275\000\000$?\000\000X?\000\000\245?\000\000N>\000\200\030?\000\000\360\275\000\300\326?\000\0002>\000\000\320<\000\000[\277\000\000\261\276\000\000\210>\000\000\330\276\000\200\037\277\000\000H=\000\000\213\277\000\000\274=\000\000l>\000\000\240\274\000\2002\277\000\000\210=\000\000\037\277\000\000\202\276\000\000\243>\000\200\021?\000\000I?\000\000\t\277\000\000\213>\000\000 \276\000\000\240=\000\000l\276\000\000\300\276\000\000\036\276\000\000\324\276\000\000\214\276\000\000\314=\000\000.\277\000\000\242>\000\000\271>\000\000\253>\000\000\354\275\000\200\005\277\000\000\217>\000\000p\275\000\000\241?\000\200Q?\000\000@?\000\200I\277\000\000\034?\000\000\350\275\000\200\'?\000\000\301>\000\000\n?\000\000O?\000\200O?\000\000\241>\000\000\262?\000\000\300;\000\200\021?\000\000j\276\000\200\010\277\000\000\264=\000\000\321\276\000\000\260\276\000\200\027\277\000\000)\277\000\200@\277\000\200/\277\000\200x\277\000\200\271\277\000\000\311\276\000\000G\277\000\000 \276\000\200\017?\000\000\262\276\000\000J\277\000\000K\277\000\000&?\000\000\360\276\000\000\t?\000\000\373>\000@\251\277\000\200\000\277\000\000\227\277\000\200\207\277\000\000n\276\000\000\374\275\000\200h?\000\000\325>\000\000\234\276\000\000\204\275\000\000(=\000\000\034>\000\000\250>\000\000\273\276\000\000 <\000\000`\275\000\000\210\276\000\000.\276\000\200\004\277\000\000\206\276\000\000\277>\000\000\260=\000\000\300>\000\000\030>\000\000\034?\000\000\314=\000\200\213?\000\000*\276\000\200\033?\000\000\\\276\000\200\314\277\000\000\002?\000\2007\277\000\000H\276\000\000\026\276\000\000@=\000\000\321\276\000\000&\277\000\000\311\276\000\000\232>\000\000\302>\000\000(\276\000\000)?\000\000f\277\000\000j\276\000\000\205>\000\200\017\277\000\000\t\277\000\000\030\276\000\000\006>\000\000\322>\000\0002\276\000\000\264\275\000\000t\277\000\000\034>\000\000\336>\000\000\323\276\000\000\'?\000\000h>\000\000\324\276\000\000\214=\000\000\315\276\000\000P>\000\000\004\277\000\200K\277\000\000\230\276\000@\305\277\000\000\013?\000\0001\277\000\000L\277\000\200s\277\000\0000?\000\000\242\276\000\000(\276\000\000\264=\000\000n\276\000\000,\277\000\000j\276\000\200v\277\000\000\340\274\000\000L>\000\0000>\000\000\275\276\000\200\007?\000\000\337>\000\200\021\277\000\000n>\000\000\273>\000\000Z\276\000\000\200\275\000\000)\277\000\000p\276\000\000\232\276\000\000\245>\000\000\230=\000\200\"?\000\000$>\000\000|\276\000\200\035\277\000\000\273\276\000\000\203>\000\000\350\276"
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32768.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32767.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -32768.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32768.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_3/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "\000\000\027\277\000\000\\?\000\200\037?\000\200\037?\000\000\310>\000\200\230?\000\000\005?\000\000`\274\000\000\033?\000\000\277>\000\000~?\000\000\030>\000\000\234>\000\000F>\000\000\025?\000\0000>"
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32768.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value_1/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32767.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -32768.0
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32768.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Pow_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Pow_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Cast_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "encoder/encod_qa/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 16.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Pow/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/encod_qa/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "encoder/encod_qa/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/truediv_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/encod_qa/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
      }
    }
  }
}
node {
  name: "encoder/input_qa/Neg_1"
  op: "Neg"
  input: "x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/mul"
  op: "Mul"
  input: "x"
  input: "encoder/input_qa/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/Pow"
  op: "Pow"
  input: "encoder/input_qa/Pow/x"
  input: "encoder/input_qa/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/input_qa/Cast"
  op: "Cast"
  input: "encoder/input_qa/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/input_qa/truediv"
  op: "RealDiv"
  input: "encoder/input_qa/mul"
  input: "encoder/input_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/Neg"
  op: "Neg"
  input: "encoder/input_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/Round"
  op: "Round"
  input: "encoder/input_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/add"
  op: "AddV2"
  input: "encoder/input_qa/Neg"
  input: "encoder/input_qa/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/StopGradient"
  op: "StopGradient"
  input: "encoder/input_qa/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/add_1"
  op: "AddV2"
  input: "encoder/input_qa/truediv"
  input: "encoder/input_qa/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/input_qa/add_1"
  input: "encoder/input_qa/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/clip_by_value"
  op: "Maximum"
  input: "encoder/input_qa/clip_by_value/Minimum"
  input: "encoder/input_qa/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/mul_1"
  op: "Mul"
  input: "encoder/input_qa/Cast"
  input: "encoder/input_qa/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/truediv_1"
  op: "RealDiv"
  input: "encoder/input_qa/mul_1"
  input: "encoder/input_qa/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/mul_2"
  op: "Mul"
  input: "encoder/input_qa/mul_2/x"
  input: "encoder/input_qa/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/add_2"
  op: "AddV2"
  input: "encoder/input_qa/Neg_1"
  input: "encoder/input_qa/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/mul_3"
  op: "Mul"
  input: "encoder/input_qa/mul_3/x"
  input: "encoder/input_qa/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/StopGradient_1"
  op: "StopGradient"
  input: "encoder/input_qa/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/input_qa/add_3"
  op: "AddV2"
  input: "x"
  input: "encoder/input_qa/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/flatten/Reshape"
  op: "Reshape"
  input: "encoder/input_qa/add_3"
  input: "encoder/flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp_2"
  op: "Identity"
  input: "encoder/en_dense_0/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp_1"
  op: "Identity"
  input: "encoder/en_dense_0/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Neg_1"
  op: "Neg"
  input: "encoder/en_dense_0/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp"
  op: "Identity"
  input: "encoder/en_dense_0/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul"
  op: "Mul"
  input: "encoder/en_dense_0/ReadVariableOp"
  input: "encoder/en_dense_0/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Pow"
  op: "Pow"
  input: "encoder/en_dense_0/Pow/x"
  input: "encoder/en_dense_0/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/en_dense_0/Cast"
  op: "Cast"
  input: "encoder/en_dense_0/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/en_dense_0/truediv"
  op: "RealDiv"
  input: "encoder/en_dense_0/mul"
  input: "encoder/en_dense_0/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Neg"
  op: "Neg"
  input: "encoder/en_dense_0/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Round"
  op: "Round"
  input: "encoder/en_dense_0/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add"
  op: "AddV2"
  input: "encoder/en_dense_0/Neg"
  input: "encoder/en_dense_0/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/StopGradient"
  op: "StopGradient"
  input: "encoder/en_dense_0/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_1"
  op: "AddV2"
  input: "encoder/en_dense_0/truediv"
  input: "encoder/en_dense_0/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/en_dense_0/add_1"
  input: "encoder/en_dense_0/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value"
  op: "Maximum"
  input: "encoder/en_dense_0/clip_by_value/Minimum"
  input: "encoder/en_dense_0/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_1"
  op: "Mul"
  input: "encoder/en_dense_0/Cast"
  input: "encoder/en_dense_0/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/truediv_1"
  op: "RealDiv"
  input: "encoder/en_dense_0/mul_1"
  input: "encoder/en_dense_0/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_2"
  op: "Mul"
  input: "encoder/en_dense_0/mul_2/x"
  input: "encoder/en_dense_0/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_2"
  op: "AddV2"
  input: "encoder/en_dense_0/Neg_1"
  input: "encoder/en_dense_0/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_3"
  op: "Mul"
  input: "encoder/en_dense_0/mul_3/x"
  input: "encoder/en_dense_0/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/StopGradient_1"
  op: "StopGradient"
  input: "encoder/en_dense_0/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_3"
  op: "AddV2"
  input: "encoder/en_dense_0/ReadVariableOp_2"
  input: "encoder/en_dense_0/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/MatMul"
  op: "MatMul"
  input: "encoder/flatten/Reshape"
  input: "encoder/en_dense_0/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp_5"
  op: "Identity"
  input: "encoder/en_dense_0/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp_4"
  op: "Identity"
  input: "encoder/en_dense_0/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Neg_3"
  op: "Neg"
  input: "encoder/en_dense_0/ReadVariableOp_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/ReadVariableOp_3"
  op: "Identity"
  input: "encoder/en_dense_0/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_4"
  op: "Mul"
  input: "encoder/en_dense_0/ReadVariableOp_3"
  input: "encoder/en_dense_0/mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Pow_1"
  op: "Pow"
  input: "encoder/en_dense_0/Pow_1/x"
  input: "encoder/en_dense_0/Pow_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/en_dense_0/Cast_1"
  op: "Cast"
  input: "encoder/en_dense_0/Pow_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/en_dense_0/truediv_2"
  op: "RealDiv"
  input: "encoder/en_dense_0/mul_4"
  input: "encoder/en_dense_0/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Neg_2"
  op: "Neg"
  input: "encoder/en_dense_0/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/Round_1"
  op: "Round"
  input: "encoder/en_dense_0/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_4"
  op: "AddV2"
  input: "encoder/en_dense_0/Neg_2"
  input: "encoder/en_dense_0/Round_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/StopGradient_2"
  op: "StopGradient"
  input: "encoder/en_dense_0/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_5"
  op: "AddV2"
  input: "encoder/en_dense_0/truediv_2"
  input: "encoder/en_dense_0/StopGradient_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "encoder/en_dense_0/add_5"
  input: "encoder/en_dense_0/clip_by_value_1/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/clip_by_value_1"
  op: "Maximum"
  input: "encoder/en_dense_0/clip_by_value_1/Minimum"
  input: "encoder/en_dense_0/clip_by_value_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_5"
  op: "Mul"
  input: "encoder/en_dense_0/Cast_1"
  input: "encoder/en_dense_0/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/truediv_3"
  op: "RealDiv"
  input: "encoder/en_dense_0/mul_5"
  input: "encoder/en_dense_0/truediv_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_6"
  op: "Mul"
  input: "encoder/en_dense_0/mul_6/x"
  input: "encoder/en_dense_0/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_6"
  op: "AddV2"
  input: "encoder/en_dense_0/Neg_3"
  input: "encoder/en_dense_0/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/mul_7"
  op: "Mul"
  input: "encoder/en_dense_0/mul_7/x"
  input: "encoder/en_dense_0/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/StopGradient_3"
  op: "StopGradient"
  input: "encoder/en_dense_0/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/add_7"
  op: "AddV2"
  input: "encoder/en_dense_0/ReadVariableOp_5"
  input: "encoder/en_dense_0/StopGradient_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/en_dense_0/BiasAdd"
  op: "BiasAdd"
  input: "encoder/en_dense_0/MatMul"
  input: "encoder/en_dense_0/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_2"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_1"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Neg_1"
  op: "Neg"
  input: "encoder/encoded_vector/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul"
  op: "Mul"
  input: "encoder/encoded_vector/ReadVariableOp"
  input: "encoder/encoded_vector/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow"
  op: "Pow"
  input: "encoder/encoded_vector/Pow/x"
  input: "encoder/encoded_vector/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encoded_vector/Cast"
  op: "Cast"
  input: "encoder/encoded_vector/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv"
  op: "RealDiv"
  input: "encoder/encoded_vector/mul"
  input: "encoder/encoded_vector/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Neg"
  op: "Neg"
  input: "encoder/encoded_vector/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Round"
  op: "Round"
  input: "encoder/encoded_vector/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add"
  op: "AddV2"
  input: "encoder/encoded_vector/Neg"
  input: "encoder/encoded_vector/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/StopGradient"
  op: "StopGradient"
  input: "encoder/encoded_vector/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_1"
  op: "AddV2"
  input: "encoder/encoded_vector/truediv"
  input: "encoder/encoded_vector/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/encoded_vector/add_1"
  input: "encoder/encoded_vector/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value"
  op: "Maximum"
  input: "encoder/encoded_vector/clip_by_value/Minimum"
  input: "encoder/encoded_vector/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_1"
  op: "Mul"
  input: "encoder/encoded_vector/Cast"
  input: "encoder/encoded_vector/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_1"
  op: "RealDiv"
  input: "encoder/encoded_vector/mul_1"
  input: "encoder/encoded_vector/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_2"
  op: "Mul"
  input: "encoder/encoded_vector/mul_2/x"
  input: "encoder/encoded_vector/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_2"
  op: "AddV2"
  input: "encoder/encoded_vector/Neg_1"
  input: "encoder/encoded_vector/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_3"
  op: "Mul"
  input: "encoder/encoded_vector/mul_3/x"
  input: "encoder/encoded_vector/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/StopGradient_1"
  op: "StopGradient"
  input: "encoder/encoded_vector/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_3"
  op: "AddV2"
  input: "encoder/encoded_vector/ReadVariableOp_2"
  input: "encoder/encoded_vector/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/MatMul"
  op: "MatMul"
  input: "encoder/en_dense_0/BiasAdd"
  input: "encoder/encoded_vector/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_5"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_4"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Neg_3"
  op: "Neg"
  input: "encoder/encoded_vector/ReadVariableOp_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/ReadVariableOp_3"
  op: "Identity"
  input: "encoder/encoded_vector/ReadVariableOp_3/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_4"
  op: "Mul"
  input: "encoder/encoded_vector/ReadVariableOp_3"
  input: "encoder/encoded_vector/mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Pow_1"
  op: "Pow"
  input: "encoder/encoded_vector/Pow_1/x"
  input: "encoder/encoded_vector/Pow_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encoded_vector/Cast_1"
  op: "Cast"
  input: "encoder/encoded_vector/Pow_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_2"
  op: "RealDiv"
  input: "encoder/encoded_vector/mul_4"
  input: "encoder/encoded_vector/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Neg_2"
  op: "Neg"
  input: "encoder/encoded_vector/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/Round_1"
  op: "Round"
  input: "encoder/encoded_vector/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_4"
  op: "AddV2"
  input: "encoder/encoded_vector/Neg_2"
  input: "encoder/encoded_vector/Round_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/StopGradient_2"
  op: "StopGradient"
  input: "encoder/encoded_vector/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_5"
  op: "AddV2"
  input: "encoder/encoded_vector/truediv_2"
  input: "encoder/encoded_vector/StopGradient_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "encoder/encoded_vector/add_5"
  input: "encoder/encoded_vector/clip_by_value_1/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/clip_by_value_1"
  op: "Maximum"
  input: "encoder/encoded_vector/clip_by_value_1/Minimum"
  input: "encoder/encoded_vector/clip_by_value_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_5"
  op: "Mul"
  input: "encoder/encoded_vector/Cast_1"
  input: "encoder/encoded_vector/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/truediv_3"
  op: "RealDiv"
  input: "encoder/encoded_vector/mul_5"
  input: "encoder/encoded_vector/truediv_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_6"
  op: "Mul"
  input: "encoder/encoded_vector/mul_6/x"
  input: "encoder/encoded_vector/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_6"
  op: "AddV2"
  input: "encoder/encoded_vector/Neg_3"
  input: "encoder/encoded_vector/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/mul_7"
  op: "Mul"
  input: "encoder/encoded_vector/mul_7/x"
  input: "encoder/encoded_vector/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/StopGradient_3"
  op: "StopGradient"
  input: "encoder/encoded_vector/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/add_7"
  op: "AddV2"
  input: "encoder/encoded_vector/ReadVariableOp_5"
  input: "encoder/encoded_vector/StopGradient_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/BiasAdd"
  op: "BiasAdd"
  input: "encoder/encoded_vector/MatMul"
  input: "encoder/encoded_vector/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/encod_qa/Pow_1"
  op: "Pow"
  input: "encoder/encod_qa/Pow_1/x"
  input: "encoder/encod_qa/Pow_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encod_qa/Cast_1"
  op: "Cast"
  input: "encoder/encod_qa/Pow_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encod_qa/Cast_2"
  op: "Cast"
  input: "encoder/encod_qa/Cast_2/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encod_qa/sub"
  op: "Sub"
  input: "encoder/encod_qa/Cast_2"
  input: "encoder/encod_qa/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Pow_2"
  op: "Pow"
  input: "encoder/encod_qa/Const"
  input: "encoder/encod_qa/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/sub_1"
  op: "Sub"
  input: "encoder/encod_qa/Cast_1"
  input: "encoder/encod_qa/Pow_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/LessEqual"
  op: "LessEqual"
  input: "encoder/encoded_vector/BiasAdd"
  input: "encoder/encod_qa/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Relu"
  op: "Relu"
  input: "encoder/encoded_vector/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/ones_like/Shape"
  op: "Shape"
  input: "encoder/encoded_vector/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encod_qa/ones_like"
  op: "Fill"
  input: "encoder/encod_qa/ones_like/Shape"
  input: "encoder/encod_qa/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encod_qa/sub_2"
  op: "Sub"
  input: "encoder/encod_qa/Cast_1"
  input: "encoder/encod_qa/Pow_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/mul"
  op: "Mul"
  input: "encoder/encod_qa/ones_like"
  input: "encoder/encod_qa/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/SelectV2"
  op: "SelectV2"
  input: "encoder/encod_qa/LessEqual"
  input: "encoder/encod_qa/Relu"
  input: "encoder/encod_qa/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Neg_1"
  op: "Neg"
  input: "encoder/encod_qa/SelectV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Pow"
  op: "Pow"
  input: "encoder/encod_qa/Pow/x"
  input: "encoder/encod_qa/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encod_qa/Cast"
  op: "Cast"
  input: "encoder/encod_qa/Pow"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encod_qa/mul_1"
  op: "Mul"
  input: "encoder/encoded_vector/BiasAdd"
  input: "encoder/encod_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/truediv"
  op: "RealDiv"
  input: "encoder/encod_qa/mul_1"
  input: "encoder/encod_qa/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Neg"
  op: "Neg"
  input: "encoder/encod_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/Round"
  op: "Round"
  input: "encoder/encod_qa/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/add"
  op: "AddV2"
  input: "encoder/encod_qa/Neg"
  input: "encoder/encod_qa/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/StopGradient"
  op: "StopGradient"
  input: "encoder/encod_qa/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/add_1"
  op: "AddV2"
  input: "encoder/encod_qa/truediv"
  input: "encoder/encod_qa/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/truediv_1"
  op: "RealDiv"
  input: "encoder/encod_qa/add_1"
  input: "encoder/encod_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/truediv_2"
  op: "RealDiv"
  input: "encoder/encod_qa/truediv_2/x"
  input: "encoder/encod_qa/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/sub_3"
  op: "Sub"
  input: "encoder/encod_qa/sub_3/x"
  input: "encoder/encod_qa/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/clip_by_value/Minimum"
  op: "Minimum"
  input: "encoder/encod_qa/truediv_1"
  input: "encoder/encod_qa/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/clip_by_value"
  op: "Maximum"
  input: "encoder/encod_qa/clip_by_value/Minimum"
  input: "encoder/encod_qa/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/mul_2"
  op: "Mul"
  input: "encoder/encod_qa/Cast_1"
  input: "encoder/encod_qa/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/add_2"
  op: "AddV2"
  input: "encoder/encod_qa/Neg_1"
  input: "encoder/encod_qa/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/mul_3"
  op: "Mul"
  input: "encoder/encod_qa/mul_3/x"
  input: "encoder/encod_qa/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/StopGradient_1"
  op: "StopGradient"
  input: "encoder/encod_qa/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encod_qa/add_3"
  op: "AddV2"
  input: "encoder/encod_qa/SelectV2"
  input: "encoder/encod_qa/StopGradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^encoder/en_dense_0/ReadVariableOp"
  input: "^encoder/en_dense_0/ReadVariableOp_1"
  input: "^encoder/en_dense_0/ReadVariableOp_2"
  input: "^encoder/en_dense_0/ReadVariableOp_3"
  input: "^encoder/en_dense_0/ReadVariableOp_4"
  input: "^encoder/en_dense_0/ReadVariableOp_5"
  input: "^encoder/encoded_vector/ReadVariableOp"
  input: "^encoder/encoded_vector/ReadVariableOp_1"
  input: "^encoder/encoded_vector/ReadVariableOp_2"
  input: "^encoder/encoded_vector/ReadVariableOp_3"
  input: "^encoder/encoded_vector/ReadVariableOp_4"
  input: "^encoder/encoded_vector/ReadVariableOp_5"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "encoder/encod_qa/add_3"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1205
}
